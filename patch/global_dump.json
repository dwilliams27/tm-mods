{"n0":"-- Script version that clears save data if not identical\r\nscriptVersion=11\r\n\ngameObjectGuidStores=gameObjectGuidStores or {}\ngameObjectHelpers=gameObjectHelpers or {}\ngameObjectHelpers.getGuidByName=function(name)\nfor _,store in pairs(gameObjectGuidStores) do\nif store[name]~=nil then\nreturn store[name]\nend\nend\nreturn nil\nend\ngameObjectHelpers.getObjectByName=function(name)\nlocal guid=gameObjectHelpers.getGuidByName(name)\nif guid~=nil then\nreturn getObjectFromGUID(guid)\nend\nreturn nil\nend\ngameObjectHelpers.addDecks=function(deckToAddTo,deckToAdd)\nlocal deckToAddObj=gameObjectHelpers.getObjectByName(deckToAdd)\nif deckToAddObj==nil then\nlogging.broadcastToAll(\"Did not find deck \"..deckToAdd..\",may have been already added to \"..deckToAddTo..\". Doing nothing.\")\nreturn\nend\ngameObjectHelpers.getObjectByName(deckToAddTo).putObject(deckToAddObj)\nend\ngameObjectHelpers.cleanOutDeck=function(deckToCleanOut,guidsToRemove,skip)\nif skip then\nreturn\nend\nfor _,guid in pairs(guidsToRemove) do\nlocal deck=gameObjectHelpers.getObjectByName(deckToCleanOut)\ndeck.takeObject({guid=guid,position={-53.30,-6.8,-64.37},rotation={180,270,0}})\nend\nend\ngameObjectHelpers.removeObjGracefully=function(guid)\nlocal obj=getObjectFromGUID(guid)\nif obj~=nil then\nif obj.getVar(\"selfDestruct\") then\nobj.call(\"selfDestruct\")\nelse\nobj.destruct()\nend\nend\nend","n1":"tableHelpers=tableHelpers or {}\r\ntableHelpers.getIndexInTable=function(tableToCheck,value)\r\nfor i,tableValue in pairs(tableToCheck) do\r\nif tableValue==value then\r\nreturn i\r\nend\r\nend\r\nreturn nil\r\nend\r\ntableHelpers.removeValueFromTable=function(tableToCheck,value)\r\nindex=tableHelpers.getIndexInTable(tableToCheck,value)\r\nwhile index~=nil do\r\ntable.remove(tableToCheck,index)\r\nindex=tableHelpers.getIndexInTable(tableToCheck,value)\r\nend\r\nend\r\ntableHelpers.isValueInTable=function(tableToCheck,value)\r\nreturn tableHelpers.getIndexInTable(tableToCheck,value)~=nil\r\nend\r\ntableHelpers.contains=function(tableToCheck,value)\r\nreturn tableHelpers.isValueInTable(tableToCheck,value)\r\nend\r\ntableHelpers.isTableValueInTable=function(tableToCheck,tableValue,predicate)\r\nfor _,entry in pairs(tableToCheck) do\r\nif predicate(entry,tableValue) then\r\nreturn true\r\nend\r\nend\r\nreturn false\r\nend\r\ntableHelpers.getCount=function(tableToCheck)\r\nlocal count=0\r\nfor _,entry in pairs(tableToCheck) do\r\ncount=count + 1\r\nend\r\nreturn count\r\nend\r\ntableHelpers.getKeyValueFromIndex=function(tableToCheck,index)\r\nlocal count=1\r\nlocal result={}\r\nfor key,value in pairs(tableToCheck) do\r\nif count==index then\r\nresult[key]=value\r\nreturn result\r\nend\r\ncount=count + 1\r\nend\r\nreturn nil\r\nend\r\ntableHelpers.removeKeyValuePairByIndex=function(tableToCheck,index)\r\nlocal count=1\r\nfor key,value in pairs(tableToCheck) do\r\nif count==index then\r\ntableToCheck[key]=nil\r\nreturn\r\nend\r\ncount=count + 1\r\nend\r\nend\r\ntableHelpers.combineSingleValueTables=function(tablesList)\r\nlocal combinedTable={}\r\nlocal index=1\r\nfor _,table in ipairs(tablesList) do\r\nfor _,tableEntry in ipairs(table) do\r\ncombinedTable[index]=tableEntry\r\nindex=index + 1\r\nend\r\nend\r\nreturn combinedTable\r\nend\r\ntableHelpers.cloneTable=function(table)\r\nlocal copy={}\r\nfor key,value in pairs(table) do\r\ncopy[key]=value\r\nend\r\nreturn copy\r\nend\r\ntableHelpers.cloneTableRecursively=function(table)\r\nreturn tableHelpers.deepCloneTable(table)\r\nend\r\ntableHelpers.deepClone=function(table)\r\nreturn tableHelpers.deepCloneTable(table)\r\nend\r\ntableHelpers.deepCloneTable=function(table)\r\nif type(table)~=\"table\" then\r\nreturn table\r\nend\r\nlocal copy={}\r\nfor key,value in pairs(table) do\r\nif type(value)==\"table\" then\r\ncopy[key]=tableHelpers.deepCloneTable(value)\r\nelse\r\ncopy[key]=value\r\nend\r\nend\r\nreturn copy\r\nend\r\ntableHelpers.getHashLength=function(table)\r\nlocal index=0\r\nfor i,_ in pairs(table) do\r\nindex=index + 1\r\nend\r\nreturn index\r\nend\r\ntableHelpers.findNearestMatch=function(table,targetValue)\r\nlocal closestMatch={index=1,fitness=math.abs(table[1] - targetValue),value=table[1]}\r\nfor index,value in pairs(table) do\r\nif math.abs(targetValue - value) < closestMatch.fitness then\r\nclosestMatch={index=index,fitness=math.abs(targetValue - value),value=value}\r\nend\r\nend\r\nreturn closestMatch\r\nend\r\ntableHelpers.changeNumericValue=function(tableIn,tableKey,delta,lowerLimit,upperLimit,rollOver)\r\nrollOver=rollOver or false\r\ntableIn[tableKey]=tableIn[tableKey] + delta\r\nif not rollOver then\r\nif lowerLimit and tableIn[tableKey] < lowerLimit then\r\ntableIn[tableKey]=lowerLimit\r\nelseif upperLimit and tableIn[tableKey] > upperLimit then\r\ntableIn[tableKey]=upperLimit\r\nend\r\nif math.abs(tableIn[tableKey]) < 10e-4 then\r\ntableIn[tableKey]=0\r\nend\r\nelse\r\nif lowerLimit and tableIn[tableKey] < lowerLimit then\r\ntableIn[tableKey]=upperLimit\r\nelseif upperLimit and tableIn[tableKey] > upperLimit then\r\ntableIn[tableKey]=lowerLimit\r\nend\r\nend\r\nend\r\ntableHelpers.getValueFromString=function(inputString,includeSubResults)\r\nlocal result={}\r\nlocal tmp1=nil\r\nlocal tmp2=nil\r\nlocal level=1\r\nlocal atStart=true\r\ninputString,returnTableSize=inputString:gsub(\"#\",\"\")\r\nfor subString in string.gmatch(inputString,\"[^%.]+\") do\r\nif atStart then\r\nresult[1]=Global.getVar(subString)\r\natStart=false\r\nelseif result~=nil then\r\nif string.match(subString,\"%[\")~=nil then\r\nlocal counter=1\r\nfor sub in string.gmatch(subString,\"[^%[]+\") do\r\nif counter==1 then\r\nresult[level]=result[level][sub]\r\nelse\r\nlevel=level + 1\r\nif string.match(sub,\"%]\")~=nil then\r\nsub,count=sub:gsub(\"%]\",\"\")\r\nresult[level]=Global.getVar(sub)\r\nif result[level]==nil then result[level]=tonumber(sub) end\r\nfor i=count,1,-1 do\r\nlevel=level - 1\r\nresult[level]=result[level][result[level + 1]]\r\nend\r\nelse\r\nresult[level]=Global.getVar(sub)\r\nend\r\nend\r\ncounter=counter + 1\r\nend\r\nelseif string.match(subString,\"%]\")~=nil then\r\nsubString,count=subString:gsub(\"%]\",\"\")\r\nresult[level]=result[level][subString]\r\nfor i=count,1,-1 do\r\nlevel=level - 1\r\nresult[level]=result[level][result[level + 1]]\r\nend\r\nelse\r\nresult[level]=result[level][subString]\r\nend\r\nend\r\nif result[level]==nil then return nil end\r\nend\r\nif includeSubResults then\r\nreturn result\r\nelseif returnTableSize~=0 then\r\nreturn tableHelpers.getCount(result[1])\r\nelse\r\nreturn result[1]\r\nend\r\nend\r","n2":"bagProtector=bagProtector or {}\nbagProtectorGuidStores=bagProtectorGuidStores or {\ngeneralStore={}\n}\nbagProtectorAllowedList=bagProtectorAllowedList or {}\nbagProtector.addToAllowList=function(containerId,objectId)\nif bagProtectorAllowedList[containerId]==nil then\nbagProtectorAllowedList[containerId]={}\nend\nif not tableHelpers.isValueInTable(bagProtectorAllowedList[containerId],objectId) then\ntable.insert(bagProtectorAllowedList[containerId],objectId)\nend\nend\nbagProtector.addBagToProtectedList=function(bagGuid)\ntable.insert(bagProtectorGuidStores.generalStore,bagGuid)\nend\nbagProtector.isProtectedContainer=function(enteredContainerGuid)\nfor _,store in pairs(bagProtectorGuidStores) do\nif tableHelpers.isValueInTable(store,enteredContainerGuid) then\n--log(\"Bag protector,protected container\")\nreturn true\nend\nend\n--log(\"Bag protector,not a protected container\")\nreturn false\nend\nbagProtector.isOnAllowedListForContainer=function(enteredContainerGuid,enteredObjectGuid)\nif bagProtectorAllowedList[enteredContainerGuid]~=nil then\nif tableHelpers.isValueInTable(bagProtectorAllowedList[enteredContainerGuid],enteredObjectGuid) then\nreturn true\nend\nend\nreturn false\nend\nbagProtector.objectLeaveContainer=function(leftContainer,leavingObject)\nif bagProtector.isProtectedContainer(leftContainer.getGUID()) then\nbagProtector.addToAllowList(leftContainer.getGUID(),leavingObject.getGUID())\nend\nend\nbagProtector.filterObjectEnter=function(enteredContainer,enteringObject)\nif bagProtector.isProtectedContainer(enteredContainer.getGUID()) then\nif bagProtector.isOnAllowedListForContainer(enteredContainer.getGUID(),enteringObject.getGUID()) then\n--log(\"Bag protected. Please pass.\")\nreturn true\nend\nreturn false\nend\nreturn nil\nend","n3":"vectorHelpers=vectorHelpers or {}\nvectorHelpers.addVectors=function(v1,v2)\nreturn {\n(v1[1] or v1.x) + (v2[1] or v2.x),\n(v1[2] or v1.y) + (v2[2] or v2.y),\n(v1[3] or v1.z) + (v2[3] or v2.z)\n}\nend\nvectorHelpers.subtractVectors=function(v1,v2)\nreturn {\n(v1[1] or v1.x) - (v2[1] or v2.x),\n(v1[2] or v1.y) - (v2[2] or v2.y),\n(v1[3] or v1.z) - (v2[3] or v2.z)\n}\nend\nvectorHelpers.scaleVector=function(v1,scale)\nreturn {\n(v1[1] or v1.x)*scale,\n(v1[2] or v1.y)*scale,\n(v1[3] or v1.z)*scale\n}\nend\nvectorHelpers.scaleVectorByVector=function(v1,v2)\nreturn {\n(v1[1] or v1.x) * (v2[1] or v2.x),\n(v1[2] or v1.y) * (v2[2] or v2.y),\n(v1[3] or v1.z) * (v2[3] or v2.z)\n}\nend\nvectorHelpers.divideVectorByVector=function(v1,v2)\nreturn {\n(v1[1] or v1.x) / (v2[1] or v2.x),\n(v1[2] or v1.y) / (v2[2] or v2.y),\n(v1[3] or v1.z) / (v2[3] or v2.z)\n}\nend\nvectorHelpers.vectorMagnitude=function(v1)\nreturn math.sqrt( v1[1]*v1[1] + v1[2]*v1[2] + v1[3]*v1[3] )\nend\nvectorHelpers.rotateVectorY=function(vector,rotateAngle)\nlocal cos=math.cos(rotateAngle * math.pi/180)\nlocal sin=math.sin(rotateAngle * math.pi/180)\nlocal resultVector={}\nresultVector[1]=cos*vector[1] + sin*vector[3]\nresultVector[2]=vector[2]\nresultVector[3]=-sin*vector[1] + cos*vector[3]\nreturn resultVector\nend\nvectorHelpers.multiplyVectorWithScalar=function(vector,scalar)\nreturn {vector[1]*scalar,vector[2]*scalar,vector[3]*scalar}\nend\nvectorHelpers.print=function(v)\nGlobal.call(\"logging_printToAll\",{\nmessage=\"{\" .. (v[1] or v.x) .. \",\" .. (v[2] or v.y) .. \",\" ..(v[3] or v.z) .. \"}\",\nmessageColor={1,1,1},\nloggingMode=\"unimportant\",\n})\nend\nvectorHelpers.fromLocalToWorld=function(gameObject,localDeltaVector,flip)\nif flip then localDeltaVector[1]=-localDeltaVector[1] end\nlocalDeltaVector=vectorHelpers.rotateVectorY(localDeltaVector,gameObject.getRotation()[2])\nlocal scaledDeltaVector=vectorHelpers.scaleVectorByVector(localDeltaVector,gameObject.getScale())\nvector=vectorHelpers.addVectors(gameObject.getPosition(),scaledDeltaVector)\nreturn vector\nend\nvectorHelpers.fromWorldToLocal=function(gameObject,worldPosition,flip)\nlocal localUnscaledUnrotatedVector=vectorHelpers.subtractVectors(worldPosition,gameObject.getPosition())\nlocal downScale={1/gameObject.getScale()[1],1/gameObject.getScale()[2],1/gameObject.getScale()[3]}\nlocal localScaledUnrotatedVector=vectorHelpers.scaleVectorByVector(localUnscaledUnrotatedVector,downScale)\nvector=vectorHelpers.rotateVectorY(localScaledUnrotatedVector,-gameObject.getRotation()[2])\nif flip then vector[1]=-vector[1] end\nreturn vector\nend\nvectorHelpers.truncateVectorEntries=function(inputVector,keepDecimals)\nlocal factor=1\nfor i=1,keepDecimals do\nfactor=factor * 10\nend\nlocal tmpVec=vectorHelpers.scaleVector(inputVector,factor)\ntmpVec={math.floor(tmpVec[1]),math.floor(tmpVec[2]),math.floor(tmpVec[3])}\nreturn vectorHelpers.scaleVector(tmpVec,1/factor)\nend\nvectorHelpers.isInsideRange=function(targetPosition,testPosition,radius)\nlocal deltaVector=vectorHelpers.subtractVectors(targetPosition,testPosition)\nreturn vectorHelpers.vectorMagnitude(deltaVector) <= radius\nend","n4":"matrixTwoDHelpers=matrixTwoDHelpers or {}\nmatrixTwoDHelpers.createGrid=function(baseOffset,gridSizes,gridVectors,rotationAngle)\nif type(gridSizes)~=\"table\" or #gridSizes==0 then\nreturn {baseOffset}\nend\nlocal subSizes={}\nlocal subVectors={}\nfor i=2,#gridSizes do\ntable.insert(subSizes,gridSizes[i])\ntable.insert(subVectors,gridVectors[i])\nend\nlocal previousGrid=matrixTwoDHelpers.createGrid(baseOffset,subSizes,subVectors)\nlocal newGrid={}\nfor index,previousGridPoint in pairs(previousGrid) do\nfor i=1,gridSizes[1] do\nnewGrid[((index -1)*gridSizes[1]) + i]=vectorHelpers.addVectors(vectorHelpers.scaleVector(gridVectors[1],(i - 1)),previousGridPoint)\nend\nend\nif rotationAngle~=nil then\nnewGrid=matrixTwoDHelpers.rotateGridAroundPointY(baseOffset,newGrid,rotationAngle)\nend\nreturn newGrid\nend\nmatrixTwoDHelpers.createGridWithExceptions=function(startPos,gridSizes,gridVectors,rotationAngle,exceptions)\nlocal grid=matrixTwoDHelpers.createGrid(startPos,gridSizes,gridVectors,rotationAngle)\nfor i=#exceptions,1,-1 do\nlocal exceptionIndex=(exceptions[i][2]-1)*gridSizes[1] + exceptions[i][1]\ntable.remove(grid,exceptionIndex)\nend\nreturn grid\nend\nmatrixTwoDHelpers.fromLocalToWorld=function(parentObject,grid)\nlocal newGrid={}\nfor i,entry in pairs(grid) do\ntable.insert(newGrid,vectorHelpers.fromLocalToWorld(parentObject,entry))\nend\nreturn newGrid\nend\nmatrixTwoDHelpers.createScaledGrid=function(baseOffset,gridSizes,gridVectorsIn,rotationAngle,scale)\nlocal offset=vectorHelpers.scaleVectorByVector(baseOffset,scale)\nlocal gridVectors={}\ngridVectors[1]=vectorHelpers.scaleVectorByVector(gridVectorsIn[1],scale)\ngridVectors[2]=vectorHelpers.scaleVectorByVector(gridVectorsIn[2],scale)\nlocal grid=matrixTwoDHelpers.createGrid(offset,gridSizes,gridVectors)\nlocal rotatedGrid=matrixTwoDHelpers.rotateGridAroundPointY(offset,grid,rotationAngle)\nreturn rotatedGrid\nend\nmatrixTwoDHelpers.rotateGridAroundPointY=function(point,grid,rotation)\nlocal result={}\nfor index,gridEntry in pairs(grid) do\nlocal offset=vectorHelpers.subtractVectors(gridEntry,point)\nlocal rotatedOffset=vectorHelpers.rotateVectorY(offset,rotation)\nresult[index]=vectorHelpers.addVectors(point,rotatedOffset)\nend\nreturn result\nend\nmatrixTwoDHelpers.createSnapGrid=function(object,baseOffset,gridSizes,gridVectors,rotationAngle,rotationSnap,rotationVectorSnap,scale)\nif scale~=nil then\nbaseOffset=vectorHelpers.scaleVectorByVector(baseOffset,scale)\ngridVectors[1]=vectorHelpers.scaleVectorByVector(gridVectors[1],scale)\ngridVectors[2]=vectorHelpers.scaleVectorByVector(gridVectors[2],scale)\nend\nlocal grid=matrixTwoDHelpers.createGrid(baseOffset,gridSizes,gridVectors)\nlocal rotatedGrid=matrixTwoDHelpers.rotateGridAroundPointY(baseOffset,grid,rotationAngle)\nlocal snapInformation={}\nfor index,gridPoint in pairs(rotatedGrid) do\nsnapInformation[index]={\nposition=gridPoint,\nrotation=rotationVectorSnap,\nrotation_snap=rotationSnap\n}\nend\nreturn snapInformation\nend\nmatrixTwoDHelpers.scaledCoordinatesFrom1DIndexForIrregularMatrix=function(index,row_starting_offset,column_starting_offset,row_length,scaling)\nlocal row_index=math.floor((index - 1) / row_length)\nlocal column_index=(index - 1) % row_length\nreturn {row_starting_offset + row_index * scaling[1],column_starting_offset + column_index * scaling[2]}\nend\nmatrixTwoDHelpers.totalOffsetFromPositionMatrixAnd1DIndex=function(index,positionMatrix,scaling)\nlocal offset2D=matrixTwoDHelpers.scaledCoordinatesFrom1DIndexForIrregularMatrix(\nindex,positionMatrix.rowStartingOffset,positionMatrix.columnStartingOffset,positionMatrix.rowLength,scaling or {1,1})\nreturn {offset2D[1],positionMatrix.heightStartingOffset,offset2D[2]}\nend\nmatrixTwoDHelpers.computeBoundsFromGrid=function(inputData)\nlocal grid=inputData.grid\nlocal computeMiddlePoint=inputData.computeMiddlePoint or false\nlocal lowestX=grid[1][1]\nlocal highestX=grid[1][1]\nlocal lowestZ=grid[1][3]\nlocal highestZ=grid[1][3]\nfor _,entry in pairs(grid) do\nif lowestX > entry[1] then\nlowestX=entry[1]\nend\nif highestX < entry[1] then\nhighestX=entry[1]\nend\nif lowestZ > entry[3] then\nlowestZ=entry[3]\nend\nif highestZ < entry[3] then\nhighestZ=entry[3]\nend\nend\nlocal deltaX=highestX - lowestX\nlocal deltaZ=highestZ - lowestZ\nif computeMiddlePoint then\nlocal middlePoint={x=lowestX + 1/2 * deltaX,y=grid[1][2],z=lowestZ + 1/2 * deltaZ}\nreturn {xSize=deltaX,zSize=deltaZ,middlePoint=middlePoint}\nelse\nreturn {xSize=deltaX,zSize=deltaZ}\nend\nend","n5":"zoneHelpers={}\nzoneHelpers.createScriptingZoneForEachGridPoint=function(parentObject,grid,operationId,heightIn)\nlocal zoneGuids={}\nlocal height=heightIn or 0.6\nvolatileData.operations[operationId]={}\nvolatileData.operations[operationId].isDone=false\nfunction coroutineSpawnZoneForEachGridPoint()\nlocal zoneSetup={}\nzoneSetup.scale={0.1,height,0.1}\nzoneSetup.rotation={0,0,0}\nzoneSetup.type=\"ScriptingTrigger\"\nfor i=1,#grid do\nlocal pos=vectorHelpers.addVectors(grid[i],{0,height/2,0})\nif parentObject~=nil then\npos=vectorHelpers.fromLocalToWorld(parentObject,pos)\nend\nzoneSetup.position=pos\nzoneSetup.callback_function=function(spawned_object)\ntable.insert(zoneGuids,spawned_object.getGUID())\nend\nspawnObject(zoneSetup)\nend\nfor i=1,3 do\ncoroutine.yield(0)\nend\nvolatileData.operations[operationId].result=zoneGuids\nvolatileData.operations[operationId].isDone=true\nreturn 1\nend\nstartLuaCoroutine(self,\"coroutineSpawnZoneForEachGridPoint\")\nend\nzoneHelpers.createScriptingZoneFromGrid=function(parentObject,grid,operationId,borderIn,heightIn)\nlocal border=borderIn or {0.0,0.0}\nlocal height=heightIn or 0.6\nvolatileData.operations[operationId]={}\nvolatileData.operations[operationId].isDone=false\nfunction coroutineSpawnZoneFromTransform()\nlocal zoneSetup={}\nlocal bounds=matrixTwoDHelpers.computeBoundsFromGrid({grid=grid,computeMiddlePoint=true,scale=object.getScale()})\nzoneSetup.scale={bounds.xSize,height,bounds.zSize}\nzoneSetup.rotation={0,0,0}\nzoneSetup.type=\"ScriptingTrigger\"\nlocal pos=vectorHelpers.addVectors(bounds.middlePoint,{0,height/2,0})\nif parentObject~=nil then\npos=vectorHelpers.fromLocalToWorld(parentObject,pos)\nzoneSetup.scale=vectorHelpers.scaleVectorByVector(zoneSetup.scale,parentObject.getScale())\nend\nzoneSetup.scale=vectorHelpers.addVectors(zoneSetup.scale,{2*border[1],0,2*border[2]})\nzoneSetup.position=pos\nlocal zone=spawnObject(zoneSetup)\nfor i=1,3 do\ncoroutine.yield(0)\nend\nvolatileData.operations[operationId].result=zone.getGUID()\nvolatileData.operations[operationId].isDone=true\nreturn 1\nend\nstartLuaCoroutine(self,\"coroutineSpawnZoneFromTransform\")\nend\nzoneHelpers.createScriptingZoneFromTransform=function(parentObject,transform,operationId,heightIn,scale)\nlocal zoneGuids={}\nlocal height=heightIn or 0.6\nlocal scale=scale or {0.1,0.1,0.1}\nvolatileData.operations[operationId]={}\nvolatileData.operations[operationId].isDone=false\nfunction coroutineSpawnZoneForEachGridPoint()\nlocal zoneSetup={}\nzoneSetup.scale=vectorHelpers.addVectors({0,height,0},scale)\nzoneSetup.rotation={0,0,0}\nzoneSetup.type=\"ScriptingTrigger\"\nlocal pos=vectorHelpers.addVectors(transform.pos,{0,height/2,0})\nif parentObject~=nil then\npos=vectorHelpers.fromLocalToWorld(parentObject,pos)\nend\nzoneSetup.position=pos\nlocal zone=spawnObject(zoneSetup)\nfor i=1,3 do\ncoroutine.yield(0)\nend\nvolatileData.operations[operationId].result=zone.getGUID()\nvolatileData.operations[operationId].isDone=true\nreturn 1\nend\nstartLuaCoroutine(self,\"coroutineSpawnZoneForEachGridPoint\")\nend\n--","n6":"hexMapHelpers={}\nhexMapHelpers.getNeighboursFromWorldCoordinates=function(map,worldCoordinates,mapTile)\nlocal indices=worldCoordinatesToIndices(map.metadata,worldCoordinates,mapTile)\nreturn hexMapHelpers.getNeighboursFromIndices(map,indices)\nend\nhexMapHelpers.getNeighboursFromIndices=function(map,indices)\nif #indices==0 then\nreturn {}\nend\nlocal neighbourTiles={}\nlocal probingVectors={{0,-1,0},{0,0,-1},{1,0,0},{0,1,0},{0,0,1},{-1,0,0}}\nfor _,vec in pairs(probingVectors) do\nlocal neighbourIndices=vectorHelpers.addVectors(indices,vec)\nneighbourIndices=normalizeIndices(neighbourIndices)\nif tileExists(map,neighbourIndices) then\ntable.insert(neighbourTiles,map.tiles[neighbourIndices[1]][neighbourIndices[2]][neighbourIndices[3]])\nend\nend\nreturn neighbourTiles\nend\nhexMapHelpers.getNeighboursIndicesFromWorldCoordinates=function(map,worldCoordinates,mapTile)\nlocal indices=worldCoordinatesToIndices(map.metadata,worldCoordinates,mapTile)\nreturn hexMapHelpers.getNeighboursIndicesFromIndices(map,indices)\nend\nhexMapHelpers.getNeighboursIndicesFromIndices=function(map,indices)\nif #indices==0 then\nreturn {}\nend\nlocal neighbourTilesIndices={}\nlocal probingVectors={{0,-1,0},{0,0,-1},{1,0,0},{0,1,0},{0,0,1},{-1,0,0}}\nfor _,vec in pairs(probingVectors) do\nlocal neighbourIndices=vectorHelpers.addVectors(indices,vec)\nneighbourIndices=normalizeIndices(neighbourIndices)\nif tileExists(map,neighbourIndices) then\ntable.insert(neighbourTilesIndices,{neighbourIndices[1],neighbourIndices[2],neighbourIndices[3]})\nend\nend\nreturn neighbourTilesIndices\nend\nhexMapHelpers.getTileFromWorldCoordinates=function(map,worldCoordinates,mapTile)\nlocal indices=worldCoordinatesToIndices(map.metadata,worldCoordinates,mapTile)\nif #indices==0 then\nreturn nil\nend\nif not tileExists(map,indices) then\nreturn nil\nend\nreturn map.tiles[indices[1]][indices[2]][indices[3]]\nend\nhexMapHelpers.getTileFromArbitraryHexCoords=function(map,coords)\nlocal normalizedCoords=normalizeIndices(coords)\nif not tileExists(map,normalizedCoords) then\nreturn nil\nend\nreturn map.tiles[normalizedCoords[1]][normalizedCoords[2]][normalizedCoords[3]]\nend\nhexMapHelpers.getMapBounds=function(map,mapTile)\nlocal leftMostIndices={0,0,0}\nlocal rightMostIndices={0,0,0}\nlocal iRightMost=0\nlocal iLeftMost=0\nlocal topMostIndices={0,0,0}\nlocal bottomMostIndices={0,0,0}\nfor i,jkMatrix in pairs(map.tiles) do\nfor j,kMatrix in pairs(jkMatrix) do\nfor k,_ in pairs(kMatrix) do\nif j + i >= vectorHelpers.vectorMagnitude(rightMostIndices) then\nif i >= iRightMost then\niRightMost=i\nrightMostIndices={i,j,0}\nend\nend\nif k - i >= vectorHelpers.vectorMagnitude(leftMostIndices) then\nif i <= iLeftMost then\niLeftMost=i\nleftMostIndices={-i,0,k}\nend\nend\nif k + j > vectorHelpers.vectorMagnitude(bottomMostIndices) then\nbottomMostIndices={0,j,k}\nend\nend\nend\nend\nlocal topMostWorldCoordinates=indicesToWorldCoordinates(map.metadata,topMostIndices,mapTile)\nlocal leftMostWorldCoordinates=indicesToWorldCoordinates(map.metadata,leftMostIndices,mapTile)\nlocal bottomMostWorldCoordinates=indicesToWorldCoordinates(map.metadata,bottomMostIndices,mapTile)\nlocal rightMostWorldCoordinates=indicesToWorldCoordinates(map.metadata,rightMostIndices,mapTile)\nlocal topMostWorldCoordinates=vectorHelpers.addVectors(topMostWorldCoordinates,{0,0,map.metadata.hexDistance/1.7})\nlocal leftMostWorldCoordinates=vectorHelpers.addVectors(leftMostWorldCoordinates,{-map.metadata.hexDistance/2,0,0})\nlocal bottomMostWorldCoordinates=vectorHelpers.addVectors(bottomMostWorldCoordinates,{0,0,-map.metadata.hexDistance/1.7})\nlocal rightMostWorldCoordinates=vectorHelpers.addVectors(rightMostWorldCoordinates,{map.metadata.hexDistance/2,0,0})\nreturn {top=topMostWorldCoordinates,left=leftMostWorldCoordinates,bottom=bottomMostWorldCoordinates,right=rightMostWorldCoordinates}\nend\nhexMapHelpers.isOnMapTile=function(map,position,mapTile)\nlocal ind=worldCoordinatesToIndices(map.metadata,position,mapTile)\nreturn map.tiles[ind[1]]~=nil and\nmap.tiles[ind[1]][ind[2]]~=nil and\nmap.tiles[ind[1]][ind[2]][ind[3]]~=nil\nend\nhexMapHelpers.isOnMars=function(map,position)\nlocal mapTile=gameObjectHelpers.getObjectByName(\"gameMap\")\nlocal ind=worldCoordinatesToIndices(map.metadata,position,mapTile)\nreturn map.tiles[ind[1]]~=nil and\nmap.tiles[ind[1]][ind[2]]~=nil and\nmap.tiles[ind[1]][ind[2]][ind[3]]~=nil\nend\nhexMapHelpers.indicesToWorldCoordinates=function(map,indices,mapTile)\nreturn indicesToWorldCoordinates(map.metadata,indices,mapTile)\nend\nhexMapHelpers.makeMapSerializable=function(map)\nif map==nil then\nreturn {}\nend\nlocal serializableMap={}\nserializableMap.metadata=map.metadata\nserializableMap.tiles=convertToSerializableTiles(map.tiles)\nreturn serializableMap\nend\nhexMapHelpers.makeMapComputeFriendly=function(map)\nif map==nil then\nreturn {}\nend\nlocal computeFriendlyMap={}\ncomputeFriendlyMap.metadata=map.metadata\ncomputeFriendlyMap.tiles=convertToComputeFriendlyTiles(map.tiles)\nreturn computeFriendlyMap\nend\nhexMapHelpers.computeDistanceBetweenIndices=function(indicesA,indicesB,absolute)\nabsolute=absolute or true\nlocal nia=normalizeIndices(indicesA)\nlocal nib=normalizeIndices(indicesB)\nlocal ctrlFunc=function(a,b)\nif a * b~=0 then\nreturn 1\nelse\nreturn 0\nend\nend\nif nia[3]==0 and nib[3]==0 then\nif (nia[1] - nib[1]) * (nia[2] - nib[2]) >= 0 then\nreturn math.abs(nia[1] - nib[1]) + math.abs(nia[2] - nib[2])\nelseif math.abs(nia[1] - nib[1]) > math.abs(nia[2] - nib[2]) then\nreturn math.abs(nia[1] - nib[1])\nelse\nreturn math.abs(nia[1] - nib[1]) + math.abs(nia[2] - nib[2] + nia[1] - nib[1])\nend\nelseif nia[1]==0 and nib[1]==0 then\nif (nia[3] - nib[3]) * (nia[2] - nib[2]) >= 0 then\nreturn math.abs(nia[2] - nib[2]) + math.abs(nia[3] - nib[3])\nelseif math.abs(nia[2] - nib[2]) > math.abs(nia[3] - nib[3]) then\nreturn math.abs(nia[2] - nib[2])\nelse\nreturn math.abs(nia[2] - nib[2]) + math.abs(nia[3] - nib[3] + nia[2] - nib[2])\nend\nelse\nif nia[1] > 0 then\nif math.abs(nia[1] + nia[2]) < nib[2] then\nreturn nib[3] + math.abs(nia[2] - nib[2])\nelse\nreturn nib[3] + nia[1]\nend\nelse\nif math.abs(nib[1] + nib[2]) < nia[2] then\nreturn nia[3] + math.abs(nib[2] - nia[2])\nelse\nreturn nia[3] + nib[1]\nend\nend\nend\nend\nhexMapHelpers.walkMapHorizontally=function(map,stepsToWalk,direction,startingIndices,skipMapFeatures,forbiddenIndices)\nlocal indices=tableHelpers.cloneTable(startingIndices)\nlocal rowStartingIndices=tableHelpers.cloneTable(startingIndices)\nfor i=0,stepsToWalk do\nif i~=0 then\nindices[1]=indices[1] + direction\nindices=normalizeIndices(indices)\nend\nlocal skipTile=true\nlocal outCond=0\nwhile skipTile and outCond < 100 do\nif not tileExists(map,indices) then\nlocal potentialIndices=normalizeIndices({rowStartingIndices[1],rowStartingIndices[2],rowStartingIndices[3] + direction})\nif not tileExists(map,potentialIndices) then\npotentialIndices=normalizeIndices({rowStartingIndices[1],rowStartingIndices[2] + direction,rowStartingIndices[3]})\nif not tileExists(map,potentialIndices) then\npotentialIndices=tableHelpers.cloneTable(startingIndices)\nend\nend\nrowStartingIndices=potentialIndices\nindices=tableHelpers.cloneTable(rowStartingIndices)\nend\nlocal tile=map.tiles[indices[1]][indices[2]][indices[3]]\nif isTileSkipped(tile,skipMapFeatures,true,indices,forbiddenIndices) then\nindices[1]=indices[1] + direction\nend\nindices=normalizeIndices(indices)\noutCond=outCond + 1\nend\nend\nreturn indices\nend\nhexMapHelpers.walkAroundTile=function(map,stepsToWalk,tileIndices,skipMapFeatures,forbiddenIndices)\nlocal neighbouringTiles=hexMapHelpers.getNeighboursFromIndices(map,tileIndices)\nlocal tilesCounting=0\nlocal probingVectors={{0,-1,0},{0,0,-1},{1,0,0},{0,1,0},{0,0,1},{-1,0,0}}\nfor i,tile in pairs(neighbouringTiles) do\nlocal neighbourIndices=normalizeIndices(vectorHelpers.addVectors(tileIndices,probingVectors[i]))\nif not isTileSkipped(tile,skipMapFeatures,true,neighbourIndices,forbiddenIndices) then\ntilesCounting=tilesCounting + 1\nend\nend\nif tilesCounting==0 then\nreturn nil\nend\nstepsToWalk=stepsToWalk % tilesCounting\nlocal neighbourIndices=hexMapHelpers.getNeighboursIndicesFromIndices(map,tileIndices)\nfor i,tile in pairs(neighbouringTiles) do\nif not isTileSkipped(tile,skipMapFeatures,true,neighbourIndices[i],forbiddenIndices) then\nif stepsToWalk==0 then\nreturn neighbourIndices[i]\nend\nstepsToWalk=stepsToWalk - 1\nend\nend\nend\nfunction isTileSkipped(tile,skipMapFeatures,skipTileObjects,indices,forbiddenIndices)\nif skipTileObjects and tile.tileObjects~=nil and next(tile.tileObjects)~=nil then\nreturn true\nend\nfor _,skipMapFeature in pairs(skipMapFeatures) do\nfor _,tileFeature in pairs(tile.features) do\nif skipMapFeature==tileFeature then\nreturn true\nend\nend\nend\nfor _,fi in pairs(forbiddenIndices) do\nif fi[1]==indices[1] and fi[2]==indices[2] and fi[3]==indices[3] then\nreturn true\nend\nend\nreturn false\nend\nfunction convertToComputeFriendlyTiles(rawTiles)\nlocal tiles={}\nfor i,tile in pairs(rawTiles) do\nif tiles[tile.coords[1]]==nil then\ntiles[tile.coords[1]]={}\nend\nif tiles[tile.coords[1]][tile.coords[2]]==nil then\ntiles[tile.coords[1]][tile.coords[2]]={}\nend\ntiles[tile.coords[1]][tile.coords[2]][tile.coords[3]]={features=tile.features,placementProperties=tile.placementProperties,adjacenyEffects=tile.adjacenyEffects,tileObjects=tile.tileObjects}\nend\nreturn tiles\nend\nfunction convertToSerializableTiles(tiles)\nlocal serializableTiles={}\nfor i,jkMatrix in pairs(tiles) do\nfor j,kMatrix in pairs(jkMatrix) do\nfor k,tile in pairs(kMatrix) do\nlocal newTile={features=tile.features,placementProperties=tile.placementProperties,adjacenyEffects=tile.adjacenyEffects,tileObjects=tile.tileObjects}\nnewTile.coords={i,j,k}\ntable.insert(serializableTiles,newTile)\nend\nend\nend\nreturn serializableTiles\nend\nfunction worldCoordinatesToIndices(mapMetadata,worldCoordinates,mapTile)\nlocal mapWorldLocation=mapTile.getPosition()\nlocal mapStartWorldCoords=vectorHelpers.addVectors(mapMetadata.offset,mapWorldLocation)\nworldCoordinates[2]=mapStartWorldCoords[2]\nlocal indices={0,0,0}\nlocal probingVector=vectorHelpers.subtractVectors(worldCoordinates,mapStartWorldCoords)\nlocal lastNearestCoordinates=mapStartWorldCoords\nlocal iProbingVector={}\nlocal i=0\nwhile (vectorHelpers.vectorMagnitude(probingVector) > (mapMetadata.hexDistance / 2) and not (i > 100)) do\nlocal iProbingVector=vectorHelpers.addVectors(lastNearestCoordinates,{mapMetadata.hexDistance,0,0})\nlocal jProbingVector=vectorHelpers.addVectors(lastNearestCoordinates,{mapMetadata.hexDistance * math.cos(60 * math.pi/180),0,-mapMetadata.hexDistance * math.sin(60 * math.pi/180)})\nlocal kProbingVector=vectorHelpers.addVectors(lastNearestCoordinates,{-mapMetadata.hexDistance * math.cos(60 * math.pi/180),0,-mapMetadata.hexDistance * math.sin(60 * math.pi/180)})\nlocal indicesDelta={1,0,0}\nlocal iProbe=vectorHelpers.subtractVectors(worldCoordinates,iProbingVector)\nlocal jProbe=vectorHelpers.subtractVectors(worldCoordinates,jProbingVector)\nlocal kProbe=vectorHelpers.subtractVectors(worldCoordinates,kProbingVector)\nlastNearestCoordinates=iProbingVector\nif vectorHelpers.vectorMagnitude(jProbe) < vectorHelpers.vectorMagnitude(iProbe) then\nlastNearestCoordinates=jProbingVector\nindicesDelta={0,1,0}\nif vectorHelpers.vectorMagnitude(kProbe) < vectorHelpers.vectorMagnitude(jProbe) then\nlastNearestCoordinates=kProbingVector\nindicesDelta={0,0,1}\nend\nend\nprobingVector=vectorHelpers.subtractVectors(worldCoordinates,lastNearestCoordinates)\nindices=vectorHelpers.addVectors(indices,indicesDelta)\ni=i + 1\nend\nreturn normalizeIndices(indices)\nend\nfunction indicesToWorldCoordinates(mapMetadata,indices,mapTile)\nif mapTile==nil then\nmapTile=gameObjectHelpers.getObjectByName(\"gameMap\")\nend\nlocal mapWorldLocation=mapTile.getPosition()\nlocal mapStartWorldCoords=vectorHelpers.addVectors(mapMetadata.offset,mapWorldLocation)\nlocal x=mapMetadata.hexDistance * (indices[1] + math.cos(60 * math.pi/180) * (indices[2] - indices[3]))\nlocal y=0\nlocal z=-mapMetadata.hexDistance * math.sin(60 * math.pi/180) * (indices[2] + indices[3])\nlocal worldCoordinates=vectorHelpers.addVectors({x,y,z},mapStartWorldCoords)\nreturn worldCoordinates\nend\nfunction normalizeIndices(indices)\nlocal normalizedIndices=indices\nlocal modifier=1\nlocal i=0\nwhile modifier~=0 and i < 10 do\nif normalizedIndices[2] * normalizedIndices[3] < 0 then\nif normalizedIndices[2] < 0 and normalizedIndices[3] > 0 then\nif -normalizedIndices[2] < normalizedIndices[3] then\nmodifier=normalizedIndices[2]\nelse\nmodifier=-normalizedIndices[3]\nend\nelse\nif normalizedIndices[2] < -normalizedIndices[3] then\nmodifier=normalizedIndices[2]\nelse\nmodifier=-normalizedIndices[3]\nend\nend\nelseif normalizedIndices[1] * normalizedIndices[3] > 0 then\nif normalizedIndices[1] < 0 and normalizedIndices[3] < 0 then\nif -normalizedIndices[1] < -normalizedIndices[3] then\nmodifier=-normalizedIndices[1]\nelse\nmodifier=-normalizedIndices[3]\nend\nelse\nif normalizedIndices[1] < normalizedIndices[3] then\nmodifier=-normalizedIndices[1]\nelse\nmodifier=-normalizedIndices[3]\nend\nend\nelseif normalizedIndices[1] * normalizedIndices[2] < 0 then\nif normalizedIndices[1] < 0 and normalizedIndices[2] > 0 then\nif -normalizedIndices[1] < normalizedIndices[2] then\nmodifier=-normalizedIndices[1]\nelse\nmodifier=normalizedIndices[2]\nend\nelse\nif normalizedIndices[1] < -normalizedIndices[2] then\nmodifier=-normalizedIndices[1]\nelse\nmodifier=normalizedIndices[2]\nend\nend\nelse\nmodifier=0\nend\nnormalizedIndices=vectorHelpers.addVectors(normalizedIndices,{modifier,-modifier,modifier})\ni=i + 1\nend\nreturn normalizedIndices\nend\nfunction tileExists(map,indices)\nif map.tiles[indices[1]]==nil then\nreturn false\nelseif map.tiles[indices[1]][indices[2]]==nil then\nreturn false\nelseif map.tiles[indices[1]][indices[2]][indices[3]]==nil then\nreturn false\nelse\nreturn true\nend\nend","n7":"function descriptionInterpreter_getActionCardInfos(cardDescription)\nlocal rawActions=getIndexBasedLinesFromInput(cardDescription,\"Action[0-9]:\")\nlocal rawActionButtonProperties=getIndexBasedLinesFromInput(cardDescription,\"Action[0-9]Props:\")\nlocal rawEventHandlers=getIndexBasedLinesFromInput(cardDescription,\"EventHandler[0-9]:\")\nlocal rawCounters=getIndexBasedLinesFromInput(cardDescription,\"Counter[0-9]:\")\nlocal counterTypeTable=getSpecifiedValuesFromInput(cardDescription,\"CounterType:\")\nreturn {rawActions=rawActions,\nrawActionButtonProperties=rawActionButtonProperties,\nrawEventHandlers=rawEventHandlers,\nrawCounters=rawCounters,\ncounterTypeTable=counterTypeTable}\nend\nfunction descriptionInterpreter_isProjectCard(input)\nreturn descriptionInterpreter.isProjectCard(input)\nend\nfunction descriptionInterpreter_hasRequirements(input)\nreturn next(descriptionInterpreter.getKeyValuePairsFromInput(input,\"Reqs:\"))~=nil\nend\nfunction descriptionInterpreter_getValues(params)\nreturn descriptionInterpreter.getValuesFromInput(params.description,params.pattern)\nend\ndescriptionInterpreter={}\ndescriptionInterpreter.getValuesFromInput=function(input,pattern)\nreturn getSpecifiedValuesFromInput(input,pattern)\nend\ndescriptionInterpreter.getKeyValuePairsFromInput=function(input,pattern)\nreturn getKeyValuePairsFromInput(input,pattern)\nend\ndescriptionInterpreter.isProjectCard=function(input)\nif string.match(input,\":Corporation:\") or string.match(input,\":Prelude:\") then\nreturn false\nend\nreturn true\nend\ndescriptionInterpreter.contains=function(input,pattern)\nreturn string.match(input,pattern)\nend\nfunction getKeyValuePairsFromInput(input,pattern)\nlocal rawValues=getSpecifiedValuesFromInput(input,pattern)\nif rawValues==nil then\nreturn {}\nend\nlocal lastNumber=nil\nlocal returnValues={}\nfor i,value in ipairs(rawValues) do\nlocal possibleNumber=tonumber(value)\nif possibleNumber~=nil then\nlastNumber=possibleNumber\nelse\nif lastNumber~=nil then\nreturnValues[value]=lastNumber\nend\nend\nend\nreturn returnValues\nend\nfunction getIndexBasedLinesFromInput(inputString,searchPattern)\nlocal isValue=false\nlocal valueList={}\nlocal lines={}\nlocal index=1\nlocal innerIndex=1\nfor subString in string.gmatch(inputString,\"%S+\") do\nif string.find(subString,\":\")~=nil then\nisValue=false\nend\nif isValue then\nif valueList[index]==nil then\nvalueList[index]={}\nend\nvalueList[index][innerIndex]=subString\ninnerIndex=innerIndex + 1\nend\nif (string.match(subString,searchPattern)) then\nisValue=true\nindex=string.match(subString,\"[0-9]\")\ninnerIndex=1\nend\nend\nreturn valueList\nend\nfunction getSpecifiedValuesFromInput(inputString,searchPattern)\nlocal isValue=false\nlocal valueList={}\nlocal index=1\nfor subString in string.gmatch(inputString,\"%S+\") do\nif string.find(subString,\":\")~=nil then\nisValue=false\nend\nif isValue then\nvalueList[index]=subString\nindex=index + 1\nend\nif (string.match(subString,searchPattern)) then\nisValue=true\nend\nend\nreturn valueList\nend","n8":"snapPointHelpers={}\nsnapPointHelpers.createSingleSnapPoint=function(obj,transform,rotationSnapIn)\nlocal rotationSnap=rotationSnapIn or true\nlocal snapPoints={}\nif obj==nil then\nsnapPoints=Global.getSnapPoints()\nelse\nsnapPoints=obj.getSnapPoints()\nend\nlocal snapPoint={\nposition=transform.pos,\nrotation=transform.rot,\nrotation_snap=rotationSnap\n}\ntable.insert(snapPoints,snapPoint)\nif obj==nil then\nGlobal.setSnapPoints(snapPoints)\nelse\nobj.setSnapPoints(snapPoints)\nend\nend","n9":"buttonFunctions={}\nbuttonFunctions.createButtons=function(parentObject,buttons)\nlocal createFromScratch=parentObject.getButtons()==nil\nlocal buttonAmount=0\nfor i=1,#buttons do\nbuttonFunctions.adaptButtonColor(buttons[i])\nbuttonFunctions.adaptButtonLabel(buttons[i])\nbuttonFunctions.adaptButtonTooltip(buttons[i])\nbuttons[i].index=buttonAmount\nif createFromScratch then\nparentObject.createButton(buttons[i])\nelse\nparentObject.editButton(buttons[i])\nend\nbuttonAmount=buttonAmount + 1\nend\nend\nbuttonFunctions.adaptButtonColor=function(buttonInfo)\nlocal enabledColor=buttonInfo.enabledColorOverride or gameSetupColors.toggleButtonOnColor\nif buttonInfo.onIndex~=nil then\nif tableHelpers.getValueFromString(buttonInfo.onIndex) then\nbuttonInfo.color=enabledColor\nelse\nbuttonInfo.color=gameSetupColors.toggleButtonOffColor\nend\nelseif buttonInfo.onIndices~=nil then\nlocal isEnabled=true\nfor _,value in pairs(buttonInfo.onIndices) do\nisEnabled=isEnabled and tableHelpers.getValueFromString(value)\nend\nif isEnabled then\nbuttonInfo.color=enabledColor\nelse\nbuttonInfo.color=gameSetupColors.toggleButtonOffColor\nend\nelseif buttonInfo.onIndicesOr~=nil then\nlocal isEnabled=false\nfor _,value in pairs(buttonInfo.onIndicesOr) do\nisEnabled=isEnabled or tableHelpers.getValueFromString(value)\nend\nif isEnabled then\nbuttonInfo.color=enabledColor\nelse\nbuttonInfo.color=gameSetupColors.toggleButtonOffColor\nend\nelseif buttonInfo.onIndexInversed~=nil then\nif not gameConfig.setup[buttonInfo.onIndexInversed] and not tableHelpers.getValueFromString(buttonInfo.onIndex) then\nbuttonInfo.color=enabledColor\nelse\nbuttonInfo.color=gameSetupColors.toggleButtonOffColor\nend\nend\nend\nbuttonFunctions.adaptButtonLabel=function(buttonInfo)\nif buttonInfo.dynamicLabel==nil then\nreturn\nend\nlocal value=0\nif type(buttonInfo.dynamicLabel.value)==\"table\" then\nfor _,entry in pairs(buttonInfo.dynamicLabel.value) do\nvalue=tableHelpers.getValueFromString(entry)\nif value~=nil then break end\nend\nelse\nvalue=tableHelpers.getValueFromString(buttonInfo.dynamicLabel.value)\nend\nlocal newLabel=\"\"\nlocal prefix=buttonInfo.dynamicLabel.prefix or buttonInfo.dynamicLabel.base or \"\"\nlocal suffix=buttonInfo.dynamicLabel.suffix or \"\"\nif buttonInfo.dynamicLabel.format~=nil then\nnewLabel=prefix..string.format(buttonInfo.dynamicLabel.format,value)..suffix\nelse\nnewLabel=prefix..value..suffix\nend\nbuttonInfo.label=newLabel\nend\nbuttonFunctions.adaptButtonTooltip=function(buttonInfo)\nif buttonInfo.dynamicTooltip==nil then\nreturn\nend\nlocal value=tableHelpers.getValueFromString(buttonInfo.dynamicTooltip.value)\nlocal newTooltip=\"\"\nlocal prefix=buttonInfo.dynamicTooltip.prefix or buttonInfo.dynamicTooltip.base or \"\"\nlocal suffix=buttonInfo.dynamicTooltip.suffix or \"\"\nif buttonInfo.dynamicTooltip.format~=nil then\nnewTooltip=prefix..string.format(buttonInfo.dynamicTooltip.format,value)..suffix\nelse\nnewTooltip=prefix..value..suffix\nend\nbuttonInfo.tooltip=newTooltip\nend","n10":"colors={}\ngameSetupColors={\ntoggleButtonOnColor={255/255,150/255,0,1},\ntoggleButtonOffColor={100/255,100/255,100/255,1}\n}\ncolors.buttons={\ntoggleButtonOn={255/255,150/255,0,1},\ntoggleButtonOff={100/255,100/255,100/255,1},\ntoggleButtonSignal={255/255,0/255,155/255,1}\n}\ncolors.gameSetupColors={\ntoggleButtonOnColor={255/255,150/255,0,1},\ntoggleButtonOffColor={100/255,100/255,100/255,1},\nclickButtonColor={200/255,200/255,200/255,1}\n}\ncolors.tableauColors={\ntagCounterColor={180/255,180/255,180/255,0.95},\ncreditsCounterColor={253/255,231/255,46/255,0.95},\nsteelCounterColor={168/255,120/255,74/255,0.95},\ntitaniumCounterColor={67/255,67/255,67/255,0.95},\nheatColor={236/255,96/255,51/255,0.95},\ntextColor={0,0,0,1}\n}\ncolors.resourceToColorMap={\nCredits=colors.tableauColors.creditsCounterColor,\nSteel=colors.tableauColors.steelCounterColor,\nTitanium=colors.tableauColors.titaniumCounterColor,\nHeat=colors.tableauColors.heatColor,\n}\ncolors.messageColors={\nimportantInfo={1,0.85,0.85,1}\n}\ncolors.gameActionButtons={\nstandardProject={0.5,0.5,0.5,0.75},\nplantsToGreenery={0,0.8,0,0.75},\nheatToTemp={0.8,0,0,0.75},\n}","n11":"marsSenate={}\nmarsSenate.parties={\nmarsFirst=\"MarsFirst\",\nscientists=\"Scientists\",\nunity=\"Unity\",\ngreens=\"Greens\",\nreds=\"Reds\",\nkelvinists=\"Kelvinists\"\n}\nmarsSenate.partiesById={\n\"MarsFirst\",\n\"Scientists\",\n\"Unity\",\n\"Greens\",\n\"Reds\",\n\"Kelvinists\"\n}","n12":"ownableObjects={}\nownableObjects.specialTileMappings={}\nownableObjects.specialTileMappings.aliases={\nredCity={\"cityTile\",\"specialTile\"},\nnewVenice={\"cityTile\",\"specialTile\"},\ncapitalCity={\"cityTile\",\"specialTile\"},\nwetlands={\"greenery\",\"specialTile\"},\ncommercialDistrict={\"specialTile\"}\n}\nownableObjects.baseGame={}\nownableObjects.baseGame.tiles={\ngreenery=\"greenery\",\ncity=\"cityTile\",\ncityTile=\"cityTile\",\ncapitalCity=\"capitalCity\",\nmine=\"mine\",\npreservationArea=\"preservationArea\",\nmohole=\"mohole\",\nvolcano=\"volcano\",\nrestrictedArea=\"restrictedArea\",\ncommercialDistrict=\"commercialDistrict\",\nspacePort=\"spacePort\",\nganymedColony=\"ganymedColony\",\nindustrialZone=\"industrialZone\",\nnuclearZone=\"nuclearZone\",\nnaturalPreserve=\"naturalPreserve\",\nspecialTile=\"specialTile\",\nspaceCityTile=\"spaceCityTile\",\n}\nownableObjects.baseGame.cardResources={\nanimal=\"animal\",\nmicrobe=\"microbe\",\nscience=\"science\",\nfighter=\"fighter\",\n}\nownableObjects.baseGame.friendlyNameMapping={\ngreenery={\"Greenery\"},\ncityTile={\"CityTile\",\"cityTile\"},\nspecialTile={\"specialTile\"}\n}\nownableObjects.venus={}\nownableObjects.venus.tiles={\nmaxwellBase=\"maxwellBase\",\nstratopolis=\"stratopolis\",\nlunaMetropolis=\"lunaMetropolis\",\ndawnCity=\"dawnCity\",\n}\nownableObjects.venus.cardResources={\nasteroid=\"asteroid\",\nfloater=\"floater\",\n}\nownableObjects.venus.friendlyNameMapping={\nasteroid={\"Asteroid\"},\nfloater={\"Floater\"}\n}\nownableObjects.colonies={}\nownableObjects.colonies.objects={\ncolony=\"colony\",\n}\nownableObjects.colonies.cardResources={\nrefugee=\"refugee\",\n}\nownableObjects.colonies.friendlyNameMapping={\ncolony={\"Colony\",\"Colonies\"},\n}\nownableObjects.turmoil={}\nownableObjects.turmoil.tiles={\nstanfordTorus=\"stanfordTorus\",\n}\nownableObjects.turmoil.friendlyNameMapping={}\nownableObjects.pathfinder={}\nownableObjects.pathfinder.tiles={\nredCity=\"redCity\",\nnewVenice=\"newVenice\",\ncrashSite=\"crashSite\",\nwetlands=\"wetlands\"\n}\nownableObjects.pathfinder.cardResources={\nhabitat=\"habitat\",\nrobot=\"robot\",\ndata=\"data\",\n}\nownableObjects.highOrbit={}\nownableObjects.highOrbit.cardResources={\nore=\"ore\",\n}\nownableObjects.venusPhaseTwo={}\nownableObjects.venusPhaseTwo.tiles={\nfloatingArray=\"floatingArray\",\ngasMine=\"gasMine\",\nvenusHabitat=\"venusHabitat\",\n}\nownableObjects.pathfinder.friendlyNameMapping={}\nfunction createOwnableObjectsCollection()\nlocal collection={}\nfor _,expansion in pairs(ownableObjects) do\nfor _,objectType in pairs(expansion) do\nif objectType~=\"friendlyNameMapping\" then\nfor key,value in pairs(objectType) do\ncollection[key]=0\nend\nend\nend\nend\nreturn collection\nend","n13":"resources={}\nresources.baseGame={\n\"credits\",\n\"steel\",\n\"titanium\",\n\"plants\",\n\"energy\",\n\"heat\"\n}","n14":"icons={}\nicons.baseIconNames={\n\"Building\",\n\"Space\",\n\"Power\",\n\"Science\",\n\"Jovian\",\n\"Earth\",\n\"Venus\",\n\"Plant\",\n\"Microbe\",\n\"Animal\",\n\"City\",\n}\nicons.specialIconNames={\n\"WildCard\",\n\"None\",\n\"Event\"\n}\nicons.anyTagNames={\n\"All\"\n}\nicons.pathfinder={\n\"Mars\",\n}\nicons.highOrbit={\n\"Infrastructure\",\n}","n15":"eventData={}\neventData.triggerType={\ncityPlayed=\"cityPlayed\",\nspaceCityPlayed=\"spaceCityPlayed\",\nmarsCityPlayed=\"marsCityPlayed\",\ngreeneryPlayed=\"greeneryPlayed\",\noceanPlayed=\"oceanPlayed\",\ncolonyPlayed=\"colonyPlayed\",\nproductionChanged=\"productionChanged\",\nvenusTerraformed=\"venusTerraformed\",\noxygenIncreased=\"oxygenIncreased\",\nbuildingTagPlayed=\"buildingTagPlayed\",\nspaceTagPlayed=\"spaceTagPlayed\",\npowerTagPlayed=\"powerTagPlayed\",\nscienceTagPlayed=\"scienceTagPlayed\",\njovianTagPlayed=\"jovianTagPlayed\",\nearthTagPlayed=\"earthTagPlayed\",\nvenusTagPlayed=\"venusTagPlayed\",\nplantTagPlayed=\"plantTagPlayed\",\nmicrobeTagPlayed=\"microbeTagPlayed\",\nanimalTagPlayed=\"animalTagPlayed\",\nnoneTagPlayed=\"noneTagPlayed\",\neventTagPlayed=\"eventTagPlayed\",\nmarsTagPlayed=\"marsTagPlayed\",\ninfrastructureTagPlayed=\"infrastructureTagPlayed\",\nvpCardPlayed=\"vpCardPlayed\",\nanimalResourceGained=\"animalResourceGained\",\nmicrobeResourceGained=\"microbeResourceGained\",\nfloaterResourceGained=\"floaterResourceGained\",\nscienceResourceGained=\"scienceResourceGained\",\nfighterResourceGained=\"fighterResourceGained\",\ndataResourceGained=\"dataResourceGained\",\nasteroidResourceGained=\"asteroidResourceGained\",\npayTwentyCostCard=\"payTwentyCostCard\",\nstandardProjectCity=\"standardProjectCity\",\nstandardProjectGreenery=\"standardProjectGreenery\",\nstandardProjectOcean=\"standardProjectOcean\",\nstandardProjectTemperature=\"standardProjectTemperature\",\nstandardProjectPowerPlant=\"standardProjectPowerPlant\",\nstandardProjectVenus=\"standardProjectVenus\",\nstandardProjectColony=\"standardProjectColony\",\nbuyStandardProject=\"buyStandardProject\",\ncardWithRequirmentPlayed=\"cardWithRequirmentPlayed\",\nspecialTilePlayed=\"specialTilePlayed\",\nincreasePathfinderVenus=\"increasePathfinderVenus\",\nincreasePathfinderEarth=\"increasePathfinderEarth\",\nincreasePathfinderMars=\"increasePathfinderMars\",\nincreasePathfinderJovian=\"increasePathfinderJovian\",\nterraformingGained=\"terraformingGained\",\nmarsTilePlaced=\"marsTilePlaced\",\nvenusTilePlaced=\"venusTilePlaced\",\nturmoilFactionChanged=\"turmoilFactionChanged\",\nspecialTilePlayed=\"specialTilePlayed\",\nproductionPhase=\"productionPhase\",\nnewGeneration=\"newGeneration\",\ncardPlayed=\"cardPlayed\",\nturmoilNewGovernment=\"turmoilNewGovernment\",\nactionPerformed=\"actionPerformed\",\nplayerPerformedAction=\"playerPerformedAction\",\npayedForCard=\"payedForCard\",\nconversionRatesUpdated=\"conversionRatesUpdated\",\nplayerTurnBegan=\"playerTurnBegan\",\nplanetWildCardTokenAbsorbed=\"planetWildCardTokenAbsorbed\",\ncolonyTraded=\"colonyTraded\",\nbuyVenusStandardProject=\"buyVenusStandardProject\",\nvenusHabitatPlaced=\"venusHabitatPlaced\",\nstorageChanged=\"storageChanged\",\noceanRemoved=\"oceanRemoved\",\nplayerTurnEnd=\"playerTurnEnd\",\n}\neventData.triggerScope={\nanyPlayer=\"anyPlayer\",\nplayerThemself=\"playerThemself\",\notherPlayers=\"otherPlayers\",\nnoPlayer=\"noPlayer\",\n}\neventData.allowedPhasesToTrigger={\nsolarPhase=\"solarPhase\",\ngameEnd=\"gameEnd\",\ndraft=\"draft\",\ninRound=\"inRound\",\n}","n16":"mapping={}\nfunction mapping:new(ownableObjectName,triggerTypeName)\nlocal obj={}\nobj.ownableObjectName=ownableObjectName\nobj.triggerTypeName=triggerTypeName\nreturn obj\nend\ntagMapping={}\nfunction tagMapping:new(value,mappedValue)\nlocal obj={}\nobj.value=value\nobj.mappedValue=mappedValue\nreturn obj\nend\neventDataMappings={}\neventDataMappings.ownableObjectsToTriggerTypeMap={\nmapping:new(\"greenery\",eventData.triggerType.greeneryPlayed),\nmapping:new(\"specialTile\",eventData.triggerType.specialTilePlayed),\nmapping:new(\"redCity\",eventData.triggerType.specialTilePlayed),\nmapping:new(\"capitalCity\",eventData.triggerType.specialTilePlayed),\nmapping:new(\"commercialDistrict\",eventData.triggerType.specialTilePlayed),\nmapping:new(\"newVenice\",eventData.triggerType.specialTilePlayed),\nmapping:new(\"wetlands\",eventData.triggerType.specialTilePlayed),\nmapping:new(\"animal\",eventData.triggerType.animalResourceGained),\nmapping:new(\"microbe\",eventData.triggerType.microbeResourceGained),\nmapping:new(\"floater\",eventData.triggerType.floaterResourceGained),\nmapping:new(\"science\",eventData.triggerType.scienceResourceGained),\nmapping:new(\"figther\",eventData.triggerType.fighterResourceGained),\nmapping:new(\"data\",eventData.triggerType.dataResourceGained),\nmapping:new(\"asteroid\",eventData.triggerType.asteroidResourceGained),\n}\neventDataMappings.tagToTriggerTypeMap={\ntagMapping:new(\"Building\",eventData.triggerType.buildingTagPlayed),\ntagMapping:new(\"Space\",eventData.triggerType.spaceTagPlayed),\ntagMapping:new(\"Power\",eventData.triggerType.powerTagPlayed),\ntagMapping:new(\"Science\",eventData.triggerType.scienceTagPlayed),\ntagMapping:new(\"Jovian\",eventData.triggerType.jovianTagPlayed),\ntagMapping:new(\"Earth\",eventData.triggerType.earthTagPlayed),\ntagMapping:new(\"Venus\",eventData.triggerType.venusTagPlayed),\ntagMapping:new(\"Plant\",eventData.triggerType.plantTagPlayed),\ntagMapping:new(\"Microbe\",eventData.triggerType.microbeTagPlayed),\ntagMapping:new(\"Animal\",eventData.triggerType.animalTagPlayed),\ntagMapping:new(\"None\",eventData.triggerType.noneTagPlayed),\ntagMapping:new(\"Event\",eventData.triggerType.eventTagPlayed),\ntagMapping:new(\"Mars\",eventData.triggerType.marsTagPlayed),\ntagMapping:new(\"Infrastructure\",eventData.triggerType.infrastructureTagPlayed),\n}","n17":"phases={\ngenerationPhase=\"generationPhase\",\nsolarPhase=\"solarPhase\",\ngameEndPhase=\"gameEndPhase\",\ndraftingPhase=\"draftingPhase\",\ngameStartPhase=\"gameStartPhase\",\ngameSetupPhase=\"gameSetupPhase\",\n}","n18":"mapFeatures={}\nmapFeatures.tileType=\n{\nvolcano=\"volcano\",\nocean=\"ocean\",\noceanOptional=\"ocean\",\nnocticsCity=\"nocticsCity\",\nmaxwellBase=\"maxwellBase\",\nstratopolis=\"stratopolis\",\ngas=\"gas\",\n}\nmapFeatures.tileFeature={}\nmapFeatures.tileFeature.baseGame={\ncity=\"city\",\ngreenery=\"greenery\",\nocean=\"ocean\",\ncommercialDistrict=\"commercialDistrict\",\ncapital=\"capital\",\nspecialTile=\"specialTile\",\n}\nmapFeatures.tileFeature.pathfinder={\nwetlands=\"wetlands\",\nnewVenice=\"newVenice\",\nredCity=\"redCity\",\ncrashSite=\"crashSite\",\n}","n19":"mapSizes={\ntiny=37,\nsmall=49,\nnormal=61,\nbig=73,\nlarge=91,\nhuge=127,\ngigantic=159\n}\nfunction printMapSizes(prefix,suffix)\nlocal stringBuilder=\"\"\nfor sizeName,numberOfTiles in pairs(mapSizes) do\nstringBuilder=prefix..stringBuilder..sizeName:gsub(\"^%l\",string.upper)..numberOfTiles..suffix\nend\nreturn stringBuilder\nend","n20":"tile={}\nfunction tile:new(coords,features,placementProperties)\nlocal obj={}\nobj.coords=coords\nobj.features=features\nobj.placementProperties=placementProperties\nreturn obj\nend\npredefinedMaps={}\npredefinedMaps.baseMap={}\npredefinedMaps.baseMap.metadata={offset={-5,1.4,8.6},hexDistance=2.475,imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1651097841909243604/A21040391F43461161B277122EA1293A532E4A1E/\",scale={6.02,1,6.02}}\npredefinedMaps.baseMap.tiles={\ntile:new({0,0,0},{},{resourceValues={Steel=2}}),\ntile:new({1,0,0},{mapFeatures.tileType.ocean},{resourceValues={Steel=2}}),\ntile:new({2,0,0},{},{}),\ntile:new({3,0,0},{mapFeatures.tileType.ocean},{effects={\"DrawCard\"}}),\ntile:new({4,0,0},{mapFeatures.tileType.ocean},{}),\ntile:new({0,0,1},{},{}),\ntile:new({0,1,0},{mapFeatures.tileType.volcano},{resourceValues={Steel=1}}),\ntile:new({1,1,0},{},{}),\ntile:new({2,1,0},{},{}),\ntile:new({3,1,0},{},{}),\ntile:new({4,1,0},{mapFeatures.tileType.ocean},{effects={\"DrawCard\",\"DrawCard\"}}),\ntile:new({0,0,2},{mapFeatures.tileType.volcano},{effects={\"DrawCard\"}}),\ntile:new({0,1,1},{},{}),\ntile:new({0,2,0},{},{}),\ntile:new({1,2,0},{},{}),\ntile:new({2,2,0},{},{}),\ntile:new({3,2,0},{},{}),\ntile:new({4,2,0},{},{resourceValues={Steel=1}}),\ntile:new({0,0,3},{mapFeatures.tileType.volcano},{resourceValues={Titanium=1,Plants=1}}),\ntile:new({0,1,2},{},{resourceValues={Plants=1}}),\ntile:new({0,2,1},{},{resourceValues={Plants=1}}),\ntile:new({0,3,0},{},{resourceValues={Plants=1}}),\ntile:new({1,3,0},{},{resourceValues={Plants=2}}),\ntile:new({2,3,0},{},{resourceValues={Plants=1}}),\ntile:new({3,3,0},{},{resourceValues={Plants=1}}),\ntile:new({4,3,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({0,0,4},{mapFeatures.tileType.volcano},{resourceValues={Plants=2}}),\ntile:new({0,1,3},{},{resourceValues={Plants=2}}),\ntile:new({0,2,2},{mapFeatures.tileType.nocticsCity},{resourceValues={Plants=2}}),\ntile:new({0,3,1},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({0,4,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({1,4,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({2,4,0},{},{resourceValues={Plants=2}}),\ntile:new({3,4,0},{},{resourceValues={Plants=2}}),\ntile:new({4,4,0},{},{resourceValues={Plants=2}}),\ntile:new({0,1,4},{},{resourceValues={Plants=1}}),\ntile:new({0,2,3},{},{resourceValues={Plants=2}}),\ntile:new({0,3,2},{},{resourceValues={Plants=1}}),\ntile:new({0,4,1},{},{resourceValues={Plants=1}}),\ntile:new({0,5,0},{},{resourceValues={Plants=1}}),\ntile:new({1,5,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=1}}),\ntile:new({2,5,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=1}}),\ntile:new({3,5,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=1}}),\ntile:new({0,2,4},{},{}),\ntile:new({0,3,3},{},{}),\ntile:new({0,4,2},{},{}),\ntile:new({0,5,1},{},{}),\ntile:new({0,6,0},{},{}),\ntile:new({1,6,0},{},{resourceValues={Plants=1}}),\ntile:new({2,6,0},{},{}),\ntile:new({0,3,4},{},{resourceValues={Steel=2}}),\ntile:new({0,4,3},{},{}),\ntile:new({0,5,2},{},{effects={\"DrawCard\"}}),\ntile:new({0,6,1},{},{effects={\"DrawCard\"}}),\ntile:new({0,7,0},{},{}),\ntile:new({1,7,0},{},{resourceValues={Titanium=1}}),\ntile:new({0,4,4},{},{resourceValues={Steel=1}}),\ntile:new({0,5,3},{},{resourceValues={Steel=2}}),\ntile:new({0,6,2},{},{}),\ntile:new({0,7,1},{},{}),\ntile:new({0,8,0},{mapFeatures.tileType.ocean},{resourceValues={Titanium=2}}),\n}\npredefinedMaps.hellas={}\npredefinedMaps.hellas.metadata={offset={-5,1.4,8.6},hexDistance=2.475,imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1750191431521699022/FB6D0E691C3F0D62012BEAD76E6ECB0F9751E1E3/\",scale={6.02,1,6.02}}\npredefinedMaps.hellas.tiles={\ntile:new({0,0,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({1,0,0},{},{resourceValues={Plants=2}}),\ntile:new({2,0,0},{},{resourceValues={Plants=2}}),\ntile:new({3,0,0},{},{resourceValues={Plants=1,Steel=1}}),\ntile:new({4,0,0},{},{resourceValues={Plants=1}}),\ntile:new({0,0,1},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({0,1,0},{},{resourceValues={Plants=2}}),\ntile:new({1,1,0},{},{resourceValues={Plants=1}}),\ntile:new({2,1,0},{},{resourceValues={Plants=1,Steel=1}}),\ntile:new({3,1,0},{},{resourceValues={Plants=1}}),\ntile:new({4,1,0},{},{resourceValues={Plants=1}}),\ntile:new({0,0,2},{mapFeatures.tileType.ocean},{resourceValues={Plants=1}}),\ntile:new({0,1,1},{},{resourceValues={Plants=1}}),\ntile:new({0,2,0},{},{resourceValues={Steel=1}}),\ntile:new({1,2,0},{},{resourceValues={Steel=1}}),\ntile:new({2,2,0},{},{}),\ntile:new({3,2,0},{},{resourceValues={Plants=2}}),\ntile:new({4,2,0},{},{resourceValues={Plants=1},effects={\"DrawCard\"}}),\ntile:new({0,0,3},{mapFeatures.tileType.ocean},{resourceValues={Plants=1}}),\ntile:new({0,1,2},{},{resourceValues={Plants=1}}),\ntile:new({0,2,1},{},{resourceValues={Steel=1}}),\ntile:new({0,3,0},{},{resourceValues={Steel=2}}),\ntile:new({1,3,0},{},{resourceValues={Steel=1}}),\ntile:new({2,3,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=1}}),\ntile:new({3,3,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=1}}),\ntile:new({4,3,0},{},{resourceValues={Plants=1}}),\ntile:new({0,0,4},{},{effects={\"DrawCard\"}}),\ntile:new({0,1,3},{},{}),\ntile:new({0,2,2},{},{}),\ntile:new({0,3,1},{},{resourceValues={Steel=2}}),\ntile:new({0,4,0},{},{}),\ntile:new({1,4,0},{mapFeatures.tileType.ocean},{effects={\"DrawCard\"}}),\ntile:new({2,4,0},{mapFeatures.tileType.ocean},{resourceValues={Heat=3}}),\ntile:new({3,4,0},{mapFeatures.tileType.ocean},{}),\ntile:new({4,4,0},{},{resourceValues={Plants=1}}),\ntile:new({0,1,4},{},{resourceValues={Titanium=1}}),\ntile:new({0,2,3},{},{}),\ntile:new({0,3,2},{},{resourceValues={Steel=1}}),\ntile:new({0,4,1},{},{}),\ntile:new({0,5,0},{},{}),\ntile:new({1,5,0},{mapFeatures.tileType.ocean},{}),\ntile:new({2,5,0},{mapFeatures.tileType.ocean},{resourceValues={Steel=1}}),\ntile:new({3,5,0},{},{}),\ntile:new({0,2,4},{mapFeatures.tileType.ocean},{resourceValues={Titanium=2}}),\ntile:new({0,3,3},{},{}),\ntile:new({0,4,2},{},{}),\ntile:new({0,5,1},{},{effects={\"DrawCard\"}}),\ntile:new({0,6,0},{},{}),\ntile:new({1,6,0},{},{}),\ntile:new({2,6,0},{},{resourceValues={Titanium=1}}),\ntile:new({0,3,4},{},{resourceValues={Steel=1}}),\ntile:new({0,4,3},{},{effects={\"DrawCard\"}}),\ntile:new({0,5,2},{},{resourceValues={Heat=2}}),\ntile:new({0,6,1},{},{resourceValues={Heat=2}}),\ntile:new({0,7,0},{},{resourceValues={Titanium=1}}),\ntile:new({1,7,0},{},{resourceValues={Titanium=1}}),\ntile:new({0,4,4},{},{}),\ntile:new({0,5,3},{},{resourceValues={Heat=2}}),\ntile:new({0,6,2},{},{resourceValues={Credits=-6},effects={\"Ocean\"}}),\ntile:new({0,7,1},{},{resourceValues={Heat=2}}),\ntile:new({0,8,0},{},{}),\n}\npredefinedMaps.elysium={}\npredefinedMaps.elysium.metadata={offset={-5,1.4,8.6},hexDistance=2.475,imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1750191431521690431/6DAAF654B42B1D2043031D73337389063CA41F0F/\",scale={6.02,1,6.02}}\npredefinedMaps.elysium.tiles={\ntile:new({0,0,0},{mapFeatures.tileType.ocean},{}),\ntile:new({1,0,0},{mapFeatures.tileType.ocean},{resourceValues={Titanium=1}}),\ntile:new({2,0,0},{mapFeatures.tileType.ocean},{effects={\"DrawCard\"}}),\ntile:new({3,0,0},{mapFeatures.tileType.ocean},{resourceValues={Steel=1}}),\ntile:new({4,0,0},{},{effects={\"DrawCard\"}}),\ntile:new({0,0,1},{mapFeatures.tileType.volcano},{resourceValues={Titanium=1}}),\ntile:new({0,1,0},{},{}),\ntile:new({1,1,0},{},{}),\ntile:new({2,1,0},{mapFeatures.tileType.ocean},{}),\ntile:new({3,1,0},{mapFeatures.tileType.ocean},{}),\ntile:new({4,1,0},{},{resourceValues={Steel=2}}),\ntile:new({0,0,2},{mapFeatures.tileType.volcano},{resourceValues={Titanium=2}}),\ntile:new({0,1,1},{},{}),\ntile:new({0,2,0},{},{effects={\"DrawCard\"}}),\ntile:new({1,2,0},{},{}),\ntile:new({2,2,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=1}}),\ntile:new({3,2,0},{mapFeatures.tileType.ocean},{}),\ntile:new({4,2,0},{mapFeatures.tileType.volcano},{effects={\"DrawCard\",\"DrawCard\",\"DrawCard\"}}),\ntile:new({0,0,3},{},{resourceValues={Plants=1}}),\ntile:new({0,1,2},{},{resourceValues={Plants=1}}),\ntile:new({0,2,1},{},{resourceValues={Plants=1}}),\ntile:new({0,3,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({1,3,0},{},{resourceValues={Plants=1}}),\ntile:new({2,3,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=1}}),\ntile:new({3,3,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=1}}),\ntile:new({4,3,0},{},{resourceValues={Steel=1,Plants=1}}),\ntile:new({0,0,4},{},{resourceValues={Plants=2}}),\ntile:new({0,1,3},{},{resourceValues={Plants=2}}),\ntile:new({0,2,2},{},{resourceValues={Plants=2}}),\ntile:new({0,3,1},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({0,4,0},{},{resourceValues={Plants=2}}),\ntile:new({1,4,0},{},{resourceValues={Plants=3}}),\ntile:new({2,4,0},{},{resourceValues={Plants=2}}),\ntile:new({3,4,0},{},{resourceValues={Plants=2}}),\ntile:new({4,4,0},{mapFeatures.tileType.volcano},{resourceValues={Plants=1,Titanium=1}}),\ntile:new({0,1,4},{},{resourceValues={Steel=1}}),\ntile:new({0,2,3},{},{resourceValues={Plants=1}}),\ntile:new({0,3,2},{},{resourceValues={Plants=1}}),\ntile:new({0,4,1},{},{resourceValues={Plants=1}}),\ntile:new({0,5,0},{},{resourceValues={Plants=1}}),\ntile:new({1,5,0},{},{resourceValues={Plants=1}}),\ntile:new({2,5,0},{},{resourceValues={Plants=1}}),\ntile:new({3,5,0},{},{}),\ntile:new({0,2,4},{},{resourceValues={Titanium=1}}),\ntile:new({0,3,3},{},{resourceValues={Steel=1}}),\ntile:new({0,4,2},{},{}),\ntile:new({0,5,1},{},{}),\ntile:new({0,6,0},{},{resourceValues={Steel=1}}),\ntile:new({1,6,0},{},{}),\ntile:new({2,6,0},{},{}),\ntile:new({0,3,4},{},{resourceValues={Steel=2}}),\ntile:new({0,4,3},{},{}),\ntile:new({0,5,2},{},{}),\ntile:new({0,6,1},{},{}),\ntile:new({0,7,0},{},{resourceValues={Steel=2}}),\ntile:new({1,7,0},{},{}),\ntile:new({0,4,4},{},{resourceValues={Steel=1}}),\ntile:new({0,5,3},{},{}),\ntile:new({0,6,2},{},{effects={\"DrawCard\"}}),\ntile:new({0,7,1},{},{effects={\"DrawCard\"}}),\ntile:new({0,8,0},{},{resourceValues={Steel=2}}),\n}\npredefinedMaps.arabiaTerra={}\npredefinedMaps.arabiaTerra.metadata={offset={-5,1.4,8.6},hexDistance=2.475,imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1750191431521673411/5CFB2AC225720C89AA343E070F5626684F1B093F/\",scale={6.02,1,6.02}}\npredefinedMaps.arabiaTerra.tiles={\ntile:new({0,0,0},{mapFeatures.tileType.ocean},{}),\ntile:new({1,0,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=1}}),\ntile:new({2,0,0},{},{}),\ntile:new({3,0,0},{},{}),\ntile:new({4,0,0},{mapFeatures.tileType.ocean},{effects={\"DrawCard\",\"DrawCard\"}}),\ntile:new({0,0,1},{mapFeatures.tileType.ocean},{effects={\"Microbe\",\"Microbe\",\"DrawCard\"}}),\ntile:new({0,1,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=1}}),\ntile:new({1,1,0},{},{resourceValues={Plants=2}}),\ntile:new({2,1,0},{},{}),\ntile:new({3,1,0},{},{resourceValues={Plants=1}}),\ntile:new({4,1,0},{},{resourceValues={Plants=1}}),\ntile:new({0,0,2},{},{resourceValues={Plants=1,Steel=1}}),\ntile:new({0,1,1},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({0,2,0},{},{effects={\"DrawCard\",\"Data\",\"Data\"}}),\ntile:new({1,2,0},{},{resourceValues={Steel=1}}),\ntile:new({2,2,0},{},{resourceValues={Steel=1}}),\ntile:new({3,2,0},{},{resourceValues={Steel=1,Plants=1}}),\ntile:new({4,2,0},{mapFeatures.tileType.oceanOptional,mapFeatures.tileType.volcano},{resourceValues={Steel=1,Titanium=1}}),\ntile:new({0,0,3},{},{resourceValues={Plants=2}}),\ntile:new({0,1,2},{},{resourceValues={Plants=1}}),\ntile:new({0,2,1},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({0,3,0},{},{}),\ntile:new({1,3,0},{},{}),\ntile:new({2,3,0},{},{}),\ntile:new({3,3,0},{},{resourceValues={Steel=2}}),\ntile:new({4,3,0},{},{}),\ntile:new({0,0,4},{},{}),\ntile:new({0,1,3},{},{}),\ntile:new({0,2,2},{mapFeatures.tileType.ocean},{resourceValues={Steel=1}}),\ntile:new({0,3,1},{mapFeatures.tileType.oceanOptional},{productionValues={Energy=1}}),\ntile:new({0,4,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({1,4,0},{},{resourceValues={Steel=1},effects={\"Science\",\"DrawCard\"}}),\ntile:new({2,4,0},{},{}),\ntile:new({3,4,0},{},{}),\ntile:new({4,4,0},{},{}),\ntile:new({0,1,4},{},{resourceValues={Plants=1}}),\ntile:new({0,2,3},{},{resourceValues={Plants=1}}),\ntile:new({0,3,2},{mapFeatures.tileType.ocean},{resourceValues={Steel=2}}),\ntile:new({0,4,1},{},{resourceValues={Plants=1}}),\ntile:new({0,5,0},{},{resourceValues={Steel=1}}),\ntile:new({1,5,0},{},{}),\ntile:new({2,5,0},{mapFeatures.tileType.oceanOptional},{resourceValues={Plants=1,Titanium=1}}),\ntile:new({3,5,0},{},{resourceValues={Plants=1}}),\ntile:new({0,2,4},{mapFeatures.tileType.oceanOptional},{resourceValues={Titanium=1,Plants=1}}),\ntile:new({0,3,3},{mapFeatures.tileType.oceanOptional},{resourceValues={Plants=2}}),\ntile:new({0,4,2},{mapFeatures.tileType.oceanOptional},{resourceValues={Plants=2}}),\ntile:new({0,5,1},{},{resourceValues={Plants=1}}),\ntile:new({0,6,0},{},{resourceValues={Steel=1}}),\ntile:new({1,6,0},{},{resourceValues={Titanium=1,Plants=1}}),\ntile:new({2,6,0},{},{resourceValues={Titanium=2}}),\ntile:new({0,3,4},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({0,4,3},{},{resourceValues={Plants=1}}),\ntile:new({0,5,2},{mapFeatures.tileType.volcano},{resourceValues={Steel=1},effects={\"DrawCard\"}}),\ntile:new({0,6,1},{},{resourceValues={Steel=2}}),\ntile:new({0,7,0},{},{resourceValues={Steel=1}}),\ntile:new({1,7,0},{mapFeatures.tileType.volcano},{effects={\"DrawCard\"}}),\ntile:new({0,4,4},{},{}),\ntile:new({0,5,3},{},{}),\ntile:new({0,6,2},{},{}),\ntile:new({0,7,1},{},{}),\ntile:new({0,8,0},{mapFeatures.tileType.volcano},{resourceValues={Steel=1}}),\n}\npredefinedMaps.arcadiaPlanitia={}\npredefinedMaps.arcadiaPlanitia.metadata={\noffset={-5.96,1.4,10.3},\nhexDistance=2.385,\nimageUrl=\"http://cloud-3.steamusercontent.com/ugc/1750191431521834562/70F4A02D0CB53A40C73DA3ACB499ED5E94F05104/\",\nscale={7.05,1,7.1},\nglobalParameterDefaultMappings={temperature={mappingIndex=5}},\nsize=91\n}\npredefinedMaps.arcadiaPlanitia.tiles={\ntile:new({0,0,0},{},{}),\ntile:new({1,0,0},{},{resourceValues={Heat=1}}),\ntile:new({2,0,0},{},{resourceValues={Heat=2}}),\ntile:new({3,0,0},{},{resourceValues={Heat=2}}),\ntile:new({4,0,0},{},{resourceValues={Heat=1}}),\ntile:new({5,0,0},{},{}),\ntile:new({0,0,1},{},{resourceValues={Steel=1}}),\ntile:new({0,1,0},{},{}),\ntile:new({1,1,0},{},{effects={\"DrawCard\",\"DrawCard\",\"DrawCard\"}}),\ntile:new({2,1,0},{},{}),\ntile:new({3,1,0},{},{}),\ntile:new({4,1,0},{},{}),\ntile:new({5,1,0},{},{}),\ntile:new({0,0,2},{},{resourceValues={Steel=1,Plants=1}}),\ntile:new({0,1,1},{mapFeatures.tileType.ocean},{effects={\"Microbe\"}}),\ntile:new({0,2,0},{},{resourceValues={Plants=1}}),\ntile:new({1,2,0},{},{resourceValues={Plants=1}}),\ntile:new({2,2,0},{},{}),\ntile:new({3,2,0},{},{resourceValues={Plants=1}}),\ntile:new({4,2,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({5,2,0},{mapFeatures.tileType.ocean},{effects={\"Microbe\",\"Microbe\"}}),\ntile:new({0,0,3},{},{resourceValues={Plants=1}}),\ntile:new({0,1,2},{},{resourceValues={Plants=3}}),\ntile:new({0,2,1},{mapFeatures.tileType.ocean},{effects={\"DrawCard\"}}),\ntile:new({0,3,0},{},{resourceValues={Plants=2}}),\ntile:new({1,3,0},{},{}),\ntile:new({2,3,0},{mapFeatures.tileType.ocean},{effects={\"DrawCard\"}}),\ntile:new({3,3,0},{},{resourceValues={Titanium=1}}),\ntile:new({4,3,0},{},{resourceValues={Plants=2}}),\ntile:new({5,3,0},{},{resourceValues={Plants=2}}),\ntile:new({0,0,4},{},{resourceValues={Plants=1}}),\ntile:new({0,1,3},{},{resourceValues={Plants=1}}),\ntile:new({0,2,2},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({0,3,1},{mapFeatures.tileType.ocean},{resourceValues={Plants=1}}),\ntile:new({0,4,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=1}}),\ntile:new({1,4,0},{mapFeatures.tileType.ocean},{resourceValues={Titanium=1}}),\ntile:new({2,4,0},{mapFeatures.tileType.volcano},{resourceValues={Titanium=2}}),\ntile:new({3,4,0},{},{}),\ntile:new({4,4,0},{},{}),\ntile:new({5,4,0},{},{resourceValues={Steel=2}}),\ntile:new({0,0,5},{},{}),\ntile:new({0,1,4},{},{resourceValues={Plants=1}}),\ntile:new({0,2,3},{},{resourceValues={Plants=1}}),\ntile:new({0,3,2},{mapFeatures.tileType.ocean},{resourceValues={Plants=1}}),\ntile:new({0,4,1},{},{resourceValues={Plants=1}}),\ntile:new({0,5,0},{},{}),\ntile:new({1,5,0},{},{}),\ntile:new({2,5,0},{},{}),\ntile:new({3,5,0},{},{}),\ntile:new({4,5,0},{mapFeatures.tileType.ocean},{resourceValues={Steel=1}}),\ntile:new({5,5,0},{mapFeatures.tileType.ocean},{}),\ntile:new({0,1,5},{},{resourceValues={Plants=1}}),\ntile:new({0,2,4},{},{}),\ntile:new({0,3,3},{},{}),\ntile:new({0,4,2},{},{resourceValues={Plants=2}}),\ntile:new({0,5,1},{},{resourceValues={Steel=1}}),\ntile:new({0,6,0},{},{resourceValues={Titanium=1}}),\ntile:new({1,6,0},{},{}),\ntile:new({2,6,0},{},{}),\ntile:new({3,6,0},{mapFeatures.tileType.volcano},{resourceValues={Steel=2}}),\ntile:new({4,6,0},{mapFeatures.tileType.ocean},{resourceValues={Steel=2}}),\ntile:new({0,2,5},{},{resourceValues={Plants=1}}),\ntile:new({0,3,4},{},{resourceValues={Plants=1}}),\ntile:new({0,4,3},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({0,5,2},{},{resourceValues={Titanium=1}}),\ntile:new({0,6,1},{mapFeatures.tileType.volcano},{}),\ntile:new({0,7,0},{},{resourceValues={Steel=1}}),\ntile:new({1,7,0},{},{}),\ntile:new({2,7,0},{},{resourceValues={Steel=1}}),\ntile:new({3,7,0},{mapFeatures.tileType.volcano},{resourceValues={Steel=1},effects={\"DrawCard\"}}),\ntile:new({0,3,5},{},{resourceValues={Steel=1}}),\ntile:new({0,4,4},{mapFeatures.tileType.ocean},{effects={\"DrawCard\"}}),\ntile:new({0,5,3},{},{resourceValues={Plants=1}}),\ntile:new({0,6,2},{},{resourceValues={Steel=1}}),\ntile:new({0,7,1},{},{resourceValues={Titanium=1}}),\ntile:new({0,8,0},{},{}),\ntile:new({1,8,0},{mapFeatures.tileType.volcano},{resourceValues={Titanium=1}}),\ntile:new({2,8,0},{},{}),\ntile:new({0,4,5},{},{resourceValues={Titanium=1}}),\ntile:new({0,5,4},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({0,6,3},{},{}),\ntile:new({0,7,2},{},{}),\ntile:new({0,8,1},{mapFeatures.tileType.volcano},{resourceValues={Titanium=1}}),\ntile:new({0,9,0},{mapFeatures.tileType.volcano},{resourceValues={Titanium=1},effects={\"DrawCard\"}}),\ntile:new({1,9,0},{},{}),\ntile:new({0,5,5},{},{}),\ntile:new({0,6,4},{},{}),\ntile:new({0,7,3},{},{resourceValues={Steel=1}}),\ntile:new({0,8,2},{},{resourceValues={Steel=1}}),\ntile:new({0,9,1},{},{}),\ntile:new({0,10,0},{},{}),\n}\npredefinedMaps.aresPlaneta={}\npredefinedMaps.aresPlaneta.metadata={\noffset={-5,1.4,8.6},\nhexDistance=2.475,\nimageUrl=\"http://cloud-3.steamusercontent.com/ugc/1750191431522157718/AA7F672A7E83BCB68ACF0398B6357269A25D736F/\",\nscale={6.02,1,6.02},\nglobalParameterDefaultMappings={temperature={mappingIndex=1}},\nsize=61\n}\npredefinedMaps.aresPlaneta.tiles={\ntile:new({0,0,0},{mapFeatures.tileType.ocean},{}),\ntile:new({1,0,0},{},{}),\ntile:new({2,0,0},{},{}),\ntile:new({3,0,0},{},{resourceValues={Steel=2}}),\ntile:new({4,0,0},{},{resourceValues={Credits=8}}),\ntile:new({0,0,1},{},{resourceValues={Steel=-4,Titanium=1},effects={\"Ocean\"}}),\ntile:new({0,1,0},{},{}),\ntile:new({1,1,0},{},{}),\ntile:new({2,1,0},{},{resourceValues={Steel=1}}),\ntile:new({3,1,0},{},{resourceValues={Steel=1}}),\ntile:new({4,1,0},{},{resourceValues={Steel=1,Plants=1}}),\ntile:new({0,0,2},{},{resourceValues={Steel=1}}),\ntile:new({0,1,1},{},{}),\ntile:new({0,2,0},{},{resourceValues={Plants=1}}),\ntile:new({1,2,0},{mapFeatures.tileType.ocean},{resourceValues={Steel=1,Titanium=1}}),\ntile:new({2,2,0},{},{resourceValues={Titanium=2}}),\ntile:new({3,2,0},{},{resourceValues={Plants=1}}),\ntile:new({4,2,0},{},{resourceValues={Plants=1}}),\ntile:new({0,0,3},{mapFeatures.tileType.ocean},{resourceValues={Steel=2},productionValues={Heat=1}}),\ntile:new({0,1,2},{},{resourceValues={Steel=1,Plants=1}}),\ntile:new({0,2,1},{},{resourceValues={Plants=1}}),\ntile:new({0,3,0},{mapFeatures.tileType.ocean},{}),\ntile:new({1,3,0},{},{}),\ntile:new({2,3,0},{mapFeatures.tileType.ocean},{effects={\"TradeToken\"}}),\ntile:new({3,3,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({4,3,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({0,0,4},{mapFeatures.tileType.ocean},{resourceValues={Heat=3}}),\ntile:new({0,1,3},{},{resourceValues={Steel=1,Heat=1}}),\ntile:new({0,2,2},{},{resourceValues={Plants=1}}),\ntile:new({0,3,1},{},{resourceValues={Steel=1,Plants=1}}),\ntile:new({0,4,0},{mapFeatures.tileType.ocean},{effects={\"DrawCard\",\"DrawCard\"}}),\ntile:new({1,4,0},{mapFeatures.tileType.ocean},{effects={\"DrawCard\"},resourceValues={Plants=1}}),\ntile:new({2,4,0},{mapFeatures.tileType.oceanOptional},{}),\ntile:new({3,4,0},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({4,4,0},{},{resourceValues={Steel=-3,Plants=1},effects={\"TradeToken\"}}),\ntile:new({0,1,4},{mapFeatures.tileType.oceanOptional},{resourceValues={Heat=2}}),\ntile:new({0,2,3},{},{}),\ntile:new({0,3,2},{},{}),\ntile:new({0,4,1},{},{}),\ntile:new({0,5,0},{},{}),\ntile:new({1,5,0},{},{}),\ntile:new({2,5,0},{},{resourceValues={Plants=2}}),\ntile:new({3,5,0},{},{resourceValues={Plants=1}}),\ntile:new({0,2,4},{},{}),\ntile:new({0,3,3},{},{resourceValues={Titanium=1}}),\ntile:new({0,4,2},{},{}),\ntile:new({0,5,1},{},{}),\ntile:new({0,6,0},{},{}),\ntile:new({1,6,0},{},{resourceValues={Plants=1}}),\ntile:new({2,6,0},{},{resourceValues={Plants=1},effects={\"Microbe\",\"Microbe\"}}),\ntile:new({0,3,4},{},{resourceValues={Credits=-6},effects={\"Colony\"}}),\ntile:new({0,4,3},{},{resourceValues={Titanium=1}}),\ntile:new({0,5,2},{},{effects={\"DrawCard\"},resourceValues={Titanium=1}}),\ntile:new({0,6,1},{},{resourceValues={Plants=3}}),\ntile:new({0,7,0},{mapFeatures.tileType.oceanOptional},{resourceValues={Plants=1}}),\ntile:new({1,7,0},{},{resourceValues={Plants=1},effects={\"Microbe\"}}),\ntile:new({0,4,4},{},{effects={\"TradeToken\"}}),\ntile:new({0,5,3},{},{}),\ntile:new({0,6,2},{},{effects={\"DrawCard\"}}),\ntile:new({0,7,1},{mapFeatures.tileType.ocean},{effects={\"DrawCard\"},resourceValues={Plants=1}}),\ntile:new({0,8,0},{},{resourceValues={Plants=1}}),\n}\npredefinedMaps.olympiaPlanitia={}\npredefinedMaps.olympiaPlanitia.metadata={\noffset={-5,1.4,8.6},\nhexDistance=2.475,\nimageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691647892574050692/CA973CE28B1BC55D80F27B53904999FB4976660D/\",\nscale={6.02,1,6.02},\nglobalParameterDefaultMappings={temperature={mappingIndex=1}},\nsize=61\n}\npredefinedMaps.olympiaPlanitia.tiles={\ntile:new({0,0,0},{},{resourceValues={Plants=1,Steel=1}}),\ntile:new({1,0,0},{},{resourceValues={Plants=1}}),\ntile:new({2,0,0},{},{effects={\"DrawCard\"}}),\ntile:new({3,0,0},{},{resourceValues={Plants=1}}),\ntile:new({4,0,0},{},{resourceValues={Plants=1,Steel=1}}),\ntile:new({0,0,1},{},{resourceValues={Plants=1}}),\ntile:new({0,1,0},{},{}),\ntile:new({1,1,0},{},{resourceValues={Steel=1}}),\ntile:new({2,1,0},{},{resourceValues={Steel=1,Titanium=1}}),\ntile:new({3,1,0},{},{}),\ntile:new({4,1,0},{},{resourceValues={Plants=1,Steel=1}}),\ntile:new({0,0,2},{},{resourceValues={Plants=1}}),\ntile:new({0,1,1},{},{effects={\"DrawCard\"}}),\ntile:new({0,2,0},{mapFeatures.tileType.ocean},{resourceValues={Titanium=1}}),\ntile:new({1,2,0},{mapFeatures.tileType.ocean},{}),\ntile:new({2,2,0},{},{}),\ntile:new({3,2,0},{},{}),\ntile:new({4,2,0},{},{resourceValues={Plants=1}}),\ntile:new({0,0,3},{},{resourceValues={Plants=2}}),\ntile:new({0,1,2},{},{}),\ntile:new({0,2,1},{mapFeatures.tileType.ocean},{resourceValues={Steel=1}}),\ntile:new({0,3,0},{mapFeatures.tileType.ocean},{resourceValues={Heat=-6},effects={\"Temp\"}}),\ntile:new({1,3,0},{mapFeatures.tileType.ocean},{resourceValues={Heat=-3,Steel=2},effects={\"DrawCard\"}}),\ntile:new({2,3,0},{mapFeatures.tileType.ocean},{resourceValues={Titanium=1}}),\ntile:new({3,3,0},{},{resourceValues={Steel=1}}),\ntile:new({4,3,0},{},{resourceValues={Plants=1,Steel=1}}),\ntile:new({0,0,4},{},{resourceValues={Plants=2}}),\ntile:new({0,1,3},{},{}),\ntile:new({0,2,2},{},{resourceValues={Titanium=1}}),\ntile:new({0,3,1},{},{resourceValues={Heat=-3,Steel=2},effects={\"DrawCard\"}}),\ntile:new({0,4,0},{},{}),\ntile:new({1,4,0},{},{resourceValues={Heat=-6},effects={\"Temp\"}}),\ntile:new({2,4,0},{},{effects={\"DrawCard\"}}),\ntile:new({3,4,0},{},{}),\ntile:new({4,4,0},{},{resourceValues={Steel=2}}),\ntile:new({0,1,4},{},{resourceValues={Plants=2}}),\ntile:new({0,2,3},{},{}),\ntile:new({0,3,2},{mapFeatures.tileType.ocean},{resourceValues={Titanium=1,Steel=1}}),\ntile:new({0,4,1},{mapFeatures.tileType.ocean},{resourceValues={Titanium=1,Steel=1,Heat=-3},effects={\"DrawCard\"}}),\ntile:new({0,5,0},{},{resourceValues={Heat=-6},effects={\"Temp\"}}),\ntile:new({1,5,0},{},{effects={\"DrawCard\"}}),\ntile:new({2,5,0},{},{resourceValues={Titanium=1}}),\ntile:new({3,5,0},{},{resourceValues={Plants=1}}),\ntile:new({0,2,4},{mapFeatures.tileType.ocean},{resourceValues={Plants=2}}),\ntile:new({0,3,3},{mapFeatures.tileType.ocean},{}),\ntile:new({0,4,2},{},{}),\ntile:new({0,5,1},{},{resourceValues={Titanium=1}}),\ntile:new({0,6,0},{},{}),\ntile:new({1,6,0},{},{}),\ntile:new({2,6,0},{},{resourceValues={Plants=1}}),\ntile:new({0,3,4},{mapFeatures.tileType.ocean},{resourceValues={Plants=1},effects={\"DrawCard\"}}),\ntile:new({0,4,3},{mapFeatures.tileType.ocean},{effects={\"DrawCard\"}}),\ntile:new({0,5,2},{},{}),\ntile:new({0,6,1},{},{}),\ntile:new({0,7,0},{},{resourceValues={Titanium=1}}),\ntile:new({1,7,0},{},{resourceValues={Steel=2}}),\ntile:new({0,4,4},{},{resourceValues={Plants=2}}),\ntile:new({0,5,3},{},{resourceValues={Steel=1},effects={\"DrawCard\"}}),\ntile:new({0,6,2},{},{resourceValues={Plants=1}}),\ntile:new({0,7,1},{},{resourceValues={Plants=1}}),\ntile:new({0,8,0},{},{resourceValues={Plants=1}}),\n}\npredefinedMaps.template={}\npredefinedMaps.template.metadata={offset={-5,1.4,8.6},hexDistance=2.475,size=61}\npredefinedMaps.template.tiles={\ntile:new({0,0,0},{},{}),\ntile:new({1,0,0},{},{}),\ntile:new({2,0,0},{},{}),\ntile:new({3,0,0},{},{}),\ntile:new({4,0,0},{},{}),\ntile:new({0,0,1},{},{}),\ntile:new({0,1,0},{},{}),\ntile:new({1,1,0},{},{}),\ntile:new({2,1,0},{},{}),\ntile:new({3,1,0},{},{}),\ntile:new({4,1,0},{},{}),\ntile:new({0,0,2},{},{}),\ntile:new({0,1,1},{},{}),\ntile:new({0,2,0},{},{}),\ntile:new({1,2,0},{},{}),\ntile:new({2,2,0},{},{}),\ntile:new({3,2,0},{},{}),\ntile:new({4,2,0},{},{}),\ntile:new({0,0,3},{},{}),\ntile:new({0,1,2},{},{}),\ntile:new({0,2,1},{},{}),\ntile:new({0,3,0},{},{}),\ntile:new({1,3,0},{},{}),\ntile:new({2,3,0},{},{}),\ntile:new({3,3,0},{},{}),\ntile:new({4,3,0},{},{}),\ntile:new({0,0,4},{},{}),\ntile:new({0,1,3},{},{}),\ntile:new({0,2,2},{},{}),\ntile:new({0,3,1},{},{}),\ntile:new({0,4,0},{},{}),\ntile:new({1,4,0},{},{}),\ntile:new({2,4,0},{},{}),\ntile:new({3,4,0},{},{}),\ntile:new({4,4,0},{},{}),\ntile:new({0,1,4},{},{}),\ntile:new({0,2,3},{},{}),\ntile:new({0,3,2},{},{}),\ntile:new({0,4,1},{},{}),\ntile:new({0,5,0},{},{}),\ntile:new({1,5,0},{},{}),\ntile:new({2,5,0},{},{}),\ntile:new({3,5,0},{},{}),\ntile:new({0,2,4},{},{}),\ntile:new({0,3,3},{},{}),\ntile:new({0,4,2},{},{}),\ntile:new({0,5,1},{},{}),\ntile:new({0,6,0},{},{}),\ntile:new({1,6,0},{},{}),\ntile:new({2,6,0},{},{}),\ntile:new({0,3,4},{},{}),\ntile:new({0,4,3},{},{}),\ntile:new({0,5,2},{},{}),\ntile:new({0,6,1},{},{}),\ntile:new({0,7,0},{},{}),\ntile:new({1,7,0},{},{}),\ntile:new({0,4,4},{},{}),\ntile:new({0,5,3},{},{}),\ntile:new({0,6,2},{},{}),\ntile:new({0,7,1},{},{}),\ntile:new({0,8,0},{},{}),\n}\npredefinedVenusMaps={}\npredefinedVenusMaps.baseMap={}\npredefinedVenusMaps.baseMap.metadata={offset={-3.64,1.4,6.32},hexDistance=2.45,imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1800854953427071872/95B75013E7E751FAFCF1D59B093AF6AB02BF9059/\"}\npredefinedVenusMaps.baseMap.tiles={\ntile:new({0,2,0},{mapFeatures.tileType.stratopolis},{}),\ntile:new({1,4,0},{mapFeatures.tileType.maxwellBase},{}),\n}\npredefinedVenusMaps.venusPhaseTwo={}\npredefinedVenusMaps.venusPhaseTwo.metadata={offset={-3.64,1.4,6.32},\nhexDistance=2.45,\nimageUrl=\"http://cloud-3.steamusercontent.com/ugc/1651097841909490253/FAA3E53922C5634C15086438CCDDACFEAC5B1569/\",\nglobalParameterDefaultMappings={venus={mappingIndex=2}},\nbonusDefaultMappings={venus={mappingIndex=2}}}\npredefinedVenusMaps.venusPhaseTwo.tiles={\ntile:new({0,0,0},{mapFeatures.tileType.gas},{resourceValues={Heat=1}}),\ntile:new({1,0,0},{},{}),\ntile:new({2,0,0},{},{resourceValues={Energy=1}}),\ntile:new({3,0,0},{},{}),\ntile:new({0,0,1},{},{}),\ntile:new({0,1,0},{},{}),\ntile:new({1,1,0},{mapFeatures.tileType.gas},{resourceValues={Heat=1}}),\ntile:new({2,1,0},{mapFeatures.tileType.gas},{resourceValues={Heat=3}}),\ntile:new({3,1,0},{},{resourceValues={Energy=1}}),\ntile:new({0,0,2},{},{effects={\"DrawCard\",\"DrawCard\"}}),\ntile:new({0,1,1},{mapFeatures.tileType.gas},{resourceValues={Heat=2}}),\ntile:new({0,2,0},{mapFeatures.tileType.stratopolis},{}),\ntile:new({1,2,0},{},{resourceValues={Energy=1}}),\ntile:new({2,2,0},{mapFeatures.tileType.gas},{resourceValues={Heat=1}}),\ntile:new({3,2,0},{},{}),\ntile:new({0,1,2},{mapFeatures.tileType.gas},{resourceValues={Heat=1}}),\ntile:new({0,2,1},{},{}),\ntile:new({0,3,0},{},{}),\ntile:new({1,3,0},{},{resourceValues={Energy=1}}),\ntile:new({2,3,0},{},{}),\ntile:new({0,1,3},{},{resourceValues={Energy=2}}),\ntile:new({0,2,2},{},{resourceValues={Energy=1}}),\ntile:new({0,3,1},{mapFeatures.tileType.gas},{resourceValues={Heat=2}}),\ntile:new({0,4,0},{},{resourceValues={Energy=1}}),\ntile:new({1,4,0},{mapFeatures.tileType.maxwellBase},{}),\ntile:new({2,4,0},{mapFeatures.tileType.gas},{resourceValues={Heat=2}}),\ntile:new({0,2,3},{},{}),\ntile:new({0,3,2},{mapFeatures.tileType.gas},{resourceValues={Heat=1}}),\ntile:new({0,4,1},{mapFeatures.tileType.gas},{resourceValues={Heat=1}}),\ntile:new({0,5,0},{},{resourceValues={Energy=1}}),\ntile:new({1,5,0},{mapFeatures.tileType.gas},{resourceValues={Heat=2}}),\ntile:new({0,3,3},{},{resourceValues={Energy=1},effects={\"DrawCard\"}}),\ntile:new({0,4,2},{mapFeatures.tileType.gas},{resourceValues={Heat=1}}),\ntile:new({0,5,1},{},{}),\ntile:new({0,6,0},{},{effects={\"DrawCard\",\"DrawCard\"}}),\n}","n21":"randomMapBaseImage=\"http://cloud-3.steamusercontent.com/ugc/1691647137526176806/F192EE4EF76ECE242559FF17E09F0549D95523FF/\"\nrandomizerTemplates={}\nrandomizerTemplates.tiny={}\nrandomizerTemplates.tiny.metadata={\nhexDistance=2.385,\noffset={-3.5,1.4,6.3},\nmapSize=mapSizes.tiny,\nscale={4.8,1,4.8},\n}\nrandomizerTemplates.tiny.tiles={\ntile:new({0,0,0},{\"empty\"},{}),\ntile:new({1,0,0},{\"empty\"},{}),\ntile:new({2,0,0},{\"empty\"},{}),\ntile:new({3,0,0},{\"empty\"},{}),\ntile:new({0,0,1},{\"empty\"},{}),\ntile:new({0,1,0},{\"empty\"},{}),\ntile:new({1,1,0},{\"empty\"},{}),\ntile:new({2,1,0},{\"empty\"},{}),\ntile:new({3,1,0},{\"empty\"},{}),\ntile:new({0,0,2},{\"empty\"},{}),\ntile:new({0,1,1},{\"empty\"},{}),\ntile:new({0,2,0},{\"empty\"},{}),\ntile:new({1,2,0},{\"empty\"},{}),\ntile:new({2,2,0},{\"empty\"},{}),\ntile:new({3,2,0},{\"empty\"},{}),\ntile:new({0,0,3},{\"empty\"},{}),\ntile:new({0,1,2},{\"empty\"},{}),\ntile:new({0,2,1},{\"empty\"},{}),\ntile:new({0,3,0},{\"empty\"},{}),\ntile:new({1,3,0},{\"empty\"},{}),\ntile:new({2,3,0},{\"empty\"},{}),\ntile:new({3,3,0},{\"empty\"},{}),\ntile:new({0,1,3},{\"empty\"},{}),\ntile:new({0,2,2},{\"empty\"},{}),\ntile:new({0,3,1},{\"empty\"},{}),\ntile:new({0,4,0},{\"empty\"},{}),\ntile:new({1,4,0},{\"empty\"},{}),\ntile:new({2,4,0},{\"empty\"},{}),\ntile:new({0,2,3},{\"empty\"},{}),\ntile:new({0,3,2},{\"empty\"},{}),\ntile:new({0,4,1},{\"empty\"},{}),\ntile:new({0,5,0},{\"empty\"},{}),\ntile:new({1,5,0},{\"empty\"},{}),\ntile:new({0,3,3},{\"empty\"},{}),\ntile:new({0,4,2},{\"empty\"},{}),\ntile:new({0,5,1},{\"empty\"},{}),\ntile:new({0,6,0},{\"empty\"},{}),\n}\nrandomizerTemplates.small={}\nrandomizerTemplates.small.metadata={\nhexDistance=2.385,\noffset={-5.96,1.4,6.3},\nmapSize=mapSizes.small,\nscale={5.55,1,5.55},\n}\nrandomizerTemplates.small.tiles={\ntile:new({0,0,0},{\"empty\"},{}),\ntile:new({1,0,0},{\"empty\"},{}),\ntile:new({2,0,0},{\"empty\"},{}),\ntile:new({3,0,0},{\"empty\"},{}),\ntile:new({4,0,0},{\"empty\"},{}),\ntile:new({5,0,0},{\"empty\"},{}),\ntile:new({0,0,1},{\"empty\"},{}),\ntile:new({0,1,0},{\"empty\"},{}),\ntile:new({1,1,0},{\"empty\"},{}),\ntile:new({2,1,0},{\"empty\"},{}),\ntile:new({3,1,0},{\"empty\"},{}),\ntile:new({4,1,0},{\"empty\"},{}),\ntile:new({5,1,0},{\"empty\"},{}),\ntile:new({0,0,2},{\"empty\"},{}),\ntile:new({0,1,1},{\"empty\"},{}),\ntile:new({0,2,0},{\"empty\"},{}),\ntile:new({1,2,0},{\"empty\"},{}),\ntile:new({2,2,0},{\"empty\"},{}),\ntile:new({3,2,0},{\"empty\"},{}),\ntile:new({4,2,0},{\"empty\"},{}),\ntile:new({5,2,0},{\"empty\"},{}),\ntile:new({0,1,2},{\"empty\"},{}),\ntile:new({0,2,1},{\"empty\"},{}),\ntile:new({0,3,0},{\"empty\"},{}),\ntile:new({1,3,0},{\"empty\"},{}),\ntile:new({2,3,0},{\"empty\"},{}),\ntile:new({3,3,0},{\"empty\"},{}),\ntile:new({4,3,0},{\"empty\"},{}),\ntile:new({0,1,3},{\"empty\"},{}),\ntile:new({0,2,2},{\"empty\"},{}),\ntile:new({0,3,1},{\"empty\"},{}),\ntile:new({0,4,0},{\"empty\"},{}),\ntile:new({1,4,0},{\"empty\"},{}),\ntile:new({2,4,0},{\"empty\"},{}),\ntile:new({3,4,0},{\"empty\"},{}),\ntile:new({4,4,0},{\"empty\"},{}),\ntile:new({0,2,3},{\"empty\"},{}),\ntile:new({0,3,2},{\"empty\"},{}),\ntile:new({0,4,1},{\"empty\"},{}),\ntile:new({0,5,0},{\"empty\"},{}),\ntile:new({1,5,0},{\"empty\"},{}),\ntile:new({2,5,0},{\"empty\"},{}),\ntile:new({3,5,0},{\"empty\"},{}),\ntile:new({0,3,3},{\"empty\"},{}),\ntile:new({0,4,2},{\"empty\"},{}),\ntile:new({0,5,1},{\"empty\"},{}),\ntile:new({0,6,0},{\"empty\"},{}),\ntile:new({1,6,0},{\"empty\"},{}),\ntile:new({2,6,0},{\"empty\"},{}),\n}\nrandomizerTemplates.normal={}\nrandomizerTemplates.normal.metadata={\noffset={-5,1.4,8.6},\nhexDistance=2.475,\nsize=61,\nmapSize=mapSizes.normal,\nscale={6.29,1,6.29},\n}\nrandomizerTemplates.normal.tiles={\ntile:new({0,0,0},{\"empty\"},{}),\ntile:new({1,0,0},{\"empty\"},{}),\ntile:new({2,0,0},{\"empty\"},{}),\ntile:new({3,0,0},{\"empty\"},{}),\ntile:new({4,0,0},{\"empty\"},{}),\ntile:new({0,0,1},{\"empty\"},{}),\ntile:new({0,1,0},{\"empty\"},{}),\ntile:new({1,1,0},{\"empty\"},{}),\ntile:new({2,1,0},{\"empty\"},{}),\ntile:new({3,1,0},{\"empty\"},{}),\ntile:new({4,1,0},{\"empty\"},{}),\ntile:new({0,0,2},{\"empty\"},{}),\ntile:new({0,1,1},{\"empty\"},{}),\ntile:new({0,2,0},{\"empty\"},{}),\ntile:new({1,2,0},{\"empty\"},{}),\ntile:new({2,2,0},{\"empty\"},{}),\ntile:new({3,2,0},{\"empty\"},{}),\ntile:new({4,2,0},{\"empty\"},{}),\ntile:new({0,0,3},{\"empty\"},{}),\ntile:new({0,1,2},{\"empty\"},{}),\ntile:new({0,2,1},{\"empty\"},{}),\ntile:new({0,3,0},{\"empty\"},{}),\ntile:new({1,3,0},{\"empty\"},{}),\ntile:new({2,3,0},{\"empty\"},{}),\ntile:new({3,3,0},{\"empty\"},{}),\ntile:new({4,3,0},{\"empty\"},{}),\ntile:new({0,0,4},{\"empty\"},{}),\ntile:new({0,1,3},{\"empty\"},{}),\ntile:new({0,2,2},{\"empty\"},{}),\ntile:new({0,3,1},{\"empty\"},{}),\ntile:new({0,4,0},{\"empty\"},{}),\ntile:new({1,4,0},{\"empty\"},{}),\ntile:new({2,4,0},{\"empty\"},{}),\ntile:new({3,4,0},{\"empty\"},{}),\ntile:new({4,4,0},{\"empty\"},{}),\ntile:new({0,1,4},{\"empty\"},{}),\ntile:new({0,2,3},{\"empty\"},{}),\ntile:new({0,3,2},{\"empty\"},{}),\ntile:new({0,4,1},{\"empty\"},{}),\ntile:new({0,5,0},{\"empty\"},{}),\ntile:new({1,5,0},{\"empty\"},{}),\ntile:new({2,5,0},{\"empty\"},{}),\ntile:new({3,5,0},{\"empty\"},{}),\ntile:new({0,2,4},{\"empty\"},{}),\ntile:new({0,3,3},{\"empty\"},{}),\ntile:new({0,4,2},{\"empty\"},{}),\ntile:new({0,5,1},{\"empty\"},{}),\ntile:new({0,6,0},{\"empty\"},{}),\ntile:new({1,6,0},{\"empty\"},{}),\ntile:new({2,6,0},{\"empty\"},{}),\ntile:new({0,3,4},{\"empty\"},{}),\ntile:new({0,4,3},{\"empty\"},{}),\ntile:new({0,5,2},{\"empty\"},{}),\ntile:new({0,6,1},{\"empty\"},{}),\ntile:new({0,7,0},{\"empty\"},{}),\ntile:new({1,7,0},{\"empty\"},{}),\ntile:new({0,4,4},{\"empty\"},{}),\ntile:new({0,5,3},{\"empty\"},{}),\ntile:new({0,6,2},{\"empty\"},{}),\ntile:new({0,7,1},{\"empty\"},{}),\ntile:new({0,8,0},{\"empty\"},{}),\n}\nrandomizerTemplates.big={}\nrandomizerTemplates.big.metadata={\nhexDistance=2.385,\noffset={-7.1,1.4,8.3},\nmapSize=mapSizes.big,\nscale={6.85,1,6.85},\n}\nrandomizerTemplates.big.tiles={\ntile:new({0,0,0},{\"empty\"},{}),\ntile:new({1,0,0},{\"empty\"},{}),\ntile:new({2,0,0},{\"empty\"},{}),\ntile:new({3,0,0},{\"empty\"},{}),\ntile:new({4,0,0},{\"empty\"},{}),\ntile:new({5,0,0},{\"empty\"},{}),\ntile:new({6,0,0},{\"empty\"},{}),\ntile:new({0,0,1},{\"empty\"},{}),\ntile:new({0,1,0},{\"empty\"},{}),\ntile:new({1,1,0},{\"empty\"},{}),\ntile:new({2,1,0},{\"empty\"},{}),\ntile:new({3,1,0},{\"empty\"},{}),\ntile:new({4,1,0},{\"empty\"},{}),\ntile:new({5,1,0},{\"empty\"},{}),\ntile:new({6,1,0},{\"empty\"},{}),\ntile:new({0,0,2},{\"empty\"},{}),\ntile:new({0,1,1},{\"empty\"},{}),\ntile:new({0,2,0},{\"empty\"},{}),\ntile:new({1,2,0},{\"empty\"},{}),\ntile:new({2,2,0},{\"empty\"},{}),\ntile:new({3,2,0},{\"empty\"},{}),\ntile:new({4,2,0},{\"empty\"},{}),\ntile:new({5,2,0},{\"empty\"},{}),\ntile:new({6,2,0},{\"empty\"},{}),\ntile:new({0,1,2},{\"empty\"},{}),\ntile:new({0,2,1},{\"empty\"},{}),\ntile:new({0,3,0},{\"empty\"},{}),\ntile:new({1,3,0},{\"empty\"},{}),\ntile:new({2,3,0},{\"empty\"},{}),\ntile:new({3,3,0},{\"empty\"},{}),\ntile:new({4,3,0},{\"empty\"},{}),\ntile:new({5,3,0},{\"empty\"},{}),\ntile:new({0,1,3},{\"empty\"},{}),\ntile:new({0,2,2},{\"empty\"},{}),\ntile:new({0,3,1},{\"empty\"},{}),\ntile:new({0,4,0},{\"empty\"},{}),\ntile:new({1,4,0},{\"empty\"},{}),\ntile:new({2,4,0},{\"empty\"},{}),\ntile:new({3,4,0},{\"empty\"},{}),\ntile:new({4,4,0},{\"empty\"},{}),\ntile:new({5,4,0},{\"empty\"},{}),\ntile:new({0,2,3},{\"empty\"},{}),\ntile:new({0,3,2},{\"empty\"},{}),\ntile:new({0,4,1},{\"empty\"},{}),\ntile:new({0,5,0},{\"empty\"},{}),\ntile:new({1,5,0},{\"empty\"},{}),\ntile:new({2,5,0},{\"empty\"},{}),\ntile:new({3,5,0},{\"empty\"},{}),\ntile:new({4,5,0},{\"empty\"},{}),\ntile:new({0,2,4},{\"empty\"},{}),\ntile:new({0,3,3},{\"empty\"},{}),\ntile:new({0,4,2},{\"empty\"},{}),\ntile:new({0,5,1},{\"empty\"},{}),\ntile:new({0,6,0},{\"empty\"},{}),\ntile:new({1,6,0},{\"empty\"},{}),\ntile:new({2,6,0},{\"empty\"},{}),\ntile:new({3,6,0},{\"empty\"},{}),\ntile:new({4,6,0},{\"empty\"},{}),\ntile:new({0,3,4},{\"empty\"},{}),\ntile:new({0,4,3},{\"empty\"},{}),\ntile:new({0,5,2},{\"empty\"},{}),\ntile:new({0,6,1},{\"empty\"},{}),\ntile:new({0,7,0},{\"empty\"},{}),\ntile:new({1,7,0},{\"empty\"},{}),\ntile:new({2,7,0},{\"empty\"},{}),\ntile:new({3,7,0},{\"empty\"},{}),\ntile:new({0,4,4},{\"empty\"},{}),\ntile:new({0,5,3},{\"empty\"},{}),\ntile:new({0,6,2},{\"empty\"},{}),\ntile:new({0,7,1},{\"empty\"},{}),\ntile:new({0,8,0},{\"empty\"},{}),\ntile:new({1,8,0},{\"empty\"},{}),\ntile:new({2,8,0},{\"empty\"},{}),\n}\nrandomizerTemplates.large={}\nrandomizerTemplates.large.metadata={\nhexDistance=2.385,\noffset={-5.96,1.4,10.3},\nsize=91,\nmapSize=mapSizes.large,\nscale={7.34,1,7.34},\n}\nrandomizerTemplates.large.tiles={\ntile:new({0,0,0},{\"empty\"},{}),\ntile:new({1,0,0},{\"empty\"},{}),\ntile:new({2,0,0},{\"empty\"},{}),\ntile:new({3,0,0},{\"empty\"},{}),\ntile:new({4,0,0},{\"empty\"},{}),\ntile:new({5,0,0},{\"empty\"},{}),\ntile:new({0,0,1},{\"empty\"},{}),\ntile:new({0,1,0},{\"empty\"},{}),\ntile:new({1,1,0},{\"empty\"},{}),\ntile:new({2,1,0},{\"empty\"},{}),\ntile:new({3,1,0},{\"empty\"},{}),\ntile:new({4,1,0},{\"empty\"},{}),\ntile:new({5,1,0},{\"empty\"},{}),\ntile:new({0,0,2},{\"empty\"},{}),\ntile:new({0,1,1},{\"empty\"},{}),\ntile:new({0,2,0},{\"empty\"},{}),\ntile:new({1,2,0},{\"empty\"},{}),\ntile:new({2,2,0},{\"empty\"},{}),\ntile:new({3,2,0},{\"empty\"},{}),\ntile:new({4,2,0},{\"empty\"},{}),\ntile:new({5,2,0},{\"empty\"},{}),\ntile:new({0,0,3},{\"empty\"},{}),\ntile:new({0,1,2},{\"empty\"},{}),\ntile:new({0,2,1},{\"empty\"},{}),\ntile:new({0,3,0},{\"empty\"},{}),\ntile:new({1,3,0},{\"empty\"},{}),\ntile:new({2,3,0},{\"empty\"},{}),\ntile:new({3,3,0},{\"empty\"},{}),\ntile:new({4,3,0},{\"empty\"},{}),\ntile:new({5,3,0},{\"empty\"},{}),\ntile:new({0,0,4},{\"empty\"},{}),\ntile:new({0,1,3},{\"empty\"},{}),\ntile:new({0,2,2},{\"empty\"},{}),\ntile:new({0,3,1},{\"empty\"},{}),\ntile:new({0,4,0},{\"empty\"},{}),\ntile:new({1,4,0},{\"empty\"},{}),\ntile:new({2,4,0},{\"empty\"},{}),\ntile:new({3,4,0},{\"empty\"},{}),\ntile:new({4,4,0},{\"empty\"},{}),\ntile:new({5,4,0},{\"empty\"},{}),\ntile:new({0,0,5},{\"empty\"},{}),\ntile:new({0,1,4},{\"empty\"},{}),\ntile:new({0,2,3},{\"empty\"},{}),\ntile:new({0,3,2},{\"empty\"},{}),\ntile:new({0,4,1},{\"empty\"},{}),\ntile:new({0,5,0},{\"empty\"},{}),\ntile:new({1,5,0},{\"empty\"},{}),\ntile:new({2,5,0},{\"empty\"},{}),\ntile:new({3,5,0},{\"empty\"},{}),\ntile:new({4,5,0},{\"empty\"},{}),\ntile:new({5,5,0},{\"empty\"},{}),\ntile:new({0,1,5},{\"empty\"},{}),\ntile:new({0,2,4},{\"empty\"},{}),\ntile:new({0,3,3},{\"empty\"},{}),\ntile:new({0,4,2},{\"empty\"},{}),\ntile:new({0,5,1},{\"empty\"},{}),\ntile:new({0,6,0},{\"empty\"},{}),\ntile:new({1,6,0},{\"empty\"},{}),\ntile:new({2,6,0},{\"empty\"},{}),\ntile:new({3,6,0},{\"empty\"},{}),\ntile:new({4,6,0},{\"empty\"},{}),\ntile:new({0,2,5},{\"empty\"},{}),\ntile:new({0,3,4},{\"empty\"},{}),\ntile:new({0,4,3},{\"empty\"},{}),\ntile:new({0,5,2},{\"empty\"},{}),\ntile:new({0,6,1},{\"empty\"},{}),\ntile:new({0,7,0},{\"empty\"},{}),\ntile:new({1,7,0},{\"empty\"},{}),\ntile:new({2,7,0},{\"empty\"},{}),\ntile:new({3,7,0},{\"empty\"},{}),\ntile:new({0,3,5},{\"empty\"},{}),\ntile:new({0,4,4},{\"empty\"},{}),\ntile:new({0,5,3},{\"empty\"},{}),\ntile:new({0,6,2},{\"empty\"},{}),\ntile:new({0,7,1},{\"empty\"},{}),\ntile:new({0,8,0},{\"empty\"},{}),\ntile:new({1,8,0},{\"empty\"},{}),\ntile:new({2,8,0},{\"empty\"},{}),\ntile:new({0,4,5},{\"empty\"},{}),\ntile:new({0,5,4},{\"empty\"},{}),\ntile:new({0,6,3},{\"empty\"},{}),\ntile:new({0,7,2},{\"empty\"},{}),\ntile:new({0,8,1},{\"empty\"},{}),\ntile:new({0,9,0},{\"empty\"},{}),\ntile:new({1,9,0},{\"empty\"},{}),\ntile:new({0,5,5},{\"empty\"},{}),\ntile:new({0,6,4},{\"empty\"},{}),\ntile:new({0,7,3},{\"empty\"},{}),\ntile:new({0,8,2},{\"empty\"},{}),\ntile:new({0,9,1},{\"empty\"},{}),\ntile:new({0,10,0},{\"empty\"},{}),\n}\nrandomizerTemplates.huge={}\nrandomizerTemplates.huge.metadata={\nhexDistance=2.385,\noffset={-7.1,1.4,12.2},\nmapSize=mapSizes.huge,\nscale={8.86,1,8.86},\n}\nrandomizerTemplates.huge.tiles={\ntile:new({0,0,0},{\"empty\"},{}),\ntile:new({1,0,0},{\"empty\"},{}),\ntile:new({2,0,0},{\"empty\"},{}),\ntile:new({3,0,0},{\"empty\"},{}),\ntile:new({4,0,0},{\"empty\"},{}),\ntile:new({5,0,0},{\"empty\"},{}),\ntile:new({6,0,0},{\"empty\"},{}),\ntile:new({0,0,1},{\"empty\"},{}),\ntile:new({0,1,0},{\"empty\"},{}),\ntile:new({1,1,0},{\"empty\"},{}),\ntile:new({2,1,0},{\"empty\"},{}),\ntile:new({3,1,0},{\"empty\"},{}),\ntile:new({4,1,0},{\"empty\"},{}),\ntile:new({5,1,0},{\"empty\"},{}),\ntile:new({6,1,0},{\"empty\"},{}),\ntile:new({0,0,2},{\"empty\"},{}),\ntile:new({0,1,1},{\"empty\"},{}),\ntile:new({0,2,0},{\"empty\"},{}),\ntile:new({1,2,0},{\"empty\"},{}),\ntile:new({2,2,0},{\"empty\"},{}),\ntile:new({3,2,0},{\"empty\"},{}),\ntile:new({4,2,0},{\"empty\"},{}),\ntile:new({5,2,0},{\"empty\"},{}),\ntile:new({6,2,0},{\"empty\"},{}),\ntile:new({0,0,3},{\"empty\"},{}),\ntile:new({0,1,2},{\"empty\"},{}),\ntile:new({0,2,1},{\"empty\"},{}),\ntile:new({0,3,0},{\"empty\"},{}),\ntile:new({1,3,0},{\"empty\"},{}),\ntile:new({2,3,0},{\"empty\"},{}),\ntile:new({3,3,0},{\"empty\"},{}),\ntile:new({4,3,0},{\"empty\"},{}),\ntile:new({5,3,0},{\"empty\"},{}),\ntile:new({6,3,0},{\"empty\"},{}),\ntile:new({0,0,4},{\"empty\"},{}),\ntile:new({0,1,3},{\"empty\"},{}),\ntile:new({0,2,2},{\"empty\"},{}),\ntile:new({0,3,1},{\"empty\"},{}),\ntile:new({0,4,0},{\"empty\"},{}),\ntile:new({1,4,0},{\"empty\"},{}),\ntile:new({2,4,0},{\"empty\"},{}),\ntile:new({3,4,0},{\"empty\"},{}),\ntile:new({4,4,0},{\"empty\"},{}),\ntile:new({5,4,0},{\"empty\"},{}),\ntile:new({6,4,0},{\"empty\"},{}),\ntile:new({0,0,5},{\"empty\"},{}),\ntile:new({0,1,4},{\"empty\"},{}),\ntile:new({0,2,3},{\"empty\"},{}),\ntile:new({0,3,2},{\"empty\"},{}),\ntile:new({0,4,1},{\"empty\"},{}),\ntile:new({0,5,0},{\"empty\"},{}),\ntile:new({1,5,0},{\"empty\"},{}),\ntile:new({2,5,0},{\"empty\"},{}),\ntile:new({3,5,0},{\"empty\"},{}),\ntile:new({4,5,0},{\"empty\"},{}),\ntile:new({5,5,0},{\"empty\"},{}),\ntile:new({6,5,0},{\"empty\"},{}),\ntile:new({0,0,6},{\"empty\"},{}),\ntile:new({0,1,5},{\"empty\"},{}),\ntile:new({0,2,4},{\"empty\"},{}),\ntile:new({0,3,3},{\"empty\"},{}),\ntile:new({0,4,2},{\"empty\"},{}),\ntile:new({0,5,1},{\"empty\"},{}),\ntile:new({0,6,0},{\"empty\"},{}),\ntile:new({1,6,0},{\"empty\"},{}),\ntile:new({2,6,0},{\"empty\"},{}),\ntile:new({3,6,0},{\"empty\"},{}),\ntile:new({4,6,0},{\"empty\"},{}),\ntile:new({5,6,0},{\"empty\"},{}),\ntile:new({6,6,0},{\"empty\"},{}),\ntile:new({0,1,6},{\"empty\"},{}),\ntile:new({0,2,5},{\"empty\"},{}),\ntile:new({0,3,4},{\"empty\"},{}),\ntile:new({0,4,3},{\"empty\"},{}),\ntile:new({0,5,2},{\"empty\"},{}),\ntile:new({0,6,1},{\"empty\"},{}),\ntile:new({0,7,0},{\"empty\"},{}),\ntile:new({1,7,0},{\"empty\"},{}),\ntile:new({2,7,0},{\"empty\"},{}),\ntile:new({3,7,0},{\"empty\"},{}),\ntile:new({4,7,0},{\"empty\"},{}),\ntile:new({5,7,0},{\"empty\"},{}),\ntile:new({0,2,6},{\"empty\"},{}),\ntile:new({0,3,5},{\"empty\"},{}),\ntile:new({0,4,4},{\"empty\"},{}),\ntile:new({0,5,3},{\"empty\"},{}),\ntile:new({0,6,2},{\"empty\"},{}),\ntile:new({0,7,1},{\"empty\"},{}),\ntile:new({0,8,0},{\"empty\"},{}),\ntile:new({1,8,0},{\"empty\"},{}),\ntile:new({2,8,0},{\"empty\"},{}),\ntile:new({3,8,0},{\"empty\"},{}),\ntile:new({4,8,0},{\"empty\"},{}),\ntile:new({0,3,6},{\"empty\"},{}),\ntile:new({0,4,5},{\"empty\"},{}),\ntile:new({0,5,4},{\"empty\"},{}),\ntile:new({0,6,3},{\"empty\"},{}),\ntile:new({0,7,2},{\"empty\"},{}),\ntile:new({0,8,1},{\"empty\"},{}),\ntile:new({0,9,0},{\"empty\"},{}),\ntile:new({1,9,0},{\"empty\"},{}),\ntile:new({2,9,0},{\"empty\"},{}),\ntile:new({3,9,0},{\"empty\"},{}),\ntile:new({0,4,6},{\"empty\"},{}),\ntile:new({0,5,5},{\"empty\"},{}),\ntile:new({0,6,4},{\"empty\"},{}),\ntile:new({0,7,3},{\"empty\"},{}),\ntile:new({0,8,2},{\"empty\"},{}),\ntile:new({0,9,1},{\"empty\"},{}),\ntile:new({0,10,0},{\"empty\"},{}),\ntile:new({1,10,0},{\"empty\"},{}),\ntile:new({2,10,0},{\"empty\"},{}),\ntile:new({0,5,6},{\"empty\"},{}),\ntile:new({0,6,5},{\"empty\"},{}),\ntile:new({0,7,4},{\"empty\"},{}),\ntile:new({0,8,3},{\"empty\"},{}),\ntile:new({0,9,2},{\"empty\"},{}),\ntile:new({0,10,1},{\"empty\"},{}),\ntile:new({0,11,0},{\"empty\"},{}),\ntile:new({1,11,0},{\"empty\"},{}),\ntile:new({0,6,6},{\"empty\"},{}),\ntile:new({0,7,5},{\"empty\"},{}),\ntile:new({0,8,4},{\"empty\"},{}),\ntile:new({0,9,3},{\"empty\"},{}),\ntile:new({0,10,2},{\"empty\"},{}),\ntile:new({0,11,1},{\"empty\"},{}),\ntile:new({0,12,0},{\"empty\"},{}),\n}\nrandomizerTemplates.gigantic={}\nrandomizerTemplates.gigantic.metadata={\nhexDistance=2.385,\noffset={-8.365,1.4,14.2},\nmapSize=mapSizes.gigantic,\nscale={8.97,1,8.97},\n}\nrandomizerTemplates.gigantic.tiles={\ntile:new({1,0,0},{\"empty\"},{}),\ntile:new({2,0,0},{\"empty\"},{}),\ntile:new({3,0,0},{\"empty\"},{}),\ntile:new({4,0,0},{\"empty\"},{}),\ntile:new({5,0,0},{\"empty\"},{}),\ntile:new({6,0,0},{\"empty\"},{}),\ntile:new({0,0,1},{\"empty\"},{}),\ntile:new({0,1,0},{\"empty\"},{}),\ntile:new({1,1,0},{\"empty\"},{}),\ntile:new({2,1,0},{\"empty\"},{}),\ntile:new({3,1,0},{\"empty\"},{}),\ntile:new({4,1,0},{\"empty\"},{}),\ntile:new({5,1,0},{\"empty\"},{}),\ntile:new({6,1,0},{\"empty\"},{}),\ntile:new({7,1,0},{\"empty\"},{}),\ntile:new({0,0,2},{\"empty\"},{}),\ntile:new({0,1,1},{\"empty\"},{}),\ntile:new({0,2,0},{\"empty\"},{}),\ntile:new({1,2,0},{\"empty\"},{}),\ntile:new({2,2,0},{\"empty\"},{}),\ntile:new({3,2,0},{\"empty\"},{}),\ntile:new({4,2,0},{\"empty\"},{}),\ntile:new({5,2,0},{\"empty\"},{}),\ntile:new({6,2,0},{\"empty\"},{}),\ntile:new({7,2,0},{\"empty\"},{}),\ntile:new({0,0,3},{\"empty\"},{}),\ntile:new({0,1,2},{\"empty\"},{}),\ntile:new({0,2,1},{\"empty\"},{}),\ntile:new({0,3,0},{\"empty\"},{}),\ntile:new({1,3,0},{\"empty\"},{}),\ntile:new({2,3,0},{\"empty\"},{}),\ntile:new({3,3,0},{\"empty\"},{}),\ntile:new({4,3,0},{\"empty\"},{}),\ntile:new({5,3,0},{\"empty\"},{}),\ntile:new({6,3,0},{\"empty\"},{}),\ntile:new({7,3,0},{\"empty\"},{}),\ntile:new({0,0,4},{\"empty\"},{}),\ntile:new({0,1,3},{\"empty\"},{}),\ntile:new({0,2,2},{\"empty\"},{}),\ntile:new({0,3,1},{\"empty\"},{}),\ntile:new({0,4,0},{\"empty\"},{}),\ntile:new({1,4,0},{\"empty\"},{}),\ntile:new({2,4,0},{\"empty\"},{}),\ntile:new({3,4,0},{\"empty\"},{}),\ntile:new({4,4,0},{\"empty\"},{}),\ntile:new({5,4,0},{\"empty\"},{}),\ntile:new({6,4,0},{\"empty\"},{}),\ntile:new({7,4,0},{\"empty\"},{}),\ntile:new({0,0,5},{\"empty\"},{}),\ntile:new({0,1,4},{\"empty\"},{}),\ntile:new({0,2,3},{\"empty\"},{}),\ntile:new({0,3,2},{\"empty\"},{}),\ntile:new({0,4,1},{\"empty\"},{}),\ntile:new({0,5,0},{\"empty\"},{}),\ntile:new({1,5,0},{\"empty\"},{}),\ntile:new({2,5,0},{\"empty\"},{}),\ntile:new({3,5,0},{\"empty\"},{}),\ntile:new({4,5,0},{\"empty\"},{}),\ntile:new({5,5,0},{\"empty\"},{}),\ntile:new({6,5,0},{\"empty\"},{}),\ntile:new({7,5,0},{\"empty\"},{}),\ntile:new({0,1,5},{\"empty\"},{}),\ntile:new({0,2,4},{\"empty\"},{}),\ntile:new({0,3,3},{\"empty\"},{}),\ntile:new({0,4,2},{\"empty\"},{}),\ntile:new({0,5,1},{\"empty\"},{}),\ntile:new({0,6,0},{\"empty\"},{}),\ntile:new({1,6,0},{\"empty\"},{}),\ntile:new({2,6,0},{\"empty\"},{}),\ntile:new({3,6,0},{\"empty\"},{}),\ntile:new({4,6,0},{\"empty\"},{}),\ntile:new({5,6,0},{\"empty\"},{}),\ntile:new({6,6,0},{\"empty\"},{}),\ntile:new({0,1,6},{\"empty\"},{}),\ntile:new({0,2,5},{\"empty\"},{}),\ntile:new({0,3,4},{\"empty\"},{}),\ntile:new({0,4,3},{\"empty\"},{}),\ntile:new({0,5,2},{\"empty\"},{}),\ntile:new({0,6,1},{\"empty\"},{}),\ntile:new({0,7,0},{\"empty\"},{}),\ntile:new({1,7,0},{\"empty\"},{}),\ntile:new({2,7,0},{\"empty\"},{}),\ntile:new({3,7,0},{\"empty\"},{}),\ntile:new({4,7,0},{\"empty\"},{}),\ntile:new({5,7,0},{\"empty\"},{}),\ntile:new({6,7,0},{\"empty\"},{}),\ntile:new({0,2,6},{\"empty\"},{}),\ntile:new({0,3,5},{\"empty\"},{}),\ntile:new({0,4,4},{\"empty\"},{}),\ntile:new({0,5,3},{\"empty\"},{}),\ntile:new({0,6,2},{\"empty\"},{}),\ntile:new({0,7,1},{\"empty\"},{}),\ntile:new({0,8,0},{\"empty\"},{}),\ntile:new({1,8,0},{\"empty\"},{}),\ntile:new({2,8,0},{\"empty\"},{}),\ntile:new({3,8,0},{\"empty\"},{}),\ntile:new({4,8,0},{\"empty\"},{}),\ntile:new({5,8,0},{\"empty\"},{}),\ntile:new({0,2,7},{\"empty\"},{}),\ntile:new({0,3,6},{\"empty\"},{}),\ntile:new({0,4,5},{\"empty\"},{}),\ntile:new({0,5,4},{\"empty\"},{}),\ntile:new({0,6,3},{\"empty\"},{}),\ntile:new({0,7,2},{\"empty\"},{}),\ntile:new({0,8,1},{\"empty\"},{}),\ntile:new({0,9,0},{\"empty\"},{}),\ntile:new({1,9,0},{\"empty\"},{}),\ntile:new({2,9,0},{\"empty\"},{}),\ntile:new({3,9,0},{\"empty\"},{}),\ntile:new({4,9,0},{\"empty\"},{}),\ntile:new({5,9,0},{\"empty\"},{}),\ntile:new({0,3,7},{\"empty\"},{}),\ntile:new({0,4,6},{\"empty\"},{}),\ntile:new({0,5,5},{\"empty\"},{}),\ntile:new({0,6,4},{\"empty\"},{}),\ntile:new({0,7,3},{\"empty\"},{}),\ntile:new({0,8,2},{\"empty\"},{}),\ntile:new({0,9,1},{\"empty\"},{}),\ntile:new({0,10,0},{\"empty\"},{}),\ntile:new({1,10,0},{\"empty\"},{}),\ntile:new({2,10,0},{\"empty\"},{}),\ntile:new({3,10,0},{\"empty\"},{}),\ntile:new({4,10,0},{\"empty\"},{}),\ntile:new({0,4,7},{\"empty\"},{}),\ntile:new({0,5,6},{\"empty\"},{}),\ntile:new({0,6,5},{\"empty\"},{}),\ntile:new({0,7,4},{\"empty\"},{}),\ntile:new({0,8,3},{\"empty\"},{}),\ntile:new({0,9,2},{\"empty\"},{}),\ntile:new({0,10,1},{\"empty\"},{}),\ntile:new({0,11,0},{\"empty\"},{}),\ntile:new({1,11,0},{\"empty\"},{}),\ntile:new({2,11,0},{\"empty\"},{}),\ntile:new({3,11,0},{\"empty\"},{}),\ntile:new({0,5,7},{\"empty\"},{}),\ntile:new({0,6,6},{\"empty\"},{}),\ntile:new({0,7,5},{\"empty\"},{}),\ntile:new({0,8,4},{\"empty\"},{}),\ntile:new({0,9,3},{\"empty\"},{}),\ntile:new({0,10,2},{\"empty\"},{}),\ntile:new({0,11,1},{\"empty\"},{}),\ntile:new({0,12,0},{\"empty\"},{}),\ntile:new({1,12,0},{\"empty\"},{}),\ntile:new({2,12,0},{\"empty\"},{}),\ntile:new({0,6,7},{\"empty\"},{}),\ntile:new({0,7,6},{\"empty\"},{}),\ntile:new({0,8,5},{\"empty\"},{}),\ntile:new({0,9,4},{\"empty\"},{}),\ntile:new({0,10,3},{\"empty\"},{}),\ntile:new({0,11,2},{\"empty\"},{}),\ntile:new({0,12,1},{\"empty\"},{}),\ntile:new({0,13,0},{\"empty\"},{}),\ntile:new({1,13,0},{\"empty\"},{}),\ntile:new({0,8,6},{\"empty\"},{}),\ntile:new({0,9,5},{\"empty\"},{}),\ntile:new({0,10,4},{\"empty\"},{}),\ntile:new({0,11,3},{\"empty\"},{}),\ntile:new({0,12,2},{\"empty\"},{}),\ntile:new({0,13,1},{\"empty\"},{}),\n}","n22":"randomizerTiles={}\nrandomizerTiles.volcanoTiles={\n{remaining=1,features={mapFeatures.tileType.volcano},placementProperties={resourceValues={Plants=2}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276174476/69EFF6BFFA3053DBE06173A1F81FDAA44522601C/\"},\n{remaining=1,features={mapFeatures.tileType.volcano},placementProperties={resourceValues={Plants=1,Titanium=1}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276174203/B1FB2D4D44B2701EBCD2C9C4BBFCF555A66F2C13/\"},\n{remaining=1,features={mapFeatures.tileType.volcano},placementProperties={resourceValues={Steel=1}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276174020/7DE5A3ECC5199F459EE66E3CA7FEC666EF09D6A2/\"},\n{remaining=1,features={mapFeatures.tileType.volcano},placementProperties={effects={\"DrawCard\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276174356/1DCB0D3CFB0EA4CEA4392B3D778CA6E173DEEA36/\"},\n}\nrandomizerTiles.reservedTiles={\n{remaining=1,features={mapFeatures.tileType.nocticsCity},placementProperties={resourceValues={Plants=2}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276173866/A36AC575A6DE51FEC13529786E6D93A79AB4FBCC/\"},\n}\nrandomizerTiles.oceanTiles={\n{remaining=6,features={mapFeatures.tileType.ocean},placementProperties={resourceValues={Plants=2}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276172714/A97E5F3A99AC132CD303F8D7A7F9BBB209D9B18C/\"},\n{remaining=4,features={mapFeatures.tileType.ocean},placementProperties={resourceValues={Plants=1}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276172565/2E14B3403D5D083CCBF4119915181F92EF850EA9/\"},\n{remaining=1,features={mapFeatures.tileType.ocean},placementProperties={resourceValues={Heat=3}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276171463/F299153F83871938FC8129FD19F57B413CB17C75/\"},\n{remaining=1,features={mapFeatures.tileType.ocean},placementProperties={},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276171626/E165D401D1E549E3C0349998489C6D7B83DBE1B8/\"},\n{remaining=1,features={mapFeatures.tileType.ocean},placementProperties={resourceValues={Titanium=2}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276171743/0985449E915581E48BE21BED2CDC8944C0E26420/\"},\n{remaining=1,features={mapFeatures.tileType.ocean},placementProperties={resourceValues={Titanium=1}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276171844/0068DB58F95659EAC7035BBADF8C1321A3FF6804/\"},\n{remaining=1,features={mapFeatures.tileType.ocean},placementProperties={resourceValues={Steel=2}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276172145/648F7FF808250F39AA5F8AA72F6EC4DE704F786D/\"},\n{remaining=1,features={mapFeatures.tileType.ocean},placementProperties={resourceValues={Steel=1}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276171968/65EE0E46075C156419F3F5132625E7E6893A4501/\"},\n{remaining=1,features={mapFeatures.tileType.ocean},placementProperties={effects={\"DrawCard\",\"DrawCard\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276172276/664D6FAA3EAF07C6192861827C45D12A6B15E3C3/\"},\n{remaining=1,features={mapFeatures.tileType.ocean},placementProperties={effects={\"DrawCard\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276172398/4C4CB43FE8B651FD75D10FA6F204F61D1A616DF6/\"},\n}\nrandomizerTiles.blockedTiles={\n{remaining=1,features={mapFeatures.tileType.ocean},placementProperties={},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276172398/4C4CB43FE8B651FD75D10FA6F204F61D1A616DF6/\"}\n}\nrandomizerTiles.emptyTiles={\n{remaining=24,features={},placementProperties={},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276173555/05B1F3924752F711D9525674ECC1AB208BB81CA8/\"},\n}\nrandomizerTiles.bonusTiles={\n{remaining=2,features={},placementProperties={effects={\"DrawCard\",\"DrawCard\",\"DrawCard\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1665730758170256704/5BCFAB470630D7AA88AF76B730394F157ECE6C6A/\"},\n{remaining=1,features={},placementProperties={effects={\"DrawCard\",\"DrawCard\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/773980614477046158/92CD8A5A35B90CB782C72A7D27A2A63B4F47B037/\"},\n{remaining=3,features={},placementProperties={effects={\"DrawCard\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276173140/9370071D162613CF37F0E8FF1A92E4268348A1FC/\"},\n{remaining=1,features={},placementProperties={resourceValues={Titanium=2}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276173243/CB918F242EC4907838BC79CA4D8D621114BF4DBA/\"},\n{remaining=1,features={},placementProperties={resourceValues={Titanium=1}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276173363/ABECC4CF05A2DD2396C4E21512F64BDFCF59FC52/\"},\n{remaining=3,features={},placementProperties={resourceValues={Steel=2}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276172944/D1F0D0D7470754942FC405077D0E0B803715BFCC/\"},\n{remaining=3,features={},placementProperties={resourceValues={Steel=1}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276172839/9351906A06DAA9DAE11DEB23B8E18458F4A965A3/\"},\n{remaining=1,features={},placementProperties={resourceValues={Plants=3}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276173750/C99FFD8D10BEE02F0F64C1434B8F2BA1645FEDB2/\"},\n{remaining=9,features={},placementProperties={resourceValues={Plants=2}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276173454/E923B227C2DBE946E354CB5C5ADEFE37914430EE/\"},\n{remaining=13,features={},placementProperties={resourceValues={Plants=1}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276173043/91C3BF9DEC7D0C6168938370769D5993B8F44CC0/\"},\n{remaining=1,features={},placementProperties={resourceValues={Heat=3}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276173655/FAB7A7854CD970B64442630CF90FB930FBFBD0E5/\"},\n}\nrandomizerTiles.regularTiles={\n{remaining=2,features={},placementProperties={effects={\"DrawCard\",\"DrawCard\",\"DrawCard\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1665730758170256704/5BCFAB470630D7AA88AF76B730394F157ECE6C6A/\"},\n{remaining=1,features={},placementProperties={effects={\"DrawCard\",\"DrawCard\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/773980614477046158/92CD8A5A35B90CB782C72A7D27A2A63B4F47B037/\"},\n{remaining=3,features={},placementProperties={effects={\"DrawCard\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276173140/9370071D162613CF37F0E8FF1A92E4268348A1FC/\"},\n{remaining=1,features={},placementProperties={resourceValues={Titanium=2}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276173243/CB918F242EC4907838BC79CA4D8D621114BF4DBA/\"},\n{remaining=1,features={},placementProperties={resourceValues={Titanium=1}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276173363/ABECC4CF05A2DD2396C4E21512F64BDFCF59FC52/\"},\n{remaining=3,features={},placementProperties={resourceValues={Steel=2}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276172944/D1F0D0D7470754942FC405077D0E0B803715BFCC/\"},\n{remaining=3,features={},placementProperties={resourceValues={Steel=1}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276172839/9351906A06DAA9DAE11DEB23B8E18458F4A965A3/\"},\n{remaining=1,features={},placementProperties={resourceValues={Plants=3}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276173750/C99FFD8D10BEE02F0F64C1434B8F2BA1645FEDB2/\"},\n{remaining=9,features={},placementProperties={resourceValues={Plants=2}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276173454/E923B227C2DBE946E354CB5C5ADEFE37914430EE/\"},\n{remaining=13,features={},placementProperties={resourceValues={Plants=1}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276173043/91C3BF9DEC7D0C6168938370769D5993B8F44CC0/\"},\n{remaining=1,features={},placementProperties={resourceValues={Heat=3}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276173655/FAB7A7854CD970B64442630CF90FB930FBFBD0E5/\"},\n{remaining=24,features={},placementProperties={},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276173555/05B1F3924752F711D9525674ECC1AB208BB81CA8/\"},\n}\nrandomizerTiles.randomizerTileExpansion={\n{remaining=1,features={mapFeatures.tileType.oceanOptional},placementProperties={effects={\"DrawCard\",\"Microbe\",\"Microbe\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1665730758170252910/CAF687BCE77E8EF2FAACC64493489E3C138A6137/\"},\n{remaining=0,features={},placementProperties={effects={\"DrawCard\",\"Data\",\"Data\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1665730758170254771/029537720DD6F8653580BCA2DB72CDCFDD2B5329/\"},\n{remaining=1,features={},placementProperties={effects={\"TR\"},resourceValues={Credits=-4}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1665730758170259469/9899983B222F087F18BC8A5334771A0757763727/\"},\n{remaining=1,features={},placementProperties={effects={\"Ocean\"},resourceValues={Plants=-3}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1665730758170261128/70C5814D27E16C1FB46BD08D64A4990477E4FD93/\"},\n{remaining=1,features={},placementProperties={effects={\"Temp\",\"DrawCard\"},resourceValues={Energy=-3}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1665730758170265759/424EA49E902B71144645A6D4CC17789E79D5D27F/\"},\n{remaining=1,features={},placementProperties={resourceValues={Steel=2,Titanium=1}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1665730758170255817/6F6722BD68D0C83057390D2D9F174C5391FA6C35/\"},\n{remaining=1,features={},placementProperties={resourceValues={Steel=1},effects={\"DrawCard\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1665730758170264590/17EF527183A2220F001E0090DFC0914B70F3A43E/\"},\n{remaining=1,features={},placementProperties={resourceValues={Steel=1},effects={\"DrawCard\",\"Science\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1665730758170258729/B3FA06FD5FE098B382323D0F0C2ABA5EEAFB3F98/\"},\n{remaining=1,features={},placementProperties={effects={\"WildCardToken\",\"WildCardToken\"},resourceValues={Credits=-2}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1665730758170457551/D629787C2E005F75E4C0A04D5998333CA61DB93A/\"},\n{remaining=1,features={},placementProperties={effects={\"DrawCard\"},resourceValues={Titanium=1}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1665730758170262189/1300E76B9DAA18FBD2D0251333805F085AEF78E8/\"},\n{remaining=1,features={mapFeatures.tileType.oceanOptional},placementProperties={resourceValues={Credits=-5}},adjacenyEffects={resourceValues={Plants=1}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1665730758170257517/329D1B6BC14F96CAD847E918FEEFD86B1F62B80D/\"},\n}\nrandomizerTiles.mapOceansPositions={\n{{1,0,0},{2,0,0},{0,0,2},{0,0,3},{4,2,0},{4,3,0},{1,2,0},{1,3,0},{0,3,0},{0,4,0},{0,3,1},{0,4,1},{0,3,2},{0,4,2},{0,3,3},{0,4,3},{0,3,4},{0,4,4}},\n{{2,0,0},{2,1,0},{1,2,0},{1,3,0},{0,3,0},{0,4,0},{0,2,2},{0,3,1},{1,4,0},{2,4,0},{0,5,0},{0,4,1},{0,5,1},{0,6,1},{0,6,2},{0,8,0},{4,4,0},{0,0,4}},\n{{2,0,0},{2,1,0},{1,2,0},{1,3,0},{0,3,0},{0,4,0},{0,2,2},{0,3,1},{1,4,0},{2,4,0},{0,5,0},{0,4,1},{0,5,1},{0,6,1},{0,6,2},{0,8,0},{4,4,0},{0,0,4}},\n{{0,0,0},{1,0,0},{0,0,1},{3,0,0},{4,0,0},{4,1,0},{0,0,3},{0,1,2},{0,1,3},{0,2,2},{0,3,1},{0,4,0},{1,4,0},{0,4,1},{1,5,0},{2,5,0},{0,4,4},{0,8,0}},\n{{3,0,0},{4,0,0},{4,1,0},{0,2,0},{0,3,0},{1,3,0},{0,3,1},{0,5,0},{0,5,1},{3,5,0},{2,6,0},{1,7,0},{0,7,1},{0,6,2},{0,5,3},{0,2,4},{0,1,4},{0,0,4}},\n{{0,0,1},{0,0,2},{3,0,0},{2,1,0},{3,1,0},{2,2,0},{3,2,0},{2,3,0},{3,3,0},{3,4,0},{3,5,0},{1,7,0},{0,8,0},{0,5,2},{0,5,3},{0,4,4},{0,3,4},{0,3,3}},\n{{4,3,0},{4,4,0},{3,5,0},{0,6,0},{0,7,0},{0,6,1},{0,7,1},{0,2,3},{0,3,2},{0,1,3},{0,2,2},{0,3,1},{0,2,1},{0,1,2},{2,1,0},{2,2,0},{3,0,0},{3,1,0}},\n{{4,1,0},{4,2,0},{3,1,0},{3,2,0},{2,3,0},{2,4,0},{1,3,0},{1,4,0},{0,4,0},{0,5,0},{1,5,0},{0,5,1},{0,4,2},{0,5,2},{0,6,1},{0,6,2},{0,4,3},{0,5,3}},\n{{0,0,0},{1,0,0},{2,0,0},{3,0,0},{0,0,1},{0,0,2},{0,0,3},{0,0,4},{0,1,4},{0,2,4},{0,3,4},{0,4,4},{0,5,3},{0,6,2},{0,7,1},{0,8,0},{1,7,0},{2,6,0}},\n{{0,0,0},{1,0,0},{2,0,0},{3,0,0},{4,0,0},{4,1,0},{4,2,0},{4,3,0},{4,4,0},{3,5,0},{2,6,0},{1,7,0},{0,8,0},{0,7,1},{0,6,2},{0,5,3},{0,4,4},{0,3,4}},\n{{1,1,0},{2,1,0},{0,2,0},{2,2,0},{0,1,2},{0,2,1},{0,1,3},{0,2,3},{0,3,2},{0,4,2},{0,5,2},{0,6,1},{0,6,0},{1,5,0},{2,5,0},{3,4,0},{3,3,0},{2,3,0}},\n{{0,0,0},{0,0,1},{0,1,0},{3,0,0},{4,0,0},{3,1,0},{4,3,0},{3,4,0},{4,4,0},{1,6,0},{2,6,0},{1,7,0},{0,5,2},{0,5,3},{0,6,2},{0,0,4},{0,1,3},{0,1,4}},\n{{2,1,0},{2,2,0},{2,3,0},{2,4,0},{2,5,0},{1,4,0},{0,2,0},{1,2,0},{0,2,1},{0,3,0},{0,1,2},{0,2,2},{0,4,0},{0,5,0},{0,3,2},{0,4,1},{0,4,2},{0,5,2}},\n{{2,0,0},{1,1,0},{2,1,0},{1,2,0},{1,3,0},{0,0,4},{0,1,3},{0,2,2},{0,3,1},{0,4,0},{1,4,0},{2,4,0},{3,4,0},{4,4,0},{0,4,1},{0,5,1},{0,5,2},{1,6,0}},\n{{3,0,0},{4,0,0},{3,1,0},{4,1,0},{0,2,0},{0,0,3},{0,1,2},{0,2,1},{0,3,0},{0,3,1},{0,5,0},{0,6,0},{1,6,0},{0,7,0},{1,7,0},{0,3,4},{0,4,4},{0,5,3}},\n}\nrandomizerTiles.baseTileGuids={\"99b130\",\"99b131\"}","n23":"standardProjectTileData={}\nstandardProjectTileData.default={\nimageUrl=\"http://cloud-3.steamusercontent.com/ugc/1751317853416866731/A4954EB24622A576517EA5A36182F2C336214D25/\",\nbuttons={{click_function=\"cityStandardProject\",tooltip=\"Place a city tile\"},\n{click_function=\"greeneryStandardProject\",tooltip=\"Place a greenery tile\"},\n{click_function=\"oceanStandardProject\",tooltip=\"Place one ocean\"},\n{click_function=\"temperatureStandardProject\",tooltip=\"Increase temperature one step\"},\n{click_function=\"energyStandardProject\",tooltip=\"Increase energy production by one\"},\n{click_function=\"sellPatentsStandardProject\",tooltip=\"Discard all cards in your first hand and gain 1 ME for each card discarded.\"},}\n}\nstandardProjectTileData.venus={\nimageUrl=\"http://cloud-3.steamusercontent.com/ugc/1751317853416867099/0C2B51F5891F5A07B7BCCC2C9DA4D3726B422C28/\",\nbuttons={{click_function=\"cityStandardProject\",tooltip=\"Place a city tile\"},\n{click_function=\"greeneryStandardProject\",tooltip=\"Place a greenery tile\"},\n{click_function=\"oceanStandardProject\",tooltip=\"Place one ocean\"},\n{click_function=\"airScrappingStandardProject\",tooltip=\"Increase Venus TF by one step\"},\n{click_function=\"temperatureStandardProject\",tooltip=\"Increase temperature one step\"},\n{click_function=\"energyStandardProject\",tooltip=\"Increase energy production by one\"},\n{click_function=\"sellPatentsStandardProject\",tooltip=\"Discard all cards in your first hand and gain 1 ME for each card discarded.\"},}\n}\nstandardProjectTileData.colonies={\nimageUrl=\"http://cloud-3.steamusercontent.com/ugc/1751317853416866893/7F5738084407BF2AADEBEAFBA38EB6FB04C2AC1B/\",\nbuttons={{click_function=\"cityStandardProject\",tooltip=\"Place a city tile\"},\n{click_function=\"greeneryStandardProject\",tooltip=\"Place a greenery tile\"},\n{click_function=\"oceanStandardProject\",tooltip=\"Place one ocean\"},\n{click_function=\"colonyStandardProject\",tooltip=\"Place one colony marker\"},\n{click_function=\"temperatureStandardProject\",tooltip=\"Increase temperature one step\"},\n{click_function=\"energyStandardProject\",tooltip=\"Increase energy production by one\"},\n{click_function=\"sellPatentsStandardProject\",tooltip=\"Discard all cards in your first hand and gain 1 ME for each card discarded.\"},}\n}\nstandardProjectTileData.venusAndColonies={\nimageUrl=\"http://cloud-3.steamusercontent.com/ugc/1751317853416867310/87C7F0846CFC9BB72A3B5DC84FDE7C30B82E68FD/\",\nbuttons={{click_function=\"cityStandardProject\",tooltip=\"Place a city tile\"},\n{click_function=\"greeneryStandardProject\",tooltip=\"Place a greenery tile\"},\n{click_function=\"oceanStandardProject\",tooltip=\"Place one ocean\"},\n{click_function=\"colonyStandardProject\",tooltip=\"Place one colony marker\"},\n{click_function=\"airScrappingStandardProject\",tooltip=\"Increase Venus TF by one step\"},\n{click_function=\"temperatureStandardProject\",tooltip=\"Increase temperature one step\"},\n{click_function=\"energyStandardProject\",tooltip=\"Increase energy production by one\"},\n{click_function=\"sellPatentsStandardProject\",tooltip=\"Discard all cards in your first hand and gain 1 ME for each card discarded.\"},}\n}\nstandardProjectTileData.venusPhaseTwo={\nimageUrl=\"http://cloud-3.steamusercontent.com/ugc/1751317853416866524/68156279060D4273995D24C4020CA50690395D58/\",\nbuttons={{click_function=\"venusHabitatStandardProject\",tooltip=\"Place a venus habitat tile on venus and increase Venus TF (any floaters on cards are worth 3 ME)\"},\n{click_function=\"cityStandardProject\",tooltip=\"Place a city tile\"},\n{click_function=\"greeneryStandardProject\",tooltip=\"Place a greenery tile\"},\n{click_function=\"gasMineStandardProject\",tooltip=\"Place a gas mine tile on venus and increase Venus TF (any floaters on cards are worth 3 ME)\"},\n{click_function=\"floatingArrayStandardProject\",tooltip=\"Place a floating array tile on venus and increase Venus TF (any floaters on cards are worth 3 ME)\"},\n{click_function=\"oceanStandardProject\",tooltip=\"Place one ocean\"},\n{click_function=\"colonyStandardProject\",tooltip=\"Place one colony marker\"},\n{click_function=\"airScrappingStandardProject\",tooltip=\"Increase Venus TF by one step\"},\n{click_function=\"temperatureStandardProject\",tooltip=\"Increase temperature one step\"},\n{click_function=\"energyStandardProject\",tooltip=\"Increase energy production by one\"},\n{click_function=\"sellPatentsStandardProject\",tooltip=\"Discard all cards in your first hand and gain 1 ME for each card discarded.\"},}\n}","n24":"loggingModes={\nexception=\"exception\",\nessential=\"essential\",\nimportant=\"important\",\ndetail=\"detail\",\nunimportant=\"unimportant\",\ndebugging=\"debugging\",\n}\nloggingRules={\n{name=\"Silent\",modes={loggingModes.exception}},\n{name=\"Essential\",modes={loggingModes.exception,loggingModes.essential}},\n{name=\"Important\",modes={loggingModes.exception,loggingModes.essential,loggingModes.important}},\n{name=\"Detail\",modes={loggingModes.exception,loggingModes.essential,loggingModes.important,loggingModes.detail}},\n{name=\"Everything\",modes={loggingModes.exception,loggingModes.essential,loggingModes.important,loggingModes.detail,loggingModes.unimportant}},\n{name=\"Debugging\",modes={loggingModes.exception,loggingModes.essential,loggingModes.important,loggingModes.detail,loggingModes.unimportant,loggingModes.debugging}},\n}","n25":"programableActionTokenData={}\nprogramableActionTokenData.types={\ntradeToken=\"tradeToken\",\ncolonyTrackUp=\"colonyTrackUp\",\ncolonyTrackDown=\"colonyTrackDown\",\naresProductionMalus=\"aresProductionMalus\",\nbutterflyEffectToken=\"butterflyEffectToken\",\nmakeTileIndestructibleToken=\"makeTileIndestructibleToken\",\n}","n26":"expansionCrossoverCards={}\nexpansionCrossoverCards.pathfinderProjects={}\nexpansionCrossoverCards.pathfinderProjects.turmoil={\n\"f8a042\",\"3720fa\",\"ae9499\",\"70d2be\",\"4bec9b\",\"45f122\"\n}\nexpansionCrossoverCards.pathfinderProjects.venus={\n\"cf31e6\"\n}\nexpansionCrossoverCards.pathfinderProjects.colonies={\n\"2921b5\",\"70ad9b\",\"04041d\"\n}\nexpansionCrossoverCards.pathfinderPreludes={}\nexpansionCrossoverCards.pathfinderPreludes.venus={\n\"1b0ef1\",\"1b0ee5\"\n}\nexpansionCrossoverCards.pathfinderPreludes.colonies={\n\"1b0eef\",\"1b0ef0\"\n}\nexpansionCrossoverCards.pathfinderCorps={}\nexpansionCrossoverCards.pathfinderCorps.venus={\n\"e91b1d\",\"8bacee\"\n}\nexpansionCrossoverCards.ares={}\nexpansionCrossoverCards.ares.projects={}\nexpansionCrossoverCards.ares.projects.baseGameReplacements={\n\"d6508f\",\"edfac2\",\"990ff3\",\"886f23\",\"68b260\",\"98870f\",\"f14441\",\"e253f2\",\"e7d192\",\"3dbf55\",\"a789cf\"\n}\nexpansionCrossoverCards.solaris={}\nexpansionCrossoverCards.solaris.projects={}\nexpansionCrossoverCards.solaris.projects.removeCards={\n\"519963\",\"5f49a3\",\"40cf1d\",\"46b000\",\"88674f\",\"d95a03\",\"6e9cec\",\"2712b0\",\"f1a299\"\n}","n27":"awardData={}\nawardData.infos={\nLandlord={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026326592/8108E35BBC547D86C498B025F2A7FD6BDD783207/\",\ndescription=\"Most owned tiles (space cities are counted as well).\\n:Award:\",\ntooltip=\"Click to sponsor the 'Landlord' award.\\nMost owned tiles (space cities are counted as well).\",\nname=\"Landlord\"},\nBanker={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026326060/878CC2D06E56EBD70D7DE4CCED507C7CA60AC9F4/\",\ndescription=\"Highest ME production.\\n:Award:\",\ntooltip=\"Click to sponsor the 'Banker' award.\\nHighest ME production.\",\nname=\"Banker\"},\nScientist={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026325704/477B3E519ADBF5B6446E2F61F0B5A03EA0F4ABF2/\",\ndescription=\"Most sciene tags in play.\\n:Award:\",\ntooltip=\"Click to sponsor the 'Scientist' award.\\nMost sciene tags in play (wild card tags and science tags on event cards do not count).\",\nname=\"Scientist\"},\nThermalist={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026325293/C60C0DF3CBDAD2EDBAB650D30FD7F845CF86593B/\",\ndescription=\"Most heat in storage.\\n:Award:\",\ntooltip=\"Click to sponsor the 'Thermalist' award.\\nMost heat in storage.\",\nname=\"Thermalist\"},\nMiner={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026324520/8894263603EACCF9AC25416D747EA30FA771CCC6/\",\ndescription=\"Most steel and titanium in storage.\\n:Award:\",\ntooltip=\"Click to sponsor the 'Miner' award.\\nMost steel and titanium in storage.\",\nname=\"Miner\"},\nCultivator={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026323559/3C7F681438875824BEC716EFFDDF88C7B068F178/\",\ndescription=\"Most greeneries in play.\\n:Award:\",\ntooltip=\"Click to sponsor the 'Cultivator' award.\\nMost greeneries in play.\",\nname=\"Cultivator\"},\nMagnate={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026323071/43F3CF36E658F6CC150FC9B9E755C2223201780E/\",\ndescription=\"Most green cards in play.\\n:Award:\",\ntooltip=\"Click to sponsor the 'Magnate' award.\\nMost green cards in play.\",\nname=\"Magnate\"},\nSpaceBaron={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026322524/D116F8452F28F1765C463B71F13DEF0C53A2BC26/\",\ndescription=\"Most space tags in play (events with a space tag do not count).\\n:Award:\",\ntooltip=\"Click to sponsor the 'Space Baron' award.\\nMost space tags in play (wild card tags and events with a space tag do not count).\",\nname=\"Space Baron\"},\nExcentric={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026321870/4FF1F89DC7B4CEB32F8E0DE3227F34C29348311A/\",\ndescription=\"Most card resources (Floaters,Animals,Microbes,etc.).\\n:Award:\",\ntooltip=\"Click to sponsor the 'Excentric' award.\\nMost card resources (Floaters,Animals,Microbes,etc.).\",\nname=\"Excentric\"},\nContractor={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026321267/90C98013D369DFE46E8C90D240D88E6F58C30FF3/\",\ndescription=\"Most building tags in play (events with a building tag do not count).\\n:Award:\",\ntooltip=\"Click to sponsor the 'Contractor' award.\\nMost building tags in play (wild card tags and events with a building tag do not count).\",\nname=\"Contractor\"},\nCelebrity={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026320789/C6F80887CC2F89F82603DD2EB42D0850449F3542/\",\ndescription=\"Most cards which have a base cost of 20 or more (events that cost 20 or more do not count).\\n:Award:\",\ntooltip=\"Click to sponsor the 'Celebrity' award.\\nMost cards which have a base cost of 20 or more (events that cost 20 or more do not count).\",\nname=\"Celebrity\"},\nIndustrialist={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026320271/1DE8E97B3FD9A859D78B3B20974DA97C3AE07DC5/\",\ndescription=\"Most steel and energy in storage.\\n:Award:\",\ntooltip=\"Click to sponsor the 'Industrialist' award.\\nMost steel and energy in storage.\",\nname=\"Industrialist\"},\nDesertSettler={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026319581/26011501113C7E67A4678507EA532FFE803B71D2/\",\ndescription=\"Most owned tiles on the 4 most southern map rows.\\n:Award:\",\ntooltip=\"Click to sponsor the 'Desert Settler' award.\\nMost owned tiles on the 4 most southern map rows.\",\nname=\"Desert Settler\"},\nEstateDealer={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026319112/B53DE6005B6E509AB570B87ACCA58F3435A6B8C3/\",\ndescription=\"Most owned tiles adjacent to ocean tiles.\\n:Award:\",\ntooltip=\"Click to sponsor the 'Estate Dealer' award.\\nMost owned tiles adjacent to ocean tiles.\",\nname=\"Estate Dealer\"},\nBenefactor={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026318525/354EF8256333282CDF77EE217F79AACD958D727D/\",\ndescription=\"Highest terraforming rating.\\n:Award:\",\ntooltip=\"Click to sponsor the 'Benefactor' award.\\nHighest terraforming rating.\",\nname=\"Benefactor\"},\nCosmicSettler={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026317905/3E5E7A2ACD9C797D893CDC0F0130AD460B55E3D5/\",\ndescription=\"Most city tiles in space.\\n:Award:\",\ntooltip=\"Click to sponsor the 'Cosmic Settler' award.\\nMost city tiles in space.\",\nname=\"Cosmic Settler\",\nexpansions={\"pathfinders\"}},\nBotanist={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026317421/3B8EEF4F114F27E31F86DFCBEF8116897A03367B/\",\ndescription=\"Highest plant production.\\n:Award:\",\ntooltip=\"Click to sponsor the 'Botanist' award.\\nHighest plant production.\",\nname=\"Botanist\",\nexpansions={\"pathfinders\"}},\nCoordinator={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026316689/3F39E1FBD6519FACACBD64B125E500E065231D98/\",\ndescription=\"Most events played.\\n:Award:\",\ntooltip=\"Click to sponsor the 'Coordinator' award.\\nMost events played.\",\nname=\"Coordinator\",\nexpansions={\"pathfinders\"}},\nZoologist={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026316112/71A184D4B3A25F23D1BF226429D2BFC10C87C17D/\",\ndescription=\"Most animal card resources.\\n:Award:\",\ntooltip=\"Click to sponsor the 'Zoologist' award.\\nMost animal card resources.\",\nname=\"Zoologist\",\nexpansions={\"pathfinders\"}},\nManufacturer={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970118026304099/F23F6CAA6418D67FB5A80F8BD2FC74C9C03152C4/\",\ndescription=\"Most blue cards.\\n:Award:\",\ntooltip=\"Click to sponsor the 'Manufacturer' award.\\nMost blue cards.\",\nname=\"Manufacturer\",\nexpansions={\"pathfinders\"}},\nVenuphile={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276163811/3FB78672EE3677EDE6947003D5E17A925E27A5F7/\",\ndescription=\"Most owned Venus tags in play.\\n:Award:\",\ntooltip=\"Click to sponsor the 'Venuphile' award.\\nMost Venus tags (events with a Venus tag do not count).\",\nname=\"Venuphile\",\nexpansions={\"venus\"}}\n}\nawardData.sets={{\"Landlord\",\"Banker\",\"Scientist\",\"Thermalist\",\"Miner\"},\n{\"Cultivator\",\"Magnate\",\"SpaceBaron\",\"Excentric\",\"Contractor\"},\n{\"Celebrity\",\"Industrialist\",\"DesertSettler\",\"EstateDealer\",\"Benefactor\"},\n{\"CosmicSettler\",\"Botanist\",\"Coordinator\",\"Zoologist\",\"Manufacturer\"}}\nawardData.tiles={\n{position={2.32,1.07,-12.09},guid=\"ca6fe0\"},\n{position={5.42,1.07,-12.09},guid=\"ca6fdf\"},\n{position={8.52,1.07,-12.09},guid=\"ca6fde\"},\n{position={11.62,1.07,-12.09},guid=\"ca6fdd\"},\n{position={14.72,1.07,-12.09},guid=\"ca6fdc\"},\n}\nawardData.costTable={\n{-8,-14,-20,},\n{-8,-12,-16,-20},\n{-8,-11,-14,-17,-20}\n}\nawardData.images={\n\"http://cloud-3.steamusercontent.com/ugc/1691647690039309315/EE4D0DE9CC12A100DC2DB88DAB857934462A631F/\",\n\"http://cloud-3.steamusercontent.com/ugc/1691647690039309592/22C1EC78B1A374AF571A720E6B9441EEFC8DC5D7/\",\n\"http://cloud-3.steamusercontent.com/ugc/1691647690039309967/1BA061386CDA9CCDB2B258D3AE2AFDA80E2F1699/\"\n}\nawardData.getAwardInfoByName=function(name)\nfor key,info in pairs(awardData.infos) do\nif key==name then\nreturn info\nend\nend\nend","n28":"timerData={}\ntimerData.timeoutActions={\n\"endTurn\",\n\"doNothing\",\n\"giveNegativeVPs\",\n}","n29":"globalParameters={}\r\nglobalParameters.temperature={\r\nstartTransform={pos={-0.525,0.325,-3.075},rot={0,315,0}},\r\nfinalTransform={pos={-0.525,0.325,3.075},rot={0,225,0}},\r\ntrackRotation={0,180,0},\r\nbonusMarkerOffset={-0.45,0.0,0},\r\nobjectGuid=\"420ec7\",\r\nmarkerGuid=\"f1bfac\"\r\n}\r\nglobalParameters.temperature.mappings={\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1755812632524119091/69D8DEA32C672C5ABFA9D6959D8A10538EA6C269/\",\r\nsteps={-30,-28,-26,-24,-22,-20,-18,-16,-14,-12,-10,-8,-6,-4,-2,0,2,4,6,8}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1755812632524118123/28E635F51540A7E4D70B0822031DBF7C9CEAFD2A/\",\r\nsteps={-30,-28,-26,-24,-22,-20,-18,-16,-14,-13,-12,-11,-10,-9,-8,-6,-4,-2,0,2,4,6,8}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1755812632524117190/389C3CAADD75C5F427D707C5C7D22274B4DE9E63/\",\r\nsteps={-30,-28,-26,-24,-22,-20,-18,-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-4,-2,0,2,4,6,8}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1755812632524115147/E4EE3281B4275D23D187C51948BA778FEBE06D54/\",\r\nsteps={-30,-28,-26,-24,-22,-20,-18,-17,-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-2,0,2,4,6,8}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1755812632524112802/EB10CC842CFA077C8FC73A073B5D4511A6A6A3BC/\",\r\nsteps={-30,-28,-26,-24,-22,-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,0,2,4,6,8}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1755812632524113944/90370B3674235D9ACCD05599CB7DFE24A56BED22/\",\r\nsteps={-30,-28,-26,-24,-22,-21,-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,2,4,6,8}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1755812632524110449/8A24171589ACA18A140D0D600BCE3F8CD7F881C7/\",\r\nsteps={-30,-28,-26,-24,-23,-22,-21,-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,4,6,8}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1755812632524109265/11D5FF733CCB5781BABBD680AF1D1C556E972036/\",\r\nsteps={-30,-28,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10,-9,-8,\r\n-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,6,8}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1755812632524107957/3D4F696C75615798F03430B14769399CCA7AB1A7/\",\r\nsteps={-30,-28,-27,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10,-9,\r\n-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,8}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1755812632524107012/295CB87A763310B82895EDF9318D08942021E6A6/\",\r\nsteps={-30,-29,-28,-27,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10,\r\n-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1755812632524089315/2E803F52CBAA3FBBE38C777E6732900C1591D033/\",\r\nsteps={-30,-29,-28,-27,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10,\r\n-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10}},\r\n}\r\nglobalParameters.temperature.bonus={\r\n{\r\n{activationEffects={productionValues={Heat=1}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164276077007702/B1992DF97C4B4CD0723D55626D073A9BF62F63F8/\" ,value=-24},\r\n{activationEffects={productionValues={Heat=1}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164276077007702/B1992DF97C4B4CD0723D55626D073A9BF62F63F8/\" ,value=-20},\r\n{activationEffects={effects={\"Ocean\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164276077007797/537986DC839C7A0BFD80CE6C49EBB791688A4A40/\" ,value=0},\r\n},\r\n}\r\nglobalParameters.temperature.ares={\r\n{\r\n{activationEffects={effects={\"FlipErosions\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1751317611193585913/BAD154E4C994399FB22066B7B3510E5B666453AB/\",value=-4,type=\"hazard\"}},\r\n{\r\n{activationEffects={effects={\"RandomDuststorm\"}},imageUrl=\"\",value=-16},\r\n{activationEffects={effects={\"RandomDuststorm\"}},imageUrl=\"\",value=-6},\r\n},\r\n}\r\nglobalParameters.temperature.buttons={\r\nincreaseTemp={\r\nclick_function='increaseTempButtonClick',\r\nlabel='+',\r\nfunction_owner=self,\r\nposition={-0.15,0,-3.35},\r\nrotation={0,0,0},\r\nwidth=800,\r\nheight=400,\r\nfont_size=550,\r\nscale={0.2,0.2,0.2},\r\ncolor={255/255,115/255,0}},\r\ndecreaseTemp={\r\nclick_function='decreaseTempButtonClick',\r\nlabel='-',\r\nfunction_owner=self,\r\nposition={-0.15,0,3.35},\r\nrotation={0,0,0},\r\nwidth=800,\r\nheight=400,\r\nfont_size=550,\r\nscale={0.2,0.2,0.2},\r\ncolor={255/255,166/255,106/255}\r\n}\r\n}\r\nglobalParameters.oxygen={\r\nstartTransform={pos={0.525,0.325,-3.075},rot={0,45,0}},\r\nfinalTransform={pos={0.525,0.325,3.075},rot={0,135,0}},\r\ntrackRotation={0,180,0},\r\nbonusMarkerOffset={-0.45,0.0,0},\r\nobjectGuid=\"76f704\",\r\nmarkerGuid=\"ca3d95\",\r\n}\r\nglobalParameters.oxygen.mappings={\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1752435791408246917/FCE9C51AD3937C21FB4C1161EAE1CEC1543D79C5/\",\r\nsteps={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691647550721632800/4F96DD2BDBA5965C95C93C21514D55A6D4C69AB0/\",\r\nsteps={0,1,2,3,4,5,6,6.5,7,7.5,8,9,10,11,12,13,14}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691647550721633099/7667CE9F992A02E94E9C28A94B6EBB21717B9F17/\",\r\nsteps={0,1,2,3,4,5,5.5,6,6.5,7,7.5,8,8.5,9,10,11,12,13,14}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691647550721633348/8441D6A37FCC76B597A5073476D8195CCFB26DE3/\",\r\nsteps={0,1,2,3,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5,10,11,12,13,14}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691647550721633598/53B3D5312F63EEF1F3AE83D2CD8E7BA951AB780A/\",\r\nsteps={0,1,2,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5,10,10.5,11,12,13,14}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691647550721633916/6765E0B0D0C45895873D05F8336326CEEC4F2230/\",\r\nsteps={0,1,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5,10,10.5,11,11.5,12,13,14}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691647550721634079/E386AFC9A0274FA0808365ADCCB2B4B8C227749F/\",\r\nsteps={0,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5,10,10.5,11,11.5,12,12.5,13,14}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691647550721634462/B80724A6C0ABA2694B8F31BF9D658D70DB1B6149/\",\r\nsteps={0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5,10,10.5,11,11.5,12,12.5,13,13.5,14}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691647550721634865/9AA380A99FE419B0BA6B60482120191A10539634/\",\r\nsteps={0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5,10,10.5,11,11.5,12,12.5,13,13.5,14,14.5,15}},\r\n}\r\nglobalParameters.oxygen.bonus={\r\n{\r\n{activationEffects={effects={\"Temp\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164276077007880/349C51FC62734F704F6DACFCB35B44D1810D920C/\",value=8},\r\n}\r\n}\r\nglobalParameters.oxygen.ares={\r\n{\r\n{activationEffects={effects={\"FlipDuststorms\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1751317611193585460/8AE90EFF2F79C50122595B2231F1D351A8AD8FC5/\",value=5,type=\"hazard\"}},\r\n{\r\n{activationEffects={effects={\"RandomErosion\"}},imageUrl=\"\",value=4},\r\n{activationEffects={effects={\"RandomErosion\"}},imageUrl=\"\",value=12}\r\n}\r\n}\r\nglobalParameters.oxygen.buttons={\r\nincreaseO2={\r\nclick_function='increaseO2ButtonClick',\r\nlabel='+',\r\nfunction_owner=self,\r\nposition={0.15,0,-3.35},\r\nrotation={0,0,0},\r\nwidth=800,\r\nheight=400,\r\nfont_size=550,\r\nscale={0.2,0.2,0.2},\r\ncolor={255/255,115/255,0}},\r\ndecreaseO2={\r\nclick_function='decreaseO2ButtonClick',\r\nlabel='-',\r\nfunction_owner=self,\r\nposition={0.15,0,3.35},\r\nrotation={0,0,0},\r\nwidth=800,\r\nheight=400,\r\nfont_size=550,\r\nscale={0.2,0.2,0.2},\r\ncolor={255/255,166/255,106/255}\r\n}\r\n}\r\nglobalParameters.venus={\r\nstartTransform={pos={0.22,0.325,-4.2},rot={0,77,0}},\r\nfinalTransform={pos={0.22,0.325,4.2},rot={0,103,0}},\r\ntrackRotation={0,270,0},\r\nbonusMarkerOffset={-0.8,0.0,0},\r\nobjectGuid=\"59dd23\",\r\nmarkerGuid=\"ca3d97\"\r\n}\r\nglobalParameters.venus.mappings={\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1800854953427114347/200C0B3A238B2427EBA8A7F5BF26C18FC4957CC3/\",\r\nsteps={0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30},\r\nid=\"default\"},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1751317853416523147/96BF19F861F1F1A46ABA503234FA1FA4C71D338F/\",\r\nsteps={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30},\r\nid=\"venusPhaseTwo\"}\r\n}\r\nglobalParameters.venus.bonus={\r\n{\r\n{activationEffects={effects={\"DrawCard\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1750191221387707923/F86585C954C7DA2DFE60BA6DC146405442EAFEB4/\",value=8},\r\n{activationEffects={effects={\"TR\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164276077007954/2D2DEB510B43987AAAD2D04C4F4FAA13C4B47F04/\",value=16},\r\n},\r\n{\r\n{value=2,activationEffects={effects={\"Floater\",\"ResourceWildCardToken\"},effectsOthers={\"ResourceWildCardToken\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164276077008045/9AD5145286D187BBBEACC5BC0E8CDA778014E47D/\"},\r\n{value=4,activationEffects={effects={\"DrawCard\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164276077007541/03DF85B11E3C964528B8A31DE0FFBF33E264FB23/\"},\r\n{value=8,activationEffects={effects={\"TR\",\"DrawCard\",\"OthersDrawCard\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164276077008119/7441A3538CDD0783CD23D4B0C234D7DA9281DE3F/\"},\r\n{value=10,activationEffects={effects={\"Floater\",\"Floater\",\"Floater\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164276077008203/EB8D4C1EC6D4ADE303AD90BD204E14CED4BDBC12/\"},\r\n{value=14,activationEffects={effects={\"ResourceWildCardToken\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164276077008288/495E4440ACDA0E1CE317494A7D9AA4FF59BDBABF/\"},\r\n{value=16,activationEffects={effects={\"ResourceWildCardToken\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164276077008288/495E4440ACDA0E1CE317494A7D9AA4FF59BDBABF/\"},\r\n{value=18,activationEffects={effects={\"Colony\"},resourceValuesOthers={Credits=5}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164276077173886/0FF30BCA4B23B305672AFA0B0032D097B187218B/\"},\r\n{value=20,activationEffects={effects={\"ResourceWildCardToken\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164276077008288/495E4440ACDA0E1CE317494A7D9AA4FF59BDBABF/\"},\r\n{value=22,activationEffects={effects={\"ResourceWildCardToken\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164276077008288/495E4440ACDA0E1CE317494A7D9AA4FF59BDBABF/\"},\r\n{value=24,activationEffects={effects={\"ResourceWildCardToken\",\"DrawCard\",\"OthersDrawCard\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164276077008377/B771A578D974BC88FAACC006501B2FEEC2C70075/\"},\r\n{value=26,activationEffects={effects={\"ResourceWildCardToken\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164276077008288/495E4440ACDA0E1CE317494A7D9AA4FF59BDBABF/\"},\r\n{value=28,activationEffects={effects={\"ResourceWildCardToken\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164276077008288/495E4440ACDA0E1CE317494A7D9AA4FF59BDBABF/\"},\r\n{value=30,activationEffects={effects={\"ResourceWildCardToken\",\"WildCardToken\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164276077008472/5FAAA8C4DA5FC27EAC9E9349D8D3E667E6DA151A/\"},\r\n},\r\n}\r\nglobalParameters.venus.buttons={\r\nincreaseVenus={\r\nclick_function='increaseVenusButtonClick',\r\nlabel='+',\r\nfunction_owner=self,\r\nposition={4.95,0,0.275},\r\nrotation={0,105,0},\r\nwidth=800,\r\nheight=500,\r\nfont_size=550,\r\nscale={0.35,0.35,0.35},\r\ncolor={255/255,115/255,0}},\r\ndecreaseVenus={\r\nclick_function='decreaseVenusButtonClick',\r\nlabel='-',\r\nfunction_owner=self,\r\nposition={-4.95,0,0.275},\r\nrotation={0,75,0},\r\nwidth=800,\r\nheight=500,\r\nfont_size=550,\r\nscale={0.35,0.35,0.35},\r\ncolor={255/255,166/255,106/255}\r\n}\r\n}\r\nglobalParameters.ocean={\r\nstartTransform={pos={0.525,0.325,-3.00},rot={0,45,0}},\r\nfinalTransform={pos={0.525,0.325,3.00},rot={0,135,0}},\r\ntrackRotation={0,270,0},\r\nbonusMarkerOffset={-0.5,0.0,0},\r\nobjectGuid=\"cf4f00\",\r\nmarkerGuid=\"ca3d96\"\r\n}\r\nglobalParameters.ocean.mappings={\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691647719961516971/F4E568B809E452574298B371B3D9B491C7A4C8D4/\",\r\nsteps={0,1,2,3,4,5,6,7,8,9}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691647719961517167/90689BBAA2631A17FFAC13B2265F19A32CEEA209/\",\r\nsteps={0,1,2,3,4,5,6,7,8,9,10}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691647719961517350/238840B43982DA781452ED1FD90EFDD1F46A4EC7/\",\r\nsteps={0,1,2,3,4,5,6,7,8,9,10,11}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691647719961517495/6BB0544FFFA177563D46E5514BBEA7FF8EDD3D7C/\",\r\nsteps={0,1,2,3,4,5,6,7,8,9,10,11,12}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691647719961517686/C60AEB01F5DD54C7822B1EFD3731EEC5697EDEF3/\",\r\nsteps={0,1,2,3,4,5,6,7,8,9,10,11,12,13}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691647719961517924/1ED2BB10570693DBB6C79C80993E471C2F918149/\",\r\nsteps={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691647719961518132/24A4E8925CCCB38357F589398FCF5620B066F71A/\",\r\nsteps={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691647719961518401/0A505400457F4008DA9DFA33623A720D8A8489DC/\",\r\nsteps={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19}},\r\n{imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691647719961518615/830A679834DFB54F711C74153C9DB4FD2757D51C/\",\r\nsteps={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21}}\r\n}\r\nglobalParameters.ocean.bonus={\r\n{}\r\n}\r\nglobalParameters.ocean.ares={\r\n{\r\n{activationEffects={effects={\"PlaceTwoErosions\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1751317611193786619/7D6A39A9C04A5CBC33A8EA508D73DD64E8AC7A07/\",value=3,type=\"hazard\"},\r\n{activationEffects={effects={\"RemoveAllDuststorms\",\"TR\"}},imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1751317611193586533/1A5444BB36471DCB8C0A3F624663F6EA84798FCF/\",value=6}\r\n}\r\n}\r\n-- offset=vectorHelpers.scaleVectorByVector({0,0.325,4.425},tempToken.getScale())\r","n30":"boardgameTileProperties={\nallExpansions={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1751317900889200914/1257B74A0D524D73BBB0F630A00B813E2F511605/\"},\nwithoutPathfinders={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1751317900889203890/963A74F96CDCB80DB4C87117C570EE7C81810E72/\"},\nbaseGame={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1751317900889206465/F21F964D784242CF88FD6F3E64E9F85A442F34B8/\"}\n}","n31":"turmoilPartyData={}\nturmoilPartyData.defaultConfig={\nstartingPartyId=\"Greens\",\nparties={\"MarsFirst\",\"Scientists\",\"Unity\",\"Greens\",\"Reds\",\"Kelvinists\"}\n}\nturmoilPartyData.parties={\nMarsFirst={\nid=\"MarsFirst\",\ntileImageUrl=\"http://cloud-3.steamusercontent.com/ugc/1007062784836152030/15C66E2D9CBF82F1B51A31908FBFC8BAE293ADDF/\",\nonFactionTakesOver=\nfunction(players)\nfor _,player in pairs(players) do\nlocal amount=player.tagSystem.tagCounts[\"Building\"]\nlogging.printToAll(\"Player \"..player.color..\" got \"..amount..\" credit(s) from the Mars First party.\")\nchangePlayerResource({playerColor=player.color,resourceType=\"credits\",resourceAmount=amount})\nend\nend,\npolicyBonus={\nfriendlyName=\"Mars First agenda\",\nactionProperties={noAction=true,resourceValues={Steel=1}},\noneTimeEffect=false,\ntriggerTypes={\neventData.triggerType.marsCityPlayed,\neventData.triggerType.specialTilePlayed,\neventData.triggerType.greeneryPlayed,\neventData.triggerType.oceanPlayed,\n},\nallowedPhases={\nphases.generationPhase\n}\n}\n},\nScientists={\nid=\"Scientists\",\ntileImageUrl=\"http://cloud-3.steamusercontent.com/ugc/1007062784835833619/BEF61D321F5ECC05A07BB0D154AD400167761422/\",\nonFactionTakesOver=\nfunction(players)\nfor _,player in pairs(players) do\nlocal amount=player.tagSystem.tagCounts[\"Science\"]\nlogging.printToAll(\"Player \"..player.color..\" got \"..amount..\" credit(s) from the Scientists party.\")\nchangePlayerResource({playerColor=player.color,resourceType=\"credits\",resourceAmount=amount})\nend\nend,\npolicyBonus={\nfriendlyName=\"Scientists special project\",\nactionProperties={resourceValues={Credits=-10},effects={\"DrawCard\",\"DrawCard\",\"DrawCard\"}},\noneTimeEffect=true,\ntriggerTypes={},\nallowedPhases={}\n}\n},\nUnity={\nid=\"Unity\",\ntileImageUrl=\"http://cloud-3.steamusercontent.com/ugc/1007062572075999010/11AB480205C1C67846FFD6F834945292D7DD2EA4/\",\nonFactionTakesOver=\nfunction(players)\nfor _,player in pairs(players) do\nlocal tagCount=player.tagSystem.tagCounts[\"Earth\"]\ntagCount=tagCount + player.tagSystem.tagCounts[\"Venus\"]\ntagCount=tagCount + player.tagSystem.tagCounts[\"Jovian\"]\nif player.tagSystem.tagCounts[\"Mars\"]~=nil then\ntagCount=tagCount + player.tagSystem.tagCounts[\"Mars\"]\nend\nlogging.printToAll(\"Player \"..player.color..\" got \"..tagCount..\" credit(s) from the Unity party.\")\nchangePlayerResource({playerColor=player.color,resourceType=\"credits\",resourceAmount=tagCount})\nend\nend,\nonRulingPartyChanged=function(newRulingParty,players)\nlocal delta=1\nif newRulingParty.partyId~=\"Unity\" then\ndelta=-1\nend\nfor _,player in pairs(players) do\npaymentSystem_updateConversionRate({playerColor=player.color,resourceType=\"Titanium\",delta=delta})\nend\nend,\npolicyBonus={}\n},\nGreens={\nid=\"Greens\",\ntileImageUrl=\"http://cloud-3.steamusercontent.com/ugc/1007062572076148666/64B835574371543BFE02FD711ABA5CE68446BC23/\",\nonFactionTakesOver=\nfunction(players)\nfor _,player in pairs(players) do\nlocal tagCount=player.tagSystem.tagCounts[\"Microbe\"]\ntagCount=tagCount + player.tagSystem.tagCounts[\"Plant\"]\ntagCount=tagCount + player.tagSystem.tagCounts[\"Animal\"]\nlogging.printToAll(\"Player \"..player.color..\" got \"..tagCount..\" credit(s) from the Greens party.\")\nchangePlayerResource({playerColor=player.color,resourceType=\"credits\",resourceAmount=tagCount})\nend\nend,\npolicyBonus={\nfriendlyName=\"Greens agenda\",\nactionProperties={noAction=true,resourceValues={Credits=4}},\noneTimeEffect=false,\ntriggerTypes={eventData.triggerType.greeneryPlayed},\nallowedPhases={phases.generationPhase}\n}\n},\nReds={\nid=\"Reds\",\ntileImageUrl=\"http://cloud-3.steamusercontent.com/ugc/1007062572076071119/FE579E6A79A24B3F2A101189BA637BC098C4927F/\",\nonFactionTakesOver=\nfunction(players)\nlocal minTR=math.huge\nfor _,player in pairs(players) do\nif player.terraformingRating < minTR and not player.neutral then\nminTR=player.terraformingRating\nend\nend\nfor _,player in pairs(players) do\nif gameState.isSoloGame and minTR > 20 then\nreturn\nend\nif player.terraformingRating==minTR then\nlogging.printToAll(player.name..\" got 1 terrforming rating from the Reds party!\",player.color,loggingModes.essential)\nincreasePlayerTerraforming(getPlayerIndexByColor(player.color),\"of the Reds party\")\nend\nend\nend,\npolicyBonus={\nfriendlyName=\"Reds agenda\",\nactionProperties={noAction=true,resourceValues={Credits=-3}},\noneTimeEffect=false,\ntriggerTypes={eventData.triggerType.terraformingGained},\nallowedPhases={phases.generationPhase}\n},\nonPolicyActionNotAllowed=\nfunction(player)\nlogging.broadcastToAll(\n\"Player \"..player.color..\" doesn't have enough credits to satisfy the Reds agenda and doesn't gain a TR for the last action.\",\nplayer.color,\n\"essential\"\n)\nWait.frames(|| Global.call(\"decreasePlayerTRByColor\",player.color),10)\nend\n},\nKelvinists={\nid=\"Kelvinists\",\ntileImageUrl=\"http://cloud-3.steamusercontent.com/ugc/1007062822775452820/427B130AD3407BE8B24712EE6CA6B55BC62ECB9F/\",\nonFactionTakesOver=\nfunction(players)\nfor _,player in pairs(players) do\nlocal amount=getPlayerProduction({playerColor=player.color,resourceType=\"Heat\"})\nlogging.printToAll(\"Player \"..player.color..\" got \"..amount..\" credit(s) from the Kelvinists party.\")\nchangePlayerResource({playerColor=player.color,\nresourceType=\"credits\",\nresourceAmount=amount})\nend\nend,\npolicyBonus={\nfriendlyName=\"Kelvinists special project\",\nactionProperties={resourceValues={Credits=-10},productionValues={Heat=1,Energy=1}},\noneTimeEffect=false,\ntriggerTypes={},\nallowedPhases={}\n}\n}\n}","n32":"playMatButtons={}\r\nplayMatButtons.mainMat={\r\nincreaseTR={\r\nclick_function='increaseTRButtonClick',\r\nlabel='+',\r\nfunction_owner=self,\r\nposition={-1.58,0.15,-0.145},\r\nrotation={0,0,0},\r\nwidth=800,\r\nheight=400,\r\nfont_size=450,\r\nscale={0.03,0.03,0.03},\r\ncolor={255/255,115/255,0}},\r\ndecreaseTR={\r\nclick_function='decreaseTRButtonClick',\r\nlabel='-',\r\nfunction_owner=self,\r\nposition={-1.58,0.15,-0.125},\r\nrotation={0,0,0},\r\nwidth=800,\r\nheight=400,\r\nfont_size=550,\r\nscale={0.0225,0.0225,0.0225},\r\ncolor={255/255,166/255,106/255}\r\n}\r\n}\r\nplayMatButtons.tradingTile={\r\ntradeViaCredits={\r\nclick_function='tradeViaCredits',\r\ntooltip=\"Pay 9 credits to trade with a colony\",\r\nfunction_owner=Global,\r\nposition={-1.6,0.15,1.025},\r\nrotation={0,0,0},\r\nwidth=750,\r\nheight=750,\r\ncolor={0,1,0,0.5},\r\nscale={0.4,0.2,0.4},\r\n},\r\ntradeViaTitanium={\r\nclick_function='tradeViaTitanium',\r\ntooltip=\"Pay 3 titanium to trade with a colony\",\r\nfunction_owner=Global,\r\nposition={-0.7,0.15,1.025},\r\nrotation={0,0,0},\r\nwidth=750,\r\nheight=750,\r\ncolor={0,1,0,0.5},\r\nscale={0.4,0.2,0.4},\r\n},\r\ntradeViaEnergy={\r\nclick_function='tradeViaEnergy',\r\ntooltip=\"Pay 3 energy to trade with a colony\",\r\nfunction_owner=Global,\r\nposition={0.2,0.15,1.025},\r\nrotation={0,0,0},\r\nwidth=750,\r\nheight=750,\r\ncolor={0,1,0,0.5},\r\nscale={0.4,0.2,0.4},\r\n}\r\n}\r","n33":"predefinedMapSettings={}\npredefinedMapSettings.default={\nprettyName=\"Default\",\ndescription=\"The default settings.\",\nconfig={\nmapGeneratorConfig={\nmapSizeSelection=3,\ndeltaFactor=0.1,\nbonusTilesRatio=8/10,\ntotallyRandomTilesRatio=0.1,\ntileEffects={\nPlants={weighting=10,averageTileYield=1.8,yieldDiffusion=0.25,maxYield=3,seedPoints=3,shapeFactor=2,seedDistance=4},\nTitanium={weighting=2,averageTileYield=1,yieldDiffusion=0.4,maxYield=2,seedPoints=5,shapeFactor=0.6,seedDistance=4},\nSteel={weighting=5,averageTileYield=1.7,yieldDiffusion=0.25,maxYield=3,seedPoints=5,shapeFactor=0.8,seedDistance=4},\nDrawCard={weighting=3,averageTileYield=1.45,yieldDiffusion=0.25,maxYield=3,seedPoints=200,shapeFactor=0.2,seedDistance=4},\nHeat={weighting=0,averageTileYield=2,yieldDiffusion=0.5,maxYield=4,seedPoints=3,shapeFactor=2,seedDistance=4},\nEnergy={weighting=0,averageTileYield=1.5,yieldDiffusion=0.25,maxYield=4,seedPoints=2,shapeFactor=2,seedDistance=4},\nCredits={weighting=0,averageTileYield=5,yieldDiffusion=0.5,maxYield=6,seedPoints=5,shapeFactor=0.2,seedDistance=1},\nOtherEffects={weighting=0,averageTileYield=0.0,yieldDiffusion=0.0,maxYield=0,seedPoints=200,shapeFactor=0.2,seedDistance=1}},\noceanSettings={\noceanSeedPoints=4,\noceanSeedMinDistance=4,\noceanShapeFactor=1,-- values >= 1 --> bulky cluster,values < 1 --> snakey ocean lines\n},\nabsoluteTiles={\nvolcanoTiles=3,\nblockedTiles=0,-- blocked tiles give adjancency bonuses (e.g. draw 1 card,gain 1 plant,etc)\ninitialErosions=0,\ninitialDuststorms=3,\n}\n}\n}\n}\npredefinedMapSettings.firstExplorers={\nprettyName=\"First Explorers\",\ndescription=\"Lots of card draw bonuses. Besides that only few other bonsuses.\",\nconfig={\nmapGeneratorConfig={\nmapSizeSelection=3,\ndeltaFactor=0.1,\nbonusTilesRatio=16/10,\ntotallyRandomTilesRatio=0.05,\ntileEffects={\nPlants={weighting=3,averageTileYield=1.5,yieldDiffusion=0.25,maxYield=3,seedPoints=3,shapeFactor=2,seedDistance=4},\nTitanium={weighting=1,averageTileYield=1,yieldDiffusion=0.25,maxYield=2,seedPoints=5,shapeFactor=0.6,seedDistance=4},\nSteel={weighting=2,averageTileYield=1,yieldDiffusion=0.25,maxYield=3,seedPoints=5,shapeFactor=0.8,seedDistance=4},\nDrawCard={weighting=11,averageTileYield=1.8,yieldDiffusion=0.25,maxYield=3,seedPoints=5,shapeFactor=0.1,seedDistance=4},\nHeat={weighting=1,averageTileYield=1.8,yieldDiffusion=0.25,maxYield=4,seedPoints=3,shapeFactor=2,seedDistance=4},\nEnergy={weighting=0,averageTileYield=1.5,yieldDiffusion=0.5,maxYield=4,seedPoints=2,shapeFactor=2,seedDistance=4},\nCredits={weighting=0,averageTileYield=5,yieldDiffusion=0.5,maxYield=6,seedPoints=200,shapeFactor=0.2,seedDistance=1},\nOtherEffects={weighting=2,averageTileYield=0.0,yieldDiffusion=0.0,maxYield=0,seedPoints=200,shapeFactor=0.2,seedDistance=1}},\noceanSettings={\noceanSeedPoints=3,\noceanSeedMinDistance=4,\noceanShapeFactor=0.5,-- values >= 1 --> bulky cluster,values < 1 --> snakey ocean lines\n},\nabsoluteTiles={\nvolcanoTiles=4,\nblockedTiles=0,-- blocked tiles give adjancency bonuses (e.g. draw 1 card,gain 1 plant,etc)\ninitialErosions=0,\ninitialDuststorms=3,\n}\n}\n}\n}\npredefinedMapSettings.martianDesert={\nprettyName=\"Martian Desert\",\ndescription=\"Few bonus spaces at all. Also additional erosions and duststorms\"..\n\"if you play with the Ares fan expansion.\",\nconfig={\nmapGeneratorConfig={\nmapSizeSelection=3,\ndeltaFactor=0.1,\nbonusTilesRatio=1/10,\ntotallyRandomTilesRatio=0.01,\ntileEffects={\nPlants={weighting=1,averageTileYield=2,yieldDiffusion=0.5,maxYield=3,seedPoints=3,shapeFactor=2,seedDistance=4},\nTitanium={weighting=3,averageTileYield=1,yieldDiffusion=0.5,maxYield=2,seedPoints=5,shapeFactor=0.6,seedDistance=4},\nSteel={weighting=5,averageTileYield=1.7,yieldDiffusion=0.5,maxYield=3,seedPoints=5,shapeFactor=0.8,seedDistance=4},\nDrawCard={weighting=1,averageTileYield=1.5,yieldDiffusion=0.5,maxYield=3,seedPoints=5,shapeFactor=0.2,seedDistance=4},\nHeat={weighting=0,averageTileYield=2,yieldDiffusion=0.5,maxYield=4,seedPoints=3,shapeFactor=2,seedDistance=4},\nEnergy={weighting=0,averageTileYield=1.5,yieldDiffusion=0.5,maxYield=4,seedPoints=2,shapeFactor=2,seedDistance=4},\nCredits={weighting=0,averageTileYield=5,yieldDiffusion=0.5,maxYield=6,seedPoints=200,shapeFactor=0.2,seedDistance=1},\nOtherEffects={weighting=0,averageTileYield=0.0,yieldDiffusion=0.0,maxYield=0,seedPoints=200,shapeFactor=0.2,seedDistance=1}},\noceanSettings={\noceanSeedPoints=2,\noceanSeedMinDistance=4,\noceanShapeFactor=1,-- values >= 1 --> bulky cluster,values < 1 --> snakey ocean lines\n},\nabsoluteTiles={\nvolcanoTiles=4,\nblockedTiles=0,-- blocked tiles give adjancency bonuses (e.g. draw 1 card,gain 1 plant,etc)\ninitialErosions=4,\ninitialDuststorms=5,\n}\n}\n}\n}\npredefinedMapSettings.richDeposits={\nprettyName=\"Rich Deposits\",\ndescription=\"Few plants and card draw locations. Lots of high steel and titanium yield tiles. One single ocean area.\",\nconfig=\n{\nmapGeneratorConfig={\nmapSizeSelection=3,\ndeltaFactor=0.1,\nbonusTilesRatio=14/10,\ntotallyRandomTilesRatio=0.01,\ntileEffects={\nPlants={weighting=1,averageTileYield=2,yieldDiffusion=0.5,maxYield=3,seedPoints=3,shapeFactor=2,seedDistance=4},\nTitanium={weighting=10,averageTileYield=1.7,yieldDiffusion=0.5,maxYield=2,seedPoints=5,shapeFactor=0.6,seedDistance=4},\nSteel={weighting=15,averageTileYield=2.7,yieldDiffusion=0.5,maxYield=3,seedPoints=5,shapeFactor=0.8,seedDistance=4},\nDrawCard={weighting=1,averageTileYield=1.5,yieldDiffusion=0.5,maxYield=3,seedPoints=5,shapeFactor=0.2,seedDistance=4},\nHeat={weighting=0,averageTileYield=2,yieldDiffusion=0.5,maxYield=4,seedPoints=3,shapeFactor=2,seedDistance=4},\nEnergy={weighting=0,averageTileYield=1.5,yieldDiffusion=0.5,maxYield=4,seedPoints=2,shapeFactor=2,seedDistance=4},\nCredits={weighting=0,averageTileYield=5,yieldDiffusion=0.5,maxYield=6,seedPoints=200,shapeFactor=0.2,seedDistance=1},\nOtherEffects={weighting=0,averageTileYield=0.0,yieldDiffusion=0.0,maxYield=0,seedPoints=200,shapeFactor=0.2,seedDistance=1}},\noceanSettings={\noceanSeedPoints=4,\noceanSeedMinDistance=4,\noceanShapeFactor=0.5,-- values >= 1 --> bulky cluster,values < 1 --> snakey ocean lines\n},\nabsoluteTiles={\nvolcanoTiles=3,\nblockedTiles=0,-- blocked tiles give adjancency bonuses (e.g. draw 1 card,gain 1 plant,etc)\ninitialErosions=0,\ninitialDuststorms=3,\n}\n}\n}\n}\npredefinedMapSettings.fastTerraformers={\nprettyName=\"Fast Terraformers\",\ndescription=\"Lots of plants and heat bonuses. Very few card draw locations. No titanium,a bit of steel.\",\nconfig=\n{\nmapGeneratorConfig={\nmapSizeSelection=3,\ndeltaFactor=0.1,\nbonusTilesRatio=4,\ntotallyRandomTilesRatio=0.01,\ntileEffects={\nPlants={weighting=13,averageTileYield=2.5,yieldDiffusion=0.25,maxYield=3,seedPoints=3,shapeFactor=2,seedDistance=4},\nTitanium={weighting=0,averageTileYield=1,yieldDiffusion=0.5,maxYield=2,seedPoints=5,shapeFactor=0.6,seedDistance=4},\nSteel={weighting=2,averageTileYield=1.7,yieldDiffusion=0.5,maxYield=3,seedPoints=5,shapeFactor=0.8,seedDistance=4},\nDrawCard={weighting=1,averageTileYield=1.5,yieldDiffusion=0.5,maxYield=3,seedPoints=5,shapeFactor=0.2,seedDistance=4},\nHeat={weighting=13,averageTileYield=3,yieldDiffusion=0.5,maxYield=4,seedPoints=3,shapeFactor=2,seedDistance=4},\nEnergy={weighting=0,averageTileYield=1.5,yieldDiffusion=0.5,maxYield=4,seedPoints=2,shapeFactor=2,seedDistance=4},\nCredits={weighting=0,averageTileYield=5,yieldDiffusion=0.5,maxYield=6,seedPoints=200,shapeFactor=0.2,seedDistance=1},\nOtherEffects={weighting=0,averageTileYield=0.0,yieldDiffusion=0.0,maxYield=0,seedPoints=200,shapeFactor=0.2,seedDistance=1}},\noceanSettings={\noceanSeedPoints=3,\noceanSeedMinDistance=4,\noceanShapeFactor=0,-- values >= 1 --> bulky cluster,values < 1 --> snakey ocean lines\n},\nabsoluteTiles={\nvolcanoTiles=3,\nblockedTiles=0,-- blocked tiles give adjancency bonuses (e.g. draw 1 card,gain 1 plant,etc)\ninitialErosions=0,\ninitialDuststorms=3,\n}\n}\n}\n}\npredefinedMapSettings.jungleWorld={\nprettyName=\"Jungle World\",\ndescription=\"Lots of small oceans. Lots of high yield plant bonuses. Few other bonuses.\",\nconfig={\nmapGeneratorConfig={\nmapSizeSelection=3,\ndeltaFactor=0.1,\nbonusTilesRatio=16/10,\ntotallyRandomTilesRatio=0.05,\ntileEffects={\nPlants={weighting=15,averageTileYield=2.5,yieldDiffusion=0.25,maxYield=3,seedPoints=4,shapeFactor=2,seedDistance=4},\nTitanium={weighting=1,averageTileYield=1,yieldDiffusion=0.5,maxYield=2,seedPoints=5,shapeFactor=0.6,seedDistance=4},\nSteel={weighting=2,averageTileYield=1.7,yieldDiffusion=0.5,maxYield=3,seedPoints=5,shapeFactor=0.8,seedDistance=4},\nDrawCard={weighting=1,averageTileYield=1.5,yieldDiffusion=0.5,maxYield=3,seedPoints=5,shapeFactor=0.2,seedDistance=4},\nHeat={weighting=0,averageTileYield=2,yieldDiffusion=0.5,maxYield=4,seedPoints=3,shapeFactor=2,seedDistance=4},\nEnergy={weighting=0,averageTileYield=1.5,yieldDiffusion=0.5,maxYield=4,seedPoints=2,shapeFactor=2,seedDistance=4},\nCredits={weighting=0,averageTileYield=5,yieldDiffusion=0.5,maxYield=6,seedPoints=200,shapeFactor=0.2,seedDistance=1},\nOtherEffects={weighting=1,averageTileYield=0.0,yieldDiffusion=0.0,maxYield=0,seedPoints=200,shapeFactor=0.2,seedDistance=1}},\noceanSettings={\noceanSeedPoints=8,\noceanSeedMinDistance=2,\noceanShapeFactor=0,-- values >= 1 --> bulky cluster,values < 1 --> snakey ocean lines\n},\nabsoluteTiles={\nvolcanoTiles=0,\nblockedTiles=0,-- blocked tiles give adjancency bonuses (e.g. draw 1 card,gain 1 plant,etc)\ninitialErosions=0,\ninitialDuststorms=3,\n}\n}\n}\n}","n34":"draftingData={}\ndraftingData.researchPhase={}\ndraftingData.researchPhase.defaultRule={\nprettyName=\"Default\",\ntooltip=\"The day to day drafting rules for research phases after the first generation.\",\nconsiderForPayment=4,\ndraftingSteps={\n{\ncardsToDeal={projects={amount=4,targetHandIndex=1}},\nsubSteps={3,2,1}\n}\n}\n}\ndraftingData.initialResearchPhase={}\ndraftingData.initialResearchPhase.freeDraft={\nprettyName=\"Free Draft\",\ntooltip=\"Draft as you want. Default setting.\",\nconsiderForPayment=10,\nfreeDraft=true,\ndraftingSteps={\n{\ncardsToDeal={projects={amount=10,targetHandIndex=2}},\nsubSteps={{projects=0}},\n}\n}\n}\ndraftingData.initialResearchPhase.d_4_3_3={\nprettyName=\"4-3-3\",\ntooltip=\"Draft 4 out of 10 project cards and then 3 out of 6.\",\nconsiderForPayment=10,\ndraftingSteps={\n{\ncardsToDeal={projects={amount=10,targetHandIndex=2}},\nsubSteps={{projects=6},{projects=3}}\n}\n}\n}\ndraftingData.initialResearchPhase.wbc={\nprettyName=\"WBC\",\ntooltip=\"Get 5 projects,draft them one by one clockwise. Then draft 4 preludes anti-clockwise. After that draw 5 projects and draft them counter-clockwise one by one.\",\nconsiderForPayment=10,\ndraftingSteps={\n{\ncardsToDeal={projects={amount=5,targetHandIndex=1}},\nsubSteps={{projects=4},{projects=3},{projects=2},{projects=1}},\ndirectionOverride=1},\n{\ncardsToDeal={projects={amount=5,targetHandIndex=1}},\nsubSteps={{projects=4},{projects=3},{projects=2},{projects=1}},\ndirectionOverride=-1},\n{\ncardsToDeal={preludes={amount=4,targetHandIndex=1}},\nsubSteps={{preludes=3},{preludes=2},{preludes=1}},\ndirectionOverride=-1\n}\n}\n}\ndraftingData.initialResearchPhase.d_5_4P_5={\nprettyName=\"5-4P-5\",\ntooltip=\"Get 5 projects,draft them one by one clockwise. After that get 5 other projects and draft them counter-clockwise one by one.\",\nconsiderForPayment=10,\ndraftingSteps={\n{\ncardsToDeal={projects={amount=5,targetHandIndex=1}},\nsubSteps={{projects=4},{projects=3},{projects=2},{projects=1}},\ndirectionOverride=-1},\n{\ncardsToDeal={preludes={amount=4,targetHandIndex=1}},\nsubSteps={{preludes=3},{preludes=2},{preludes=1}},\ndirectionOverride=1},\n{\ncardsToDeal={projects={amount=5,targetHandIndex=1}},\nsubSteps={{projects=4},{projects=3},{projects=2},{projects=1}},\ndirectionOverride=1\n}\n}\n}","n35":"\ntp_ares={classic={},redesign={}}\r\ntp_ares.classic.erosionBag={pos={13.38,1.13,-22.41},rot={0,270,0}}\r\ntp_ares.classic.duststormBag={pos={16.20,1.13,-22.41},rot={0,270,0}}\r\ntp_ares.redesign.erosionBag={pos={13.38,1.13,-22.41},rot={0,270,0}}\r\ntp_ares.redesign.duststormBag={pos={16.20,1.13,-22.41},rot={0,270,0}}\r","n36":"tp_colonies={classic={},redesign={}}\r\ntp_colonies.classic.tradingTile={pos={37.37,1.15,-4.65},rot={0,180,0}}\r\ntp_colonies.classic.colonyTransforms={\r\n{pos={22.28,1.15,12.33},rot={0,180,0}},\r\n{pos={25.38,1.15,5.72},rot={0,180,0}},\r\n{pos={26.62,1.15,-1.10},rot={0,180,0}},\r\n{pos={26.45,1.15,-7.91},rot={0,180,0}},\r\n{pos={24.94,1.15,-14.45},rot={0,180,0}},\r\n{pos={22.43,1.15,-20.62},rot={0,180,0}},\r\n{pos={34.42,1.15,7.26},rot={0,180,0}},\r\n{pos={35.78,1.15,1.43},rot={0,180,0}},\r\n{pos={-29.18,1.15,13.38},rot={0,180,0}},\r\n}\r\ntp_colonies.classic.coloniesBagTransform={pos={29.40,-3.5,-20.60},rot={0,270,0}}\r\ntp_colonies.classic.shipBagTransform={pos={32.50,1.00,-5.25},rot={0,270,270.01}}\ntp_colonies.classic.tradeShipPositionMatrix={\r\nrowStartingOffset=-2,\r\nheightStartingOffset=0.07,\r\ncolumnStartingOffset=0,\r\nrowLength=3\r\n}\r\ntp_colonies.classic.tradeMarkerActiveOffset={0,0.32,0}\r\ntp_colonies.classic.tradeMarkerInactiveOffset={-1.5,0.32,2.00}\r\ntp_colonies.classic.tradeShipTradedOffset={-0.85,0.05,0}\r\ntp_colonies.redesign.tradingTile={pos={37.37,1.15,-4.65},rot={0,180,0}}\r\ntp_colonies.redesign.colonyTransforms={\r\n{pos={22.28,1.15,12.33},rot={0,180,0}},\r\n{pos={25.38,1.15,5.72},rot={0,180,0}},\r\n{pos={26.62,1.15,-1.10},rot={0,180,0}},\r\n{pos={26.45,1.15,-7.91},rot={0,180,0}},\r\n{pos={24.94,1.15,-14.45},rot={0,180,0}},\r\n{pos={22.43,1.15,-20.62},rot={0,180,0}},\r\n{pos={34.42,1.15,7.26},rot={0,180,0}},\r\n{pos={35.78,1.15,1.43},rot={0,180,0}},\r\n{pos={-29.18,1.15,13.38},rot={0,180,0}},\r\n}\r\ntp_colonies.redesign.coloniesBagTransform={pos={29.40,-3.5,-20.60},rot={0,270,0}}\r\ntp_colonies.redesign.shipBagTransform={pos={32.50,1.00,-5.25},rot={0,270,270.01}}\ntp_colonies.redesign.tradeShipPositionMatrix={\r\nrowStartingOffset=-2,\r\nheightStartingOffset=0.07,\r\ncolumnStartingOffset=0,\r\nrowLength=3\r\n}\r\ntp_colonies.redesign.tradeMarkerActiveOffset={0,0.32,0}\r\ntp_colonies.redesign.tradeMarkerInactiveOffset={-1.5,0.32,2.00}\r\ntp_colonies.redesign.tradeShipTradedOffset={-0.85,0.05,0}\r","n37":"tp_gameBoardAssets={classic={},redesign={}}\r\ntp_gameBoardAssets.classic.trTrackPositions={\r\nbottomLeftCorner={-42.45,1.57,-24.83},\r\ntopLeftCorner={-42.45,1.57,24.83},\r\ntopRightCorner={42.2,1.57,24.83},\r\nbottomRightCorner={42.2,1.57,-24.83},\r\n}\r\ntp_gameBoardAssets.classic.cardResourceTokensPositions={\r\nbottom={p={-1.55,1.13,-22.45},r={0,180,0}},\r\n}\r\ntp_gameBoardAssets.classic.cardResourceTokensSpacing={-1.738,0,0}\ntp_gameBoardAssets.classic.drawPile={pos={-39.10,1.29,-15.75},rot={0,0,0}}\r\ntp_gameBoardAssets.classic.discardPile={pos={-39.10,1.29,-21.25},rot={0,0,0}}\r\ntp_gameBoardAssets.classic.cardRevealTransform={pos={-47.00,1.08,-15.40},rot={0,180,0}}\r\ntp_gameBoardAssets.classic.timerTile={pos={-107.00,4.0,74.0},rot={20,0,0}}\r\ntp_gameBoardAssets.classic.awardTile={pos={0,10,0},rot={0,0,0}}\r\ntp_gameBoardAssets.classic.milestoneTile={pos={0,10,0},rot={0,0,0}}\r\ntp_gameBoardAssets.classic.standardProjectTile={pos={0,10,0},rot={0,0,0}}\r\ntp_gameBoardAssets.classic.citiesOnMarsCounter={pos={0,10,0},rot={0,0,0}}\r\ntp_gameBoardAssets.classic.citiesInPlayCounter={pos={0,10,0},rot={0,0,0}}\r\ntp_gameBoardAssets.classic.cityBag={pos={0,10,0},rot={0,0,0}}\r\ntp_gameBoardAssets.classic.greeneryBag={pos={0,10,0},rot={0,0,0}}\r\ntp_gameBoardAssets.classic.specialTilesBag={pos={0,10,0},rot={0,0,0}}\r\ntp_gameBoardAssets.classic.oceanBag={pos={0,10,0},rot={0,0,0}}\r\ntp_gameBoardAssets.classic.extraOceanCounter={pos={0,10,0},rot={0,0,0}}\r\ntp_gameBoardAssets.classic.marsTile={pos={0,10,0},rot={0,0,0}}\r\ntp_gameBoardAssets.classic.loggingTile={pos={0,10,0},rot={0,180,0}}\r\ntp_gameBoardAssets.classic.globalParameters={\r\ntemperature={marker={pos={13.90,1.64,-14.22},rot={0,0,0}},track={pos={15.50,1.15,-3.00},rot={0,180,0}}},\r\noxygen={marker={pos={-13.90,1.64,-14.22},rot={0,0,0}},track={pos={-15.50,1.15,-3.00},rot={0,180,0}}},\r\nocean={marker={pos={-10.40,1.64,11.68},rot={320.71,49.73,78.70}},track={pos={0,1.15,13.15},rot={0,180,0}}},\r\nvenus={marker={pos={-38.50,1.70,7.00},rot={0,0,0}},track={pos={-30.81,1.15,7.40},rot={0,180,0}}},\r\n}\r\ntp_gameBoardAssets.classic.gameConfigTile={\r\nstart={pos={35.00,8.00,0.00},rot={20,90,0}}\r\n}\r\ntp_gameBoardAssets.redesign.trTrackPositions={\r\nbottomLeftCorner={-42.45,1.57,-24.83},\r\ntopLeftCorner={-42.45,1.57,24.83},\r\ntopRightCorner={42.2,1.57,24.83},\r\nbottomRightCorner={42.2,1.57,-24.83},\r\n}\r\ntp_gameBoardAssets.redesign.cardResourceTokensPositions={\r\nbottom={p={-1.55,1.13,-22.45},r={0,180,0}},\r\n}\r\ntp_gameBoardAssets.redesign.cardResourceTokensSpacing={-1.738,0,0}\ntp_gameBoardAssets.redesign.drawPile={pos={-39.10,1.29,-15.75},rot={0,180,180}}\r\ntp_gameBoardAssets.redesign.discardPile={pos={-39.10,1.29,-21.25},rot={0,180,180}}\r\ntp_gameBoardAssets.redesign.drawPileTile={pos={-39.10,1.205,-15.75},rot={0,0,0}}\r\ntp_gameBoardAssets.redesign.discardPileTile={pos={-39.10,1.205,-21.25},rot={0,0,0}}\r\ntp_gameBoardAssets.redesign.cardRevealTransform={pos={-47.00,1.08,-15.40},rot={0,180,0}}\r\ntp_gameBoardAssets.redesign.timerTile={pos={-107.00,4.0,74.0},rot={20,0,0}}\r\ntp_gameBoardAssets.redesign.awardTile={pos={33.00,1.10,20.75},rot={0,180,0}}\r\ntp_gameBoardAssets.redesign.milestoneTile={pos={-33.00,1.10,20.75},rot={0,180,0}}\r\ntp_gameBoardAssets.redesign.standardProjectTile={pos={36.20,1.10,-15.90},rot={0,180,0}}\r\ntp_gameBoardAssets.redesign.citiesOnMarsCounter={pos={39.00,0.59,12.20},rot={0,0,0}}\r\ntp_gameBoardAssets.redesign.citiesInPlayCounter={pos={39.00,0.59,16.00},rot={0,0,0}}\r\ntp_gameBoardAssets.redesign.cityBag={pos={-6.70,1.13,-22.41},rot={0,270,0}}\r\ntp_gameBoardAssets.redesign.greeneryBag={pos={-3.90,1.13,-22.41},rot={0,270,0}}\r\ntp_gameBoardAssets.redesign.specialTilesBag={pos={7.69,1.13,-22.41},rot={0,270,0}}\r\ntp_gameBoardAssets.redesign.oceanBag={pos={10.54,1.13,-22.41},rot={0,270,0}}\r\ntp_gameBoardAssets.redesign.extraOceanCounter={pos={12.00,0.59,15.60},rot={0,0,0}}\r\ntp_gameBoardAssets.redesign.marsTile={pos={0,1.15,-3.00},rot={0,180,0}}\r\ntp_gameBoardAssets.redesign.loggingTile={pos={-39.90,0.65,16.30},rot={0,180,0}}\r\ntp_gameBoardAssets.redesign.globalParameters={\r\ntemperature={marker={pos={13.90,1.64,-14.22},rot={0,0,0}},track={pos={15.50,1.15,-3.00},rot={0,180,0}}},\r\noxygen={marker={pos={-13.90,1.64,-14.22},rot={0,0,0}},track={pos={-15.50,1.15,-3.00},rot={0,180,0}}},\r\nocean={marker={pos={-10.40,1.64,11.68},rot={320.71,49.73,78.70}},track={pos={0,1.15,13.15},rot={0,180,0}}},\r\nvenus={marker={pos={-38.50,1.70,7.00},rot={0,0,0}},track={pos={-30.81,1.15,7.40},rot={0,180,0}}},\r\n}\r\ntp_gameBoardAssets.redesign.gameConfigTile={\r\nstart={pos={35.00,8.00,0.00},rot={20,90,0}}\r\n}\r","n38":"tp_highOrbit={classic={},redesign={}}\r\ntp_highOrbit.classic.spawnLocation={pos={0,10,0},rot={0,90,0}}\r\ntp_highOrbit.redesign.spawnLocation={pos={0,10,0},rot={0,90,0}}\r","n39":"tp_pathfinder={classic={},redesign={}}\r\ntp_pathfinder.classic.pathfinderBoard={pos={-27.05,1.10,-18.45},rot={0,180,0}}\r\ntp_pathfinder.classic.pathfinderPlanetTracks={\r\nvenus={\r\n{0.635,0.5,0.91},\r\n{0.6375,0.5,0.82},\r\n{0.64,0.5,0.73},\r\n{0.645,0.5,0.64},\r\n{0.655,0.5,0.55},\r\n{0.6675,0.5,0.46},\r\n{0.685,0.5,0.37},\r\n{0.705,0.5,0.28},\r\n{0.730,0.5,0.195},\r\n{0.755,0.5,0.11},\r\n{0.780,0.5,0.02},\r\n{0.810,0.5,-0.06},\r\n{0.840,0.5,-0.15},\r\n{0.875,0.5,-0.23},\r\n{0.915,0.5,-0.31},\r\n{0.960,0.5,-0.39},\r\n{1.005,0.5,-0.47},\r\n{1.050,0.5,-0.55},},\r\nearth={\r\n{0.11,0.5,0.91},\r\n{0.1125,0.5,0.825},\r\n{0.115,0.5,0.74},\r\n{0.12,0.5,0.65},\r\n{0.1275,0.5,0.56},\r\n{0.1375,0.5,0.47},\r\n{0.1475,0.5,0.38},\r\n{0.165,0.5,0.30},\r\n{0.185,0.5,0.21},\r\n{0.205,0.5,0.125},\r\n{0.230,0.5,0.04},\r\n{0.255,0.5,-0.045},\r\n{0.280,0.5,-0.125},\r\n{0.315,0.5,-0.205},\r\n{0.340,0.5,-0.29},\r\n{0.375,0.5,-0.37},\r\n{0.410,0.5,-0.45},\r\n{0.445,0.5,-0.53},\r\n{0.485,0.5,-0.61},\r\n{0.525,0.5,-0.69},\r\n{0.565,0.5,-0.765},\r\n{0.6125,0.5,-0.84},\r\n{0.665,0.5,-0.92},},\r\nmars={\r\n{-0.7,0.5,0.91},\r\n{-0.6975,0.5,0.815},\r\n{-0.695,0.5,0.725},\r\n{-0.69,0.5,0.635},\r\n{-0.685,0.5,0.545},\r\n{-0.68,0.5,0.455},\r\n{-0.675,0.5,0.365},\r\n{-0.665,0.5,0.275},\r\n{-0.645,0.5,0.18},\r\n{-0.625,0.5,0.09},\r\n{-0.605,0.5,0.00},\r\n{-0.575,0.5,-0.09},\r\n{-0.55,0.5,-0.175},\r\n{-0.525,0.5,-0.26},\r\n{-0.49,0.5,-0.35},\r\n{-0.47,0.5,-0.44},\r\n{-0.44,0.5,-0.525},\r\n{-0.4,0.5,-0.61},},\r\njovian={\r\n{-1.465,0.5,0.91},\r\n{-1.4625,0.5,0.79},\r\n{-1.4575,0.5,0.68},\r\n{-1.4525,0.5,0.57},\r\n{-1.445,0.5,0.46},\r\n{-1.435,0.5,0.355},\r\n{-1.420,0.5,0.25},\r\n{-1.405,0.5,0.145},\r\n{-1.385,0.5,0.04},\r\n{-1.365,0.5,-0.06},\r\n{-1.345,0.5,-0.165},\r\n{-1.32,0.5,-0.27},\r\n{-1.29,0.5,-0.375},\r\n{-1.26,0.5,-0.48},\r\n{-1.23,0.5,-0.58},\r\n{-1.19,0.5,-0.68},\r\n{-1.15,0.5,-0.775},\r\n}\r\n}\r\ntp_pathfinder.redesign.pathfinderBoard={pos={-27.05,1.10,-18.45},rot={0,180,0}}\r\ntp_pathfinder.redesign.pathfinderPlanetTracks=tp_pathfinder.classic.pathfinderPlanetTracks\r","n40":"tp_player={classic={},redesign={}}\r\ntp_player.classic.trCubeSpawn={pos={0,10,0},rot={0,0,0}}\r\ntp_player.classic.playerSpawnPositions={\r\nWhite={pos={70.00,1.00,0.00},rot={0,90,0},isLeftRightFlipped=true},\r\nRed={pos={20.00,1.00,-36.00},rot={0,180,0},isLeftRightFlipped=true},\r\nYellow={pos={-20.00,1.00,-36.00},rot={0,180,0},isLeftRightFlipped=false},\r\nOrange={pos={-70.00,1.00,0.00},rot={0,270,0},isLeftRightFlipped=false},\r\nGreen={pos={-20.00,1.00,36.00},rot={0,0,0},isLeftRightFlipped=true},\r\nBlue={pos={20.00,1.00,36.00},rot={0,0,0},isLeftRightFlipped=false},\r\n}\r\ntp_player.redesign.trCubeSpawn={pos={0,10,0},rot={0,0,0}}\r\ntp_player.redesign.playerSpawnPositions={\r\nWhite={pos={70.00,1.00,0.00},rot={0,90,0},isLeftRightFlipped=true},\r\nRed={pos={20.00,1.00,-36.00},rot={0,180,0},isLeftRightFlipped=true},\r\nYellow={pos={-20.00,1.00,-36.00},rot={0,180,0},isLeftRightFlipped=false},\r\nOrange={pos={-70.00,1.00,0.00},rot={0,270,0},isLeftRightFlipped=false},\r\nGreen={pos={-20.00,1.00,36.00},rot={0,0,0},isLeftRightFlipped=true},\r\nBlue={pos={20.00,1.00,36.00},rot={0,0,0},isLeftRightFlipped=false},\r\n}\r","n41":"tp_reservedTiles={classic={},redesign={}}\r\ntp_reservedTiles.classic.spaceTiles={}\r\ntp_reservedTiles.classic.spaceTiles.baseGame={\r\nphobosSpacePort={pos={20.42,1.10,-9.64},rot={0,270,0}},\r\nganymedeColony={pos={34.12,1.10,13.04},rot={0,270,0}}\r\n}\r\ntp_reservedTiles.classic.spaceTiles.venus={\r\ndawnCity={pos={-35.75,1.10,14.26},rot={0,270,0}},\r\nlunaMetropolis={pos={-19.55,1.10,15.11},rot={0,270,0}}\r\n}\r\ntp_reservedTiles.classic.spaceTiles.turmoil={\r\nstanfordTorus={pos={-15.39,1.10,-18.13},rot={0,270,0}}\r\n}\r\ntp_reservedTiles.classic.spaceTiles.pathfinder={\r\ndysonScreens={pos={-38.13,1.10,10.63},rot={0,270,0}},\r\nceresSpaceport={pos={29.07,1.10,15.31},rot={0,270,0}},\r\nveneraBase={pos={-20.85,1.10,-7.73},rot={0,270,0}},\r\ngatewayStation={pos={18.82,1.10,-13.50},rot={0,270,0}},\r\nlunarEmbassy={pos={-16.33,1.10,13.58},rot={0,270,0}},\r\nmartianTranshipmentStation={pos={16.59,1.10,-17.14},rot={0,270,0}},\r\n}\r\ntp_reservedTiles.redesign.spaceTiles={}\r\ntp_reservedTiles.redesign.spaceTiles.baseGame={\r\nphobosSpacePort={pos={20.42,1.10,-9.64},rot={0,270,0}},\r\nganymedeColony={pos={34.12,1.10,13.04},rot={0,270,0}}\r\n}\r\ntp_reservedTiles.redesign.spaceTiles.venus={\r\ndawnCity={pos={-35.75,1.10,14.26},rot={0,270,0}},\r\nlunaMetropolis={pos={-19.55,1.10,15.11},rot={0,270,0}}\r\n}\r\ntp_reservedTiles.redesign.spaceTiles.turmoil={\r\nstanfordTorus={pos={-15.39,1.10,-18.13},rot={0,270,0}}\r\n}\r\ntp_reservedTiles.redesign.spaceTiles.pathfinder={\r\ndysonScreens={pos={-38.13,1.10,10.63},rot={0,270,0}},\r\nceresSpaceport={pos={29.07,1.10,15.31},rot={0,270,0}},\r\nveneraBase={pos={-20.85,1.10,-7.73},rot={0,270,0}},\r\ngatewayStation={pos={18.82,1.10,-13.50},rot={0,270,0}},\r\nlunarEmbassy={pos={-16.33,1.10,13.58},rot={0,270,0}},\r\nmartianTranshipmentStation={pos={16.59,1.10,-17.14},rot={0,270,0}},\r\n}\r","n42":"tp_turmoil={classic={},redesign={}}\r\ntp_turmoil.classic.turmoilTile={position={0.00,1.21,20.75},rotation= {0,180,0}}\r\ntp_turmoil.redesign.turmoilTile={position={0.00,1.21,20.75},rotation= {0,180,0}}\r","n43":"tp_venus={classic={},redesign={}}\r\ntp_venus.classic.venusTrack={pos={-30.81,1.15,7.40},rot={0.00,180.00,0.00}}\r\ntp_venus.classic.venusMarker={pos={-38.50,1.70,7.00},rot={0,0,0}}\r\ntp_venus.classic.venusMapTile={pos={-30.78,1.15,-2.00},rot={0,180,0}}\r\ntp_venus.redesign.venusTrack={pos={-30.81,1.15,7.40},rot={0.00,180.00,0.00}}\r\ntp_venus.redesign.venusMarker={pos={-38.50,1.70,7.00},rot={0,0,0}}\r\ntp_venus.redesign.venusMapTile={pos={-30.78,1.15,-2.00},rot={0,180,0}}\r","n44":"tp_venusPhaseTwo={classic={},redesign={}}\r\ntp_venusPhaseTwo.classic.floatingArrayBag={pos={-9.58,1.13,-22.41},rot={0,90,0}}\r\ntp_venusPhaseTwo.classic.gasMineBag={pos={-12.42,1.13,-22.41},rot={0,90,0}}\r\ntp_venusPhaseTwo.classic.venusHabitatBag={pos={-15.26,1.13,-22.41},rot={0,90,0}}\r\ntp_venusPhaseTwo.redesign.floatingArrayBag={pos={-9.58,1.13,-22.41},rot={0,90,0}}\r\ntp_venusPhaseTwo.redesign.gasMineBag={pos={-12.42,1.13,-22.41},rot={0,90,0}}\r\ntp_venusPhaseTwo.redesign.venusHabitatBag={pos={-15.26,1.13,-22.41},rot={0,90,0}}\r\n\ntablePositions={}\ntablePositions.design={}\ntablePositions.design.ares=tp_ares\ntablePositions.design.colonies=tp_colonies\ntablePositions.design.gameBoardAssets=tp_gameBoardAssets\ntablePositions.design.highOrbit=tp_highOrbit\ntablePositions.design.pathfinder=tp_pathfinder\ntablePositions.design.player=tp_player\ntablePositions.design.reservedTiles=tp_reservedTiles\ntablePositions.design.turmoil=tp_turmoil\ntablePositions.design.venus=tp_venus\ntablePositions.design.venusPhaseTwo=tp_venusPhaseTwo\ntablePositions.update=function()\nlocal classicBoardActive=gameState.activeExpansions.classicBoard\nif classicBoardActive==nil then\nclassicBoardActive=gameConfig.setup.classicBoard\nend\nif classicBoardActive then\ntablePositions.ares=tablePositions.design.ares.classic\ntablePositions.colonies=tablePositions.design.colonies.classic\ntablePositions.gameBoardAssets=tablePositions.design.gameBoardAssets.classic\ntablePositions.highOrbit=tablePositions.design.highOrbit.classic\ntablePositions.pathfinder=tablePositions.design.pathfinder.classic\ntablePositions.player=tablePositions.design.player.classic\ntablePositions.reservedTiles=tablePositions.design.reservedTiles.classic\ntablePositions.turmoil=tablePositions.design.turmoil.classic\ntablePositions.venus=tablePositions.design.venus.classic\ntablePositions.venusPhaseTwo=tablePositions.design.venusPhaseTwo.classic\nelse\ntablePositions.ares=tablePositions.design.ares.redesign\ntablePositions.colonies=tablePositions.design.colonies.redesign\ntablePositions.gameBoardAssets=tablePositions.design.gameBoardAssets.redesign\ntablePositions.highOrbit=tablePositions.design.highOrbit.redesign\ntablePositions.pathfinder=tablePositions.design.pathfinder.redesign\ntablePositions.player=tablePositions.design.player.redesign\ntablePositions.reservedTiles=tablePositions.design.reservedTiles.redesign\ntablePositions.turmoil=tablePositions.design.turmoil.redesign\ntablePositions.venus=tablePositions.design.venus.redesign\ntablePositions.venusPhaseTwo=tablePositions.design.venusPhaseTwo.redesign\nend\nend","n45":"\nboardProperties={}\nboardProperties.classic={\ntrTrack={firstCorner=25,secondCorner=50,thirdCorner=75,fourthCorner=100}\n}\nboardProperties.redesign={\ntrTrack={firstCorner=35,secondCorner=85,thirdCorner=120,fourthCorner=170}\n}\n\nboard={}\nboard.design={}\nboard.design.properties=boardProperties\nboard.update=function(refreshPlayers)\nlocal classicBoardActive=gameState.activeExpansions.classicBoard\nif classicBoardActive==nil then\nclassicBoardActive=gameConfig.setup.classicBoard\nend\nif classicBoardActive then\nboard.properties=board.design.properties.classic\nelse\nboard.properties=board.design.properties.redesign\nend\nif gameState.started then return end\nboard.internal.moveGameAssets(refreshPlayers)\nend\nboard.internal={}\nboard.internal.moveGameAssets=function(refreshPlayers)\nlocal transforms=tablePositions.gameBoardAssets\nboard.internal.positionMarsTile(transforms)\nboard.internal.positionGlobalParameterTracksAndMarkers(transforms)\nboard.internal.positionAwardAndMilestoneTiles(transforms)\nboard.internal.positionStandardProjectTile(transforms)\nboard.internal.positionDrawAndDiscardPiles(transforms)\nboard.internal.positionPlayerMaterial(refreshPlayers)\nboard.internal.positionLoggingConfigTile(transforms)\nboard.internal.positionGameConfigTile(transforms)\nboard.internal.positionTileBags(transforms)\nend\nboard.internal.positionMarsTile=function(transforms)\nlocal marsTile=gameObjectHelpers.getObjectByName(\"marsMapTile\")\nmarsTile.setPosition(transforms.marsTile.pos)\nmarsTile.setRotation(transforms.marsTile.rot)\nend\nboard.internal.positionGlobalParameterTracksAndMarkers=function(transforms)\nlocal tempTrack=getObjectFromGUID(globalParameters.temperature.objectGuid)\nlocal tempMarker=getObjectFromGUID(globalParameters.temperature.markerGuid)\ntempTrack.setPosition(transforms.globalParameters.temperature.track.pos)\ntempTrack.setRotation(transforms.globalParameters.temperature.track.rot)\ntempMarker.setPosition(transforms.globalParameters.temperature.marker.pos)\ntempMarker.setRotation(transforms.globalParameters.temperature.marker.rot)\nlocal oxygenTrack=getObjectFromGUID(globalParameters.oxygen.objectGuid)\nlocal oxygenMarker=getObjectFromGUID(globalParameters.oxygen.markerGuid)\noxygenTrack.setPosition(transforms.globalParameters.oxygen.track.pos)\noxygenTrack.setRotation(transforms.globalParameters.oxygen.track.rot)\noxygenMarker.setPosition(transforms.globalParameters.oxygen.marker.pos)\noxygenMarker.setRotation(transforms.globalParameters.oxygen.marker.rot)\nlocal oceanTrack=getObjectFromGUID(globalParameters.ocean.objectGuid)\nlocal oceanMarker=getObjectFromGUID(globalParameters.ocean.markerGuid)\noceanTrack.setPosition(transforms.globalParameters.ocean.track.pos)\noceanTrack.setRotation(transforms.globalParameters.ocean.track.rot)\noceanMarker.setPosition(transforms.globalParameters.ocean.marker.pos)\noceanMarker.setRotation(transforms.globalParameters.ocean.marker.rot)\nend\nboard.internal.positionAwardAndMilestoneTiles=function(transforms)\nlocal milestoneTile=gameObjectHelpers.getObjectByName(\"milestonePlate\")\nlocal awardTile=gameObjectHelpers.getObjectByName(\"awardPlate\")\nmilestoneTile.setPosition(transforms.milestoneTile.pos)\nmilestoneTile.setRotation(transforms.milestoneTile.rot)\nawardTile.setPosition(transforms.awardTile.pos)\nawardTile.setRotation(transforms.awardTile.rot)\nend\nboard.internal.positionStandardProjectTile=function(transforms)\nlocal standardProjectTile=gameObjectHelpers.getObjectByName(\"standardProjectTile\")\nstandardProjectTile.setPosition(transforms.standardProjectTile.pos)\nstandardProjectTile.setRotation(transforms.standardProjectTile.rot)\nend\nboard.internal.positionDrawAndDiscardPiles=function(transforms)\nlocal drawPileTile=gameObjectHelpers.getObjectByName(\"projectStackTile\")\nlocal discardPileTile=gameObjectHelpers.getObjectByName(\"projectDiscardTile\")\nlocal projectDeck=gameObjectHelpers.getObjectByName(\"projectDeck\")\ndiscardPileTile.setPosition(transforms.discardPileTile.pos)\ndiscardPileTile.setRotation(transforms.discardPileTile.rot)\ndrawPileTile.setPosition(transforms.drawPileTile.pos)\ndrawPileTile.setRotation(transforms.drawPileTile.rot)\nprojectDeck.setPosition(transforms.drawPile.pos)\nprojectDeck.setRotation(transforms.drawPile.rot)\nend\nboard.internal.positionPlayerMaterial=function(refreshPlayers)\nif refreshPlayers then\nlocal playerEssentialInfos={}\nfor playerIndex,player in pairs(gameState.allPlayers) do\ntable.insert(playerEssentialInfos,{playerIndex=playerIndex,playerColor=player.color})\nend\nfor _,info in pairs(playerEssentialInfos) do\nremovePlayerFromGame(info.playerIndex)\ncreatePlayerInGame(info.playerColor,false)\nend\nend\nend\nboard.internal.positionLoggingConfigTile=function(transforms)\nlocal loggingTile=gameObjectHelpers.getObjectByName(\"loggingTile\")\nloggingTile.setPosition(transforms.loggingTile.pos)\nloggingTile.setRotation(transforms.loggingTile.rot)\nend\nboard.internal.positionGameConfigTile=function(transforms)\nlocal gameConfigTile=gameObjectHelpers.getObjectByName(\"gameConfigTile\")\ngameConfigTile.setPosition(transforms.gameConfigTile.start.pos)\ngameConfigTile.setRotation(transforms.gameConfigTile.start.rot)\nend\nboard.internal.positionTileBags=function(transforms)\nlocal genericCityBag=gameObjectHelpers.getObjectByName(\"genericCityBag\")\nlocal genericGreeneryBag=gameObjectHelpers.getObjectByName(\"genericGreeneryBag\")\nlocal specialsBag=gameObjectHelpers.getObjectByName(\"specialsBag\")\nlocal oceanBag=gameObjectHelpers.getObjectByName(\"oceanBag\")\ngenericCityBag.setPosition(transforms.cityBag.pos)\ngenericCityBag.setRotation(transforms.cityBag.rot)\ngenericGreeneryBag.setPosition(transforms.greeneryBag.pos)\ngenericGreeneryBag.setRotation(transforms.greeneryBag.rot)\nspecialsBag.setPosition(transforms.specialTilesBag.pos)\nspecialsBag.setRotation(transforms.specialTilesBag.rot)\noceanBag.setPosition(transforms.oceanBag.pos)\noceanBag.setRotation(transforms.oceanBag.rot)\nend","n46":"colonySetup={}\ncolonySetup.setup=function()\ncolonySetup.createSnapPoints()\ncolonySetup.setupBags()\ncolonySetup.setupColonies()\ncolonySetup.setupTradingTile()\nWait.time(function() colonySetup.initialize() end,3)\nend\ncolonySetup.createSnapPoints=function()\nfor _,transform in pairs(tablePositions.colonies.colonyTransforms) do\nsnapPointHelpers.createSingleSnapPoint(nil,transform,true)\nend\nend\ncolonySetup.setupBags=function()\nlocal coloniesBag=gameObjectHelpers.getObjectByName(\"coloniesBag\")\ncoloniesBag.setPositionSmooth(tablePositions.colonies.coloniesBagTransform.pos)\ncoloniesBag.setRotation(tablePositions.colonies.coloniesBagTransform.rot)\nlocal coloniesShipBag=gameObjectHelpers.getObjectByName(\"coloniesShipBag\")\ncoloniesShipBag.setPositionSmooth(tablePositions.colonies.shipBagTransform.pos)\ncoloniesShipBag.setRotation(tablePositions.colonies.shipBagTransform.rot)\ncoloniesShipBag.interactable=true\nend\ncolonySetup.setupColonies=function()\nlocal bag=gameObjectHelpers.getObjectByName(\"coloniesBag\")\nif not gameState.activeExpansions.pathfinders then\nlocal pathfinderColonies={\"534eee\",\"534eef\"}\nfor _,guid in pairs(pathfinderColonies) do\nlocal plate=bag.takeObject({guid=guid})\nplate.destruct()\nend\nend\nbag.shuffle()\nlocal coloniesToSpawn=5\nif gameState.numberOfPlayers==1 then\ncoloniesToSpawn=4\nend\nif gameState.numberOfPlayers + 2 > coloniesToSpawn then\ncoloniesToSpawn=gameState.numberOfPlayers + 2\nend\nlog(\"Spawning a total of \"..tostring(coloniesToSpawn)..\" colonies\")\nfor i=1,coloniesToSpawn do\nfunction spawnSubroutine()\ncoroutine.yield(0)\nlocal transform=tablePositions.colonies.colonyTransforms[i]\nlocal colonyPlate=bag.takeObject({position=transform.pos,rotation=transform.rot})\ncolonyPlate.lock()\nreturn 1\nend\nstartLuaCoroutine(self,\"spawnSubroutine\")\nend\nif gameState.isSoloGame then\nlogging.broadcastToAll(\"Solo player has to choose three out of four colonies! Please initialize those you want to use and discard the last!\",{1,0,0},loggingModes.exception)\nend\nend\ncolonySetup.setupTradingTile=function()\nlocal tradingTile=gameObjectHelpers.getObjectByName(\"coloniesTradingTile\")\ntradingTile.setPositionSmooth(tablePositions.colonies.tradingTile.pos)\ntradingTile.setRotation(tablePositions.colonies.tradingTile.rot)\nend\ncolonySetup.initializeButtons=function()\nlocal tradingTile=gameObjectHelpers.getObjectByName(\"coloniesTradingTile\")\nfor buttonName,buttonInfo in pairs(playMatButtons.tradingTile) do\ntradingTile.createButton(buttonInfo)\nend\nend\ncolonySetup.initialize=function()\ncolonySetup.initializeButtons()\nlocal tradingTile=gameObjectHelpers.getObjectByName(\"coloniesTradingTile\")\nlog(\"Spawning tradeships for players\")\nfor _,player in pairs(gameState.allPlayers) do\nif not player.neutral then\ncolonySystem.spawnFleet(player.color)\nend\nend\nlocal zoneOffsetTransform={pos={0,0,-0.55},rot=tradingTile.getRotation}\nlocal operationId=\"colonyTradingTileZone\"\nzoneHelpers.createScriptingZoneFromTransform(\ntradingTile,\nzoneOffsetTransform,\noperationId,\n1,\n{7.5,2,4.0}\n)\nWait.condition(\nfunction()\ngameState.static.coloniesGameData.fleetZone=volatileData.operations[operationId].result\nvolatileData.operations[operationId]=nil\nend,\nfunction() return volatileData.operations[operationId].isDone end\n)\nend","n47":"\n\ngameConfigBasicSettingsView={\r\n{\r\nclick_function='ToggleVenusWin',\r\nlabel='Toggle Venus Win',\r\ntooltip='Toggle whether Venus must be terraformed as well before the game ends.',\r\nfunction_owner=self,\r\nposition={-0.4,0.15,0.6},\r\nrotation={0,0,0},\r\nonIndex=\"gameConfig.setup.venusWin\",\r\nwidth=1500,\r\nheight=500,\r\nfont_size=165,\r\nscale={0.2,1,0.2}},\r\n{\r\nclick_function='ChangeCorpAmount',\r\nlabel='',\r\ntooltip=\"Important Note (ignore it if you didn't touch the drafting settings):\\n\"..\r\n\"Drawing corps during any drafting phase will override this value.\",\r\nfunction_owner=Global,\r\nposition={0.35,0.15,0.6},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=500,\r\nfont_size=165,\r\nscale={0.2,1,0.2},\r\ncolor={0,200/255,255/255},\r\ndynamicLabel={base=\"Corps to draw: \",value=\"gameConfig.setup.corpsToDraw\"}},\r\n{\r\nclick_function='ToggleSolarPhase',\r\nlabel='Toggle Solar Phase',\r\nfunction_owner=self,\r\nposition={1.1,0.15,0.6},\r\nrotation={0,0,0},\r\nonIndex=\"gameConfig.setup.solarPhase\",\r\nwidth=1500,\r\nheight=500,\r\nfont_size=165,\r\nscale={0.2,1,0.2}},\r\n{\r\nclick_function='ToggleClassicBoard',\r\nlabel='Classic Board',\r\ntooltip=\"Not implemented. Does nothing yet.\",\r\nfunction_owner=self,\r\nposition={-0.4,0.15,0.2},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=500,\r\nfont_size=165,\r\nscale={0.2,1,0.2},\r\nonIndex=\"gameConfig.setup.classicBoard\"},\r\n{\r\nclick_function='ToggleDraft',\r\nlabel='Toggle Drafting',\r\nfunction_owner=self,\r\nposition={0.35,0.1,0.2},\r\nrotation={0,0,0},\r\nonIndex=\"gameConfig.setup.drafting\",\r\nwidth=1500,\r\nheight=500,\r\nfont_size=165,\r\nscale={0.2,1,0.2}},\r\n{\r\nclick_function='ToggleTimer',\r\nlabel='Toggle Timer',\r\nfunction_owner=self,\r\nposition={1.1,0.15,0.2},\r\nrotation={0,0,0},\r\nonIndex=\"gameConfig.setup.timer\",\r\nwidth=1500,\r\nheight=500,\r\nfont_size=165,\r\nscale={0.2,1,0.2}},\r\n{\r\nclick_function='ToggleColonies',\r\nlabel='Toggle Colonies',\r\nfunction_owner=self,\r\nposition={-0.4,0.15,-0.2},\r\nrotation={0,0,0},\r\nonIndex=\"gameConfig.setup.colonies\",\r\nwidth=1500,\r\nheight=500,\r\nfont_size=165,\r\nscale={0.2,1,0.2}},\r\n{\r\nclick_function='ToggleTurmoil',\r\nlabel='Toggle Turmoil',\r\nfunction_owner=self,\r\nposition={0.35,0.15,-0.2},\r\nrotation={0,0,0},\r\nonIndex=\"gameConfig.setup.turmoil\",\r\nwidth=1500,\r\nheight=500,\r\nfont_size=165,\r\nscale={0.2,1,0.2}},\r\n{\r\nclick_function='ToggleBigBox',\r\nlabel='Toggle Big Box',\r\nfunction_owner=self,\r\nposition={1.1,0.15,-0.2},\r\nrotation={0,0,0},\r\nonIndex=\"gameConfig.setup.bigBox\",\r\nwidth=1500,\r\nheight=500,\r\nfont_size=165,\r\nscale={0.2,1,0.2}},\r\n{\r\nclick_function='ToggleCorpEra',\r\nlabel='Toggle Corporate Era',\r\nfunction_owner=self,\r\nposition={-0.4,0.1,-0.6},\r\nrotation={0,0,0},\r\nonIndex=\"gameConfig.setup.corpEra\",\r\nwidth=1500,\r\nheight=500,\r\nfont_size=165,\r\nscale={0.2,1,0.2}},\r\n{\r\nclick_function='ToggleVenus',\r\nlabel='Toggle Venus',\r\nfunction_owner=self,\r\nposition={0.35,0.15,-0.6},\r\nrotation={0,0,0},\r\nonIndex=\"gameConfig.setup.venus\",\r\nwidth=1500,\r\nheight=500,\r\nfont_size=165,\r\nscale={0.2,1,0.2}},\r\n{\r\nclick_function='TogglePrelude',\r\nlabel='Toggle Prelude',\r\nfunction_owner=self,\r\nposition={1.1,0.15,-0.6},\r\nrotation={0,0,0},\r\nonIndex=\"gameConfig.setup.prelude\",\r\nwidth=1500,\r\nheight=500,\r\nfont_size=165,\r\nscale={0.2,1,0.2}\r\n}\r\n}\r","n48":"gameConfigFanExpansionsView={\r\n{\r\nclick_function='ToggleAres',\r\nlabel='Toggle Ares',\r\nfunction_owner=self,\r\nposition={-0.4,0.15,0.2},\r\nrotation={0,0,0},\r\nonIndex=\"gameConfig.setup.ares\",\r\nwidth=1500,\r\nheight=500,\r\nfont_size=165,\r\nscale={0.2,1,0.2}},\r\n{\r\nclick_function='ToggleVenusPhaseTwo',\r\nlabel='Toggle Venus Phase II',\r\nfunction_owner=self,\r\nposition={0.35,0.15,0.2},\r\nrotation={0,0,0},\r\nonIndex=\"gameConfig.setup.venusPhaseTwo\",\r\nwidth=1500,\r\nheight=500,\r\nfont_size=130,\r\nscale={0.2,1,0.2}},\r\n{\r\nclick_function='ToggleXenos',\r\nlabel='Toggle Xenos Corps',\r\nfunction_owner=self,\r\nposition={-0.4,0.15,-0.2},\r\nrotation={0,0,0},\r\nonIndex=\"gameConfig.setup.xenosCorps\",\r\nwidth=1500,\r\nheight=500,\r\nfont_size=165,\r\nscale={0.2,1,0.2}},\r\n{\r\nclick_function='TogglePathfinders',\r\nlabel='Toggle Pathfinders',\r\nfunction_owner=self,\r\nposition={0.35,0.15,-0.2},\r\nrotation={0,0,0},\r\nonIndex=\"gameConfig.setup.pathfinders\",\r\nwidth=1500,\r\nheight=500,\r\nfont_size=165,\r\nscale={0.2,1,0.2}},\r\n{\r\nclick_function='ToggleHighOrbit',\r\nlabel='Toggle High Orbit',\r\nfunction_owner=self,\r\nposition={1.1,0.15,-0.2},\r\nrotation={0,0,0},\r\nonIndex=\"gameConfig.setup.highOrbit\",\r\nwidth=1500,\r\nheight=500,\r\nfont_size=165,\r\nscale={0.2,1,0.2}},\r\n{\r\nclick_function='ToggleShowFanMadeMaps',\r\nlabel='Toggle Fan Made Maps',\r\nfunction_owner=self,\r\nposition={-0.4,0.15,-0.6},\r\nrotation={0,0,0},\r\nonIndex=\"gameConfig.setup.showFanMadeMaps\",\r\nwidth=1500,\r\nheight=500,\r\nfont_size=130,\r\nscale={0.2,1,0.2}},\r\n{\r\nclick_function='ToggleBGGCorps',\r\nlabel='Toggle BGG Corps',\r\nfunction_owner=self,\r\nposition={0.35,0.15,-0.6},\r\nrotation={0,0,0},\r\nonIndex=\"gameConfig.setup.bggCorps\",\r\nwidth=1500,\r\nheight=500,\r\nfont_size=165,\r\nscale={0.2,1,0.2}},\r\n{\r\nclick_function='ToggleFanMadeProjects',\r\nlabel='Toggle Fan Made Projects',\r\nfunction_owner=self,\r\nposition={1.1,0.15,-0.6},\r\nrotation={0,0,0},\r\nonIndex=\"gameConfig.setup.fanMadeProjects\",\r\nwidth=1500,\r\nheight=500,\r\nfont_size=130,\r\nscale={0.2,1,0.2}\r\n}\r\n}\r","n49":"gameConfigGlobalParametersView={\r\n{\r\nclick_function='ChangeTemperatureTrack',\r\nlabel='',\r\nfunction_owner=self,\r\nposition={-0.4,0.1,-0.6},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=500,\r\nfont_size=155,\r\nscale={0.2,1,0.2},\r\ncolor={240/255,50/255,0,0.95},\r\ndynamicLabel={\r\nprefix=\"Toggle Temperature\\nTrack - Steps: \",\r\nvalue=\"#globalParameters.temperature.mappings[gameConfig.globalParameters.temperature.selection].steps\"},},\r\n{\r\nclick_function='ChangeTemperatureBonusTrack',\r\nlabel='Toggle Temperature\\nBonuses',\r\ntooltip=\"Not implemented yet.\",\r\nfunction_owner=self,\r\nposition={0.35,0.1,-0.6},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=500,\r\nfont_size=155,\r\nscale={0.2,1,0.2},\r\ncolor={240/255,50/255,0,0.95},\r\nonIndex=\"disableMarker\"},\r\n{\r\nclick_function='ChangeTemperatureAresTrack',\r\nlabel='Toggle Temperature\\nAres Effects',\r\ntooltip=\"Not implemented yet.\",\r\nfunction_owner=self,\r\nposition={1.1,0.1,-0.6},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=500,\r\nfont_size=155,\r\nscale={0.2,1,0.2},\r\nonIndices={\"gameConfig.setup.ares\",\"disableMarker\"}},\r\n{\r\nclick_function='ChangeOxygenTrack',\r\nlabel='',\r\nfunction_owner=self,\r\nposition={-0.4,0.1,-0.2},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=500,\r\nfont_size=155,\r\nscale={0.2,1,0.2},\r\ncolor={100/255,255/255,0,0.95},\r\ndynamicLabel={\r\nprefix=\"Toggle Oxygen\\nTrack - Steps: \",\r\nvalue=\"#globalParameters.oxygen.mappings[gameConfig.globalParameters.oxygen.selection].steps\"},},\r\n{\r\nclick_function='ChangeOxygenBonusTrack',\r\nlabel='Toggle Oxygen\\nBonuses',\r\ntooltip=\"Not implemented yet.\",\r\nfunction_owner=self,\r\nposition={0.35,0.1,-0.2},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=500,\r\nfont_size=155,\r\nscale={0.2,1,0.2},\r\ncolor={100/255,255/255,0,0.95},\r\nonIndex=\"disableMarker\"},\r\n{\r\nclick_function='ChangeOxygenAresTrack',\r\nlabel='Toggle Oxygen\\nAres Effects',\r\ntooltip=\"Not implemented yet.\",\r\nfunction_owner=self,\r\nposition={1.1,0.1,-0.2},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=500,\r\nfont_size=155,\r\nscale={0.2,1,0.2},\r\nonIndices={\"gameConfig.setup.ares\",\"disableMarker\"}},\r\n{\r\nclick_function='ChangeOceanTrack',\r\nlabel='Toggle Ocean\\nTrack (9)',\r\nfunction_owner=self,\r\nposition={-0.4,0.1,0.2},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=500,\r\nfont_size=155,\r\nscale={0.2,1,0.2},\r\ncolor={0/255,240/255,200/255,0.95},\r\ndynamicLabel={\r\nprefix=\"Toggle Ocean\\nTrack - Steps: \",\r\nvalue=\"#globalParameters.ocean.mappings[gameConfig.globalParameters.ocean.selection].steps\"},},\r\n{\r\nclick_function='ChangeOceanBonusTrack',\r\nlabel='Toggle Ocean\\nBonuses',\r\ntooltip=\"Not implemented yet.\",\r\nfunction_owner=self,\r\nposition={0.35,0.1,0.2},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=500,\r\nfont_size=155,\r\nscale={0.2,1,0.2},\r\ncolor={0/255,240/255,200/255,0.95},\r\nonIndex=\"disableMarker\"},\r\n{\r\nclick_function='ChangeOceanAresTrack',\r\nlabel='Toggle Ocean\\nAres Effects',\r\ntooltip=\"Not implemented yet.\",\r\nfunction_owner=self,\r\nposition={1.1,0.1,0.2},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=500,\r\nfont_size=155,\r\nscale={0.2,1,0.2},\r\nonIndices={\"gameConfig.setup.ares\",\"disableMarker\"}},\r\n{\r\nclick_function='ChangeVenusTrack',\r\nlabel='Toggle Venus\\nTrack (15)',\r\nfunction_owner=self,\r\nposition={-0.4,0.1,0.6},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=500,\r\nfont_size=155,\r\nscale={0.2,1,0.2},\r\ncolor={230/255,230/255,0,0.95},\r\nenabledColor={230/255,230/255,0,0.95},\r\nonIndex=\"gameConfig.setup.venus\",\r\ndynamicLabel={\r\nprefix=\"Toggle Venus\\nTrack - Steps: \",\r\nvalue=\"#globalParameters.venus.mappings[gameConfig.globalParameters.venus.selection].steps\"},},\r\n{\r\nclick_function='ChangeVenusBonusTrack',\r\nlabel='Toggle Venus\\nBonuses',\r\ntooltip=\"Not implemented yet.\",\r\nfunction_owner=self,\r\nposition={0.35,0.1,0.6},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=500,\r\nfont_size=155,\r\nscale={0.2,1,0.2},\r\nonIndex=\"disableMarker\"\r\n}\r\n}\r","n50":"gameConfigMapGeneratorView={\r\n{\r\nclick_function=\"toggleRandomizedMap\",\r\nlabel=\"Random Map\",\r\nfunction_owner=self,\r\nposition={-0.275,0.15,-0.65},\r\nrotation={0,0,0},\r\nwidth=1300,\r\nheight=300,\r\nfont_size=165,\r\nscale={0.2,1,0.2},\r\nonIndex=\"gameConfig.setup.randomMap\"},\r\n{\r\nclick_function=\"changeMapSize\",\r\nlabel=\"Map Size: Normal\",\r\ntooltip=\"Available map sizes:\\n\"..\r\n\"Tiny - 37 Tiles\\n\"..\r\n\"Small - 49 Tiles\\n\"..\r\n\"Normal - 61 Tiles\\n\"..\r\n\"Big - 73 Tiles\\n\"..\r\n\"Large - 91 Tiles\\n\"..\r\n\"Huge - 127 Tiles\\n\"..\r\n\"Gigantic - 159 Tiles\",\r\nfunction_owner=self,\r\nposition={-0.275,0.15,-0.5},\r\nrotation={0,0,0},\r\nwidth=1300,\r\nheight=300,\r\nfont_size=145,\r\nscale={0.2,1,0.2},\r\ncolor={0.95,0.6,0.0,0.95},\r\nid=\"mapSize\",\r\nonIndex=\"gameConfig.setup.randomMap\"},\r\n--   tooltip=\"About 'Map Settings':\\n\\n\"..\r\n--     \"About the big table:\\n\\n\"..\r\n--     \"The base tile yield defines how much a tile will give most likely. Non-integer values work as well \"..\r\n--     \"specific tile yield will be rolled and 'n' that tile yield. \"..\r\n--     \",meaning you won't see any tiles that give any amount of credits yet because I didn't create that tile yet. \",\r\n--   width=500,\r\n--   color={1,155/255,25/255},},\r\n{\r\nclick_function=\"createMap\",\r\nlabel=\"Create Map\",\r\nfunction_owner=self,\r\nposition={-0.275,0.15,-0.35},\r\nrotation={0,0,0},\r\nwidth=1300,\r\nheight=300,\r\nfont_size=145,\r\nscale={0.2,1,0.2},\r\ncolor={0.95,0.6,0.0,0.95},\r\nonIndex=\"gameConfig.setup.randomMap\"},\r\n{\r\nclick_function=\"loadMapGenPreconfig\",\r\nlabel=\"Default\",\r\ntooltip=\"A selection of predefined map configurations.\\nWarning: Changing this will override all of your current map settings.\",\r\nfunction_owner=self,\r\nposition={-0.275,0.15,-0.2},\r\nrotation={0,0,0},\r\nwidth=1300,\r\nheight=300,\r\nfont_size=145,\r\nscale={0.2,1,0.2},\r\ncolor={0.95,0.6,0.0,0.95},\r\nid=\"mapPreconfig\",\r\nonIndex=\"gameConfig.setup.randomMap\"},\r\n{\r\nclick_function=\"changeDeltaFactor\",\r\nlabel=\"0.1\",\r\ntooltip=\"Delta by which the values in this table shall be changed. Allowed values: 0.01,0.10,1.00\",\r\nfunction_owner=self,\r\nposition={-0.425,0.15,-0.025},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.deltaFactor\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeVolcanoTileAmount\",\r\nlabel=\"\",\r\ntooltip=\"Number of volcano tiles\",\r\nfunction_owner=self,\r\nposition={0.795,0.15,-0.6},\r\nrotation={0,0,0},\r\nwidth=700,\r\nheight=350,\r\nfont_size=200,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.absoluteTiles.volcanoTiles\"}},\r\n{\r\nclick_function=\"changeBlockedTileAmount\",\r\nlabel=\"\",\r\ntooltip=\"Not implemented yet.\",\r\nfunction_owner=self,\r\nposition={0.795,0.15,-0.5},\r\nrotation={0,0,0},\r\nwidth=700,\r\nheight=350,\r\nfont_size=200,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"disableMarker\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.absoluteTiles.blockedTiles\"}},\r\n{\r\nclick_function=\"changeBonusTileRatio\",\r\nlabel=\"\",\r\ntooltip=\"Changes ratio of tiles with bonuses to empty tiles. The higher this number the more tiles with bonuses the map will have.\",\r\nfunction_owner=self,\r\nposition={1.25,0.15,-0.51},\r\nrotation={0,0,0},\r\nwidth=700,\r\nheight=350,\r\nfont_size=200,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.bonusTilesRatio\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeInitialErosions\",\r\nlabel=\"\",\r\ntooltip=\"Not implemented yet.\",\r\nfunction_owner=self,\r\nposition={0.795,0.15,-0.3125},\r\nrotation={0,0,0},\r\nwidth=700,\r\nheight=350,\r\nfont_size=200,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndices={\"gameConfig.setup.randomMap\",\"disableMarker\"},\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.absoluteTiles.initialErosions\"}},\r\n{\r\nclick_function=\"changeInitialDustorms\",\r\nlabel=\"\",\r\ntooltip=\"Not implemented yet.\",\r\nfunction_owner=self,\r\nposition={0.795,0.15,-0.235},\r\nrotation={0,0,0},\r\nwidth=700,\r\nheight=350,\r\nfont_size=200,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndices={\"gameConfig.setup.randomMap\",\"disableMarker\"},\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.absoluteTiles.initialDuststorms\"}},\r\n{\r\nclick_function=\"changeOceanSeedPointsAmount\",\r\nlabel=\"\",\r\ntooltip=\"Number of seeding tiles for spawning oceans.\\n\"..\r\n\"The higher this number the more ocean chunks you will get.\\n\"..\r\n\"A value of 1 will result in one connected ocean area.\",\r\nfunction_owner=self,\r\nposition={1.5,0.15,-0.3125},\r\nrotation={0,0,0},\r\nwidth=700,\r\nheight=350,\r\nfont_size=200,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.oceanSettings.oceanSeedPoints\"}},\r\n{\r\nclick_function=\"changeSeedMinDistance\",\r\nlabel=\"\",\r\ntooltip=\"Minium distance between two ocean seed tiles.\",\r\nfunction_owner=self,\r\nposition={1.5,0.15,-0.235},\r\nrotation={0,0,0},\r\nwidth=700,\r\nheight=350,\r\nfont_size=200,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.oceanSettings.oceanSeedMinDistance\"}},\r\n{\r\nclick_function=\"changeShapeFactor\",\r\nlabel=\"\",\r\ntooltip=\"Controls if ocean areas will have a bulk or more like a snake form.\\n\"..\r\n\"A high value results in a bulk like form.\\n\"..\r\n\"A low value (goes to 0==guranteed no more than 2 ocean tiles adjacent to each other) results in a snake like form.\",\r\nfunction_owner=self,\r\nposition={1.5,0.15,-0.1575},\r\nrotation={0,0,0},\r\nwidth=700,\r\nheight=350,\r\nfont_size=200,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.oceanSettings.oceanShapeFactor\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeCreditsWeighting\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={-0.025,0.15,0.1},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Credits.weighting\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeCreditsAverageTileYield\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={0.46,0.15,0.1},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Credits.averageTileYield\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeCreditsYieldDiffusion\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={0.945,0.15,0.1},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Credits.yieldDiffusion\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeCreditsMaxYield\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={1.425,0.15,0.1},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Credits.maxYield\"}},\r\n{\r\nclick_function=\"changeSteelWeighting\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={-0.025,0.15,0.20678},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Steel.weighting\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeSteelAverageTileYield\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={0.46,0.15,0.20678},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Steel.averageTileYield\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeSteelYieldDiffusion\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={0.945,0.15,0.20678},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Steel.yieldDiffusion\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeSteelMaxYield\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={1.425,0.15,0.20678},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Steel.maxYield\"}},\r\n{\r\nclick_function=\"changeTitaniumWeighting\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={-0.025,0.15,0.31357},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Titanium.weighting\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeTitaniumAverageTileYield\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={0.46,0.15,0.31357},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Titanium.averageTileYield\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeTitaniumYieldDiffusion\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={0.945,0.15,0.31357},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Titanium.yieldDiffusion\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeTitaniumMaxYield\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={1.425,0.15,0.31357},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Titanium.maxYield\"}},\r\n{\r\nclick_function=\"changePlantsWeighting\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={-0.025,0.15,0.42035},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Plants.weighting\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changePlantsAverageTileYield\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={0.46,0.15,0.42035},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Plants.averageTileYield\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changePlantsYieldDiffusion\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={0.945,0.15,0.42035},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Plants.yieldDiffusion\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changePlantsMaxYield\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={1.425,0.15,0.42035},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Plants.maxYield\"}},\r\n{\r\nclick_function=\"changeEnergyWeighting\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={-0.025,0.15,0.52714},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Energy.weighting\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeEnergyAverageTileYield\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={0.46,0.15,0.52714},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Energy.averageTileYield\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeEnergyYieldDiffusion\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={0.945,0.15,0.52714},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Energy.yieldDiffusion\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeEnergyMaxYield\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={1.425,0.15,0.52714},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Energy.maxYield\"}},\r\n{\r\nclick_function=\"changeHeatWeighting\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={-0.025,0.15,0.63392},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Heat.weighting\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeHeatAverageTileYield\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={0.46,0.15,0.63392},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Heat.averageTileYield\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeHeatYieldDiffusion\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={0.945,0.15,0.63392},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Heat.yieldDiffusion\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeHeatMaxYield\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={1.425,0.15,0.63392},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.Heat.maxYield\"}},\r\n{\r\nclick_function=\"changeDrawCardWeighting\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={-0.025,0.15,0.74071},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.DrawCard.weighting\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeDrawCardAverageTileYield\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={0.46,0.15,0.74071},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.DrawCard.averageTileYield\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeDrawCardYieldDiffusion\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={0.945,0.15,0.74071},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.DrawCard.yieldDiffusion\",format=\"%.2f\"}},\r\n{\r\nclick_function=\"changeDrawCardMaxYield\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={1.425,0.15,0.74071},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.DrawCard.maxYield\"}},\r\n{\r\nclick_function=\"changeEffectsWeighting\",\r\nlabel=\"\",\r\nfunction_owner=self,\r\nposition={-0.025,0.15,0.8475},\r\nrotation={0,0,0},\r\nwidth=1000,\r\nheight=400,\r\nfont_size=280,\r\nscale={0.1,1,0.1},\r\nenabledColorOverride={0.7,0.6,0.4,0.85},\r\nonIndex=\"gameConfig.setup.randomMap\",\r\ndynamicLabel={base=\"\",value=\"gameConfig.mapGeneratorConfig.tileEffects.OtherEffects.weighting\",format=\"%.2f\"}\r\n}\r\n}\r","n51":"gameConfigAwardsAndMilestonesView={\r\n{\r\nclick_function=\"gameConfigAwardsAndMilestones_swapAwards\",\r\nlabel=\"Swap Awards\",\r\nfunction_owner=self,\r\nposition={0.90,0.15,-0.65},\r\nrotation={0,0,0},\r\nwidth=2400,\r\nheight=300,\r\nfont_size=165,\r\ncolor=gameSetupColors.toggleButtonOnColor,\r\nscale={0.2,1,0.2}},\r\n{\r\nclick_function=\"gameConfigAwardsAndMilestones_toggleRandomAwards\",\r\nlabel=\"Random Awards\",\r\nfunction_owner=self,\r\nposition={0.90,0.15,-0.45},\r\nrotation={0,0,0},\r\nwidth=2400,\r\nheight=300,\r\nfont_size=165,\r\nscale={0.2,1,0.2},\r\nonIndex=\"gameConfig.awards.randomizer.enabled\"},\r\n{\r\nclick_function=\"gameConfigAwardsAndMilestones_changeNumberOfAwards\",\r\nlabel=\"Number Of Awards: -1\",\r\nfunction_owner=self,\r\nposition={0.90,0.15,-0.25},\r\nrotation={0,0,0},\r\nwidth=2400,\r\nheight=300,\r\nfont_size=165,\r\nscale={0.2,1,0.2},\r\nonIndex=\"gameConfig.awards.randomizer.enabled\",\r\ndynamicLabel={base=\"Number Of Awards: \",value=\"gameConfig.awards.randomizer.numberOfAwards\"}},\r\n{\r\nclick_function=\"gameConfigAwardsAndMilestones_changeMaxNumberOfAwardsPerCategory\",\r\nlabel=\"Max Awards Per Category: -1\",\r\ntooltip=\"Not implemented yet.\",\r\nfunction_owner=self,\r\nposition={0.90,0.15,-0.05},\r\nrotation={0,0,0},\r\nwidth=2400,\r\nheight=300,\r\nfont_size=165,\r\nscale={0.2,1,0.2},\r\nonIndices={\"gameConfig.awards.randomizer.enabled\",\"disableMarker\"},\r\ndynamicLabel={base=\"Max Awards Per Category: \",value=\"gameConfig.awards.randomizer.maxAwardsPerCategory\"}},\r\n{\r\nclick_function=\"gameConfigAwardsAndMilestones_maxFunders\",\r\nlabel=\"Max Funders: -1\",\r\nfunction_owner=self,\r\nposition={0.90,0.15,0.15},\r\nrotation={0,0,0},\r\nwidth=2400,\r\nheight=300,\r\nfont_size=165,\r\nscale={0.2,1,0.2},\r\nonIndex=\"gameConfig.awards.randomizer.enabled\",\r\ndynamicLabel={base=\"Max Funders: \",value=\"gameConfig.awards.randomizer.maxFunders\"}},\r\n{\r\nclick_function=\"gameConfigAwardsAndMilestones_toggleGuranteeVenuphile\",\r\nlabel=\"Gurantee Venuphile\",\r\ntooltip=\"Determines whether the Venuphile award will be guranteed if awards are randomized.\",\r\nfunction_owner=self,\r\nposition={0.90,0.15,0.35},\r\nrotation={0,0,0},\r\nwidth=2400,\r\nheight=300,\r\nfont_size=165,\r\nscale={0.2,1,0.2},\r\nonIndices={\"gameConfig.awards.randomizer.enabled\",\r\n\"gameConfig.awards.randomizer.guranteeVenuphile\",\r\n\"gameConfig.setup.venus\"}},\r\n{\r\nclick_function=\"gameConfigAwardsAndMilestones_randomizeAwards\",\r\nlabel=\"Randomize Awards\",\r\nfunction_owner=self,\r\nposition={0.9,0.15,0.55},\r\nrotation={0,0,0},\r\nwidth=2400,\r\nheight=300,\r\nfont_size=165,\r\nscale={0.2,1,0.2},\r\nonIndex=\"gameConfig.awards.randomizer.enabled\",},\r\n{\r\nclick_function=\"gameConfigAwardsAndMilestones_swapMilestones\",\r\nlabel=\"Swap Milestones\",\r\nfunction_owner=self,\r\nposition={-0.2,0.15,-0.65},\r\nrotation={0,0,0},\r\nwidth=2400,\r\nheight=300,\r\nfont_size=165,\r\ncolor=gameSetupColors.toggleButtonOnColor,\r\nscale={0.2,1,0.2}},\r\n{\r\nclick_function=\"gameConfigAwardsAndMilestones_toggleRandomMilestones\",\r\nlabel=\"Random Milestones\",\r\nfunction_owner=self,\r\nposition={-0.2,0.15,-0.45},\r\nrotation={0,0,0},\r\nwidth=2400,\r\nheight=300,\r\nfont_size=165,\r\nscale={0.2,1,0.2},\r\nonIndex=\"gameConfig.milestones.randomizer.enabled\"},\r\n{\r\nclick_function=\"gameConfigAwardsAndMilestones_changeNumberOfMilestones\",\r\nlabel=\"Number Of Milestones: -1\",\r\nfunction_owner=self,\r\nposition={-0.2,0.15,-0.25},\r\nrotation={0,0,0},\r\nwidth=2400,\r\nheight=300,\r\nfont_size=165,\r\nscale={0.2,1,0.2},\r\nonIndex=\"gameConfig.milestones.randomizer.enabled\",\r\ndynamicLabel={base=\"Number Of Milestones: \",value=\"gameConfig.milestones.randomizer.numberOfMilestones\"}},\r\n{\r\nclick_function=\"gameConfigAwardsAndMilestones_changeMaxNumberOfMilestonesPerCategory\",\r\nlabel=\"Max Milestones Per Category: -1\",\r\ntooltip=\"Not implemented yet.\",\r\nfunction_owner=self,\r\nposition={-0.2,0.15,-0.05},\r\nrotation={0,0,0},\r\nwidth=2400,\r\nheight=300,\r\nfont_size=165,\r\nscale={0.2,1,0.2},\r\nonIndices={\"gameConfig.milestones.randomizer.enabled\",\"disableMarker\"},\r\ndynamicLabel={base=\"Max Milestones Per Category: \",value=\"gameConfig.milestones.randomizer.maxMilestonesPerCategory\"}},\r\n{\r\nclick_function=\"gameConfigAwardsAndMilestones_maxClaims\",\r\nlabel=\"Max Claims: -1\",\r\nfunction_owner=self,\r\nposition={-0.2,0.15,0.15},\r\nrotation={0,0,0},\r\nwidth=2400,\r\nheight=300,\r\nfont_size=165,\r\nscale={0.2,1,0.2},\r\nonIndex=\"gameConfig.milestones.randomizer.enabled\",\r\ndynamicLabel={base=\"Max Claims: \",value=\"gameConfig.milestones.randomizer.maxClaims\"}},\r\n{\r\nclick_function=\"gameConfigAwardsAndMilestones_toggleGuranteeHoverlord\",\r\nlabel=\"Gurantee Hoverlord\",\r\ntooltip=\"Determines whether the Hoverlord milestone will be guranteed if milestones are randomized.\",\r\nfunction_owner=self,\r\nposition={-0.2,0.15,0.35},\r\nrotation={0,0,0},\r\nwidth=2400,\r\nheight=300,\r\nfont_size=165,\r\nscale={0.2,1,0.2},\r\nonIndices={\"gameConfig.milestones.randomizer.enabled\",\r\n\"gameConfig.milestones.randomizer.guranteeHoverlord\",\r\n\"gameConfig.setup.venus\"}},\r\n{\r\nclick_function=\"gameConfigAwardsAndMilestones_randomizeMilestones\",\r\nlabel=\"Randomize Milestones\",\r\nfunction_owner=self,\r\nposition={-0.2,0.15,0.55},\r\nrotation={0,0,0},\r\nwidth=2400,\r\nheight=300,\r\nfont_size=165,\r\nscale={0.2,1,0.2},\r\nonIndex=\"gameConfig.milestones.randomizer.enabled\",},\r\n{\r\nclick_function=\"gameConfigAwardsAndMilestones_randomize\",\r\nlabel=\"Randomize Both\",\r\nfunction_owner=self,\r\nposition={0.35,0.15,0.75},\r\nrotation={0,0,0},\r\nwidth=2400,\r\nheight=300,\r\nfont_size=165,\r\nscale={0.2,1,0.2},\r\nonIndices={\"gameConfig.milestones.randomizer.enabled\",\"gameConfig.awards.randomizer.enabled\"},\r\n}\r\n}\r","n52":"gameConfigDraftingView={\r\n{\r\nclick_function='gameConfigDraftingFunctions_ChangePreset',\r\nlabel='',\r\nfunction_owner=self,\r\nposition={-0.3,0.1,-0.6},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=500,\r\nfont_size=120,\r\nscale={0.2,1,0.2},\r\ncolor=gameSetupColors.toggleButtonOnColor,\r\ndynamicLabel={\r\nprefix=\"Preset: \",\r\nvalue=\"gameConfig.drafting.presetDraftingRule.prettyName\"},\r\ndynamicTooltip={value=\"gameConfig.drafting.presetDraftingRule.tooltip\"}},\r\n{\r\nclick_function='gameConfigDraftingFunctions_ToggleCustomDraftingRules',\r\nlabel='Custom Drafting Rule',\r\nfunction_owner=self,\r\nposition={0.5,0.1,-0.6},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=500,\r\nfont_size=155,\r\nscale={0.2,1,0.2},\r\nonIndex=\"gameConfig.drafting.custom.active\",},\r\n{\r\nclick_function='gameConfigDraftingFunctions_StepsPageLeft',\r\nlabel='<',\r\nfunction_owner=self,\r\nposition={-0.5,0.1,-0.3},\r\nrotation={0,0,0},\r\nwidth=500,\r\nheight=500,\r\nfont_size=400,\r\nscale={0.125,1,0.125},\r\nonIndex=\"gameConfig.drafting.custom.active\",},\r\n{\r\nclick_function='gameConfigDraftingFunctions_StepsPageRight',\r\nlabel='>',\r\nfunction_owner=self,\r\nposition={-0.1,0.1,-0.3},\r\nrotation={0,0,0},\r\nwidth=500,\r\nheight=500,\r\nfont_size=400,\r\nscale={0.125,1,0.125},\r\nonIndex=\"gameConfig.drafting.custom.active\",},\r\n{\r\nclick_function='gameConfigDraftingFunctions_StepsAddRemove',\r\nlabel='+/-',\r\ntooltip=\"Left-click to append a draft phase. Right-click to remove the last draft phase.\",\r\nfunction_owner=self,\r\nposition={-0.3,0.1,-0.3},\r\nrotation={0,0,0},\r\nwidth=650,\r\nheight=500,\r\nfont_size=400,\r\nscale={0.125,1,0.125},\r\nonIndex=\"gameConfig.drafting.custom.active\",},\r\n{\r\nclick_function='gameConfigDraftingFunctions_ChangeDrawProjectsAmount',\r\nlabel='',\r\nfunction_owner=self,\r\nposition={-0.3,0.1,-0.1},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=400,\r\nfont_size=150,\r\nscale={0.2,1,0.2},\r\nonIndex=\"gameConfig.drafting.custom.active\",\r\ndynamicLabel={\r\nbase=\"Projects to draw: \",\r\nvalue=\"gameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.projects.amount\"},},\r\n{\r\nclick_function='gameConfigDraftingFunctions_ChangeDrawPreludesAmount',\r\nlabel='',\r\nfunction_owner=self,\r\nposition={0.4,0.1,-0.1},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=400,\r\nfont_size=155,\r\nscale={0.2,1,0.2},\r\nonIndex=\"gameConfig.drafting.custom.active\",\r\ndynamicLabel={\r\nbase=\"Preludes to draw: \",\r\nvalue=\"gameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.preludes.amount\"},},\r\n{\r\nclick_function='gameConfigDraftingFunctions_ChangeDrawCorpsAmount',\r\nlabel='',\r\nfunction_owner=self,\r\nposition={1.1,0.1,-0.1},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=400,\r\nfont_size=155,\r\nscale={0.2,1,0.2},\r\nonIndex=\"gameConfig.drafting.custom.active\",\r\ndynamicLabel={\r\nbase=\"Corps to draw: \",\r\nvalue=\"gameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.corps.amount\"}},\r\n{\r\nclick_function='gameConfigDraftingFunctions_ChangeDrawProjectsTargetHandIndex',\r\nlabel='',\r\nfunction_owner=self,\r\nposition={-0.3,0.1,0.1},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=400,\r\nfont_size=155,\r\nscale={0.2,1,0.2},\r\nonIndex=\"gameConfig.drafting.custom.active\",\r\ndynamicLabel={\r\nbase=\"Target hand index\\nProjects: \",\r\nvalue=\"gameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.projects.targetHandIndex\"},},\r\n{\r\nclick_function='gameConfigDraftingFunctions_ChangeDrawPreludesTargetHandIndex',\r\nlabel='',\r\nfunction_owner=self,\r\nposition={0.4,0.1,0.1},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=400,\r\nfont_size=155,\r\nscale={0.2,1,0.2},\r\nonIndex=\"gameConfig.drafting.custom.active\",\r\ndynamicLabel={\r\nbase=\"Target hand index\\nPreludes: \",\r\nvalue=\"gameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.preludes.targetHandIndex\"},},\r\n{\r\nclick_function='gameConfigDraftingFunctions_ChangeDrawCorpsTargetHandIndex',\r\nlabel='',\r\nfunction_owner=self,\r\nposition={1.1,0.1,0.1},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=400,\r\nfont_size=155,\r\nscale={0.2,1,0.2},\r\nonIndex=\"gameConfig.drafting.custom.active\",\r\ndynamicLabel={\r\nbase=\"Target hand index\\nCorps: \",\r\nvalue=\"gameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.corps.targetHandIndex\"}},\r\n{\r\nclick_function='gameConfigDraftingFunctions_SubStepPageLeft',\r\nlabel='<',\r\nfunction_owner=self,\r\nposition={-0.1,0.1,0.35},\r\nrotation={0,0,0},\r\nwidth=500,\r\nheight=500,\r\nfont_size=500,\r\nscale={0.1,1,0.1},\r\nonIndex=\"gameConfig.drafting.custom.active\",},\r\n{\r\nclick_function='gameConfigDraftingFunctions_SubStepPageRight',\r\nlabel='>',\r\nfunction_owner=self,\r\nposition={0.2,0.1,0.35},\r\nrotation={0,0,0},\r\nwidth=500,\r\nheight=500,\r\nfont_size=500,\r\nscale={0.1,1,0.1},\r\nonIndex=\"gameConfig.drafting.custom.active\",},\r\n{\r\nclick_function='gameConfigDraftingFunctions_SubStepAddRemove',\r\nlabel='+/-',\r\ntooltip=\"Left-click to append a draft step. Right-click to remove the last draft step.\",\r\nfunction_owner=self,\r\nposition={0.05,0.1,0.35},\r\nrotation={0,0,0},\r\nwidth=650,\r\nheight=500,\r\nfont_size=400,\r\nscale={0.1,1,0.1},\r\nonIndex=\"gameConfig.drafting.custom.active\",},\r\n{\r\nclick_function='gameConfigDraftingFunctions_ChangeSubStepHandOverProjects',\r\nlabel='',\r\nfunction_owner=self,\r\nposition={0.05,0.1,0.525},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=500,\r\nfont_size=155,\r\nscale={0.15,1,0.15},\r\ntooltip=\"Number of projects that have to be passed to the next player for this draft step.\",\r\nonIndex=\"gameConfig.drafting.custom.active\",\r\ndynamicLabel={\r\nbase=\"Nr. of projects\\nto pass: \",\r\nvalue=\"gameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].subSteps[gameConfig.drafting.custom.selectedSubStep].projects\"},\r\n},\r\n{\r\nclick_function='gameConfigDraftingFunctions_ChangeSubStepHandOverPreludes',\r\nlabel='',\r\nfunction_owner=self,\r\nposition={0.55,0.1,0.525},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=500,\r\nfont_size=155,\r\nscale={0.15,1,0.15},\r\ntooltip=\"Number of preludes that have to be passed to the next player for this draft step.\",\r\nonIndex=\"gameConfig.drafting.custom.active\",\r\ndynamicLabel={\r\nbase=\"Nr. of preludes\\nto pass: \",\r\nvalue=\"gameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].subSteps[gameConfig.drafting.custom.selectedSubStep].preludes\"},\r\n},\r\n{\r\nclick_function='gameConfigDraftingFunctions_ChangeSubStepHandOverCorps',\r\nlabel='',\r\nfunction_owner=self,\r\nposition={1.05,0.1,0.525},\r\nrotation={0,0,0},\r\nwidth=1500,\r\nheight=500,\r\nfont_size=155,\r\nscale={0.15,1,0.15},\r\ntooltip=\"Number of corps that have to be passed to the next player for this draft step.\",\r\nonIndex=\"gameConfig.drafting.custom.active\",\r\ndynamicLabel={\r\nbase=\"Nr. of corps\\nto pass: \",\r\nvalue=\"gameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].subSteps[gameConfig.drafting.custom.selectedSubStep].corps\"\r\n}},\r\n{\r\nclick_function='noOperation',\r\nlabel='',\r\nfunction_owner=self,\r\nposition={1.35,0.1,-0.3},\r\nrotation={0,0,0},\r\nwidth=500,\r\nheight=500,\r\nfont_size=300,\r\nscale={0.125,1,0.125},\r\ncolor={100/255,160/255,170/255,0.9},\r\ntooltip=\"Number of drafting phases.\",\r\ndynamicLabel={value=\"#gameConfig.drafting.custom.steps\"}},\r\n{\r\nclick_function='noOperation',\r\nlabel='',\r\nfunction_owner=self,\r\nposition={1.2,0.1,-0.3},\r\nrotation={0,0,0},\r\nwidth=500,\r\nheight=500,\r\nfont_size=300,\r\nscale={0.125,1,0.125},\r\ncolor={100/255,160/255,170/255,0.9},\r\ntooltip=\"Currently selected drafting phase.\",\r\ndynamicLabel={value=\"gameConfig.drafting.custom.selectedStep\"}},\r\n{\r\nclick_function='noOperation',\r\nlabel='',\r\nfunction_owner=self,\r\nposition={1.235,0.1,0.35},\r\nrotation={0,0,0},\r\nwidth=500,\r\nheight=500,\r\nfont_size=300,\r\nscale={0.1,1,0.1},\r\ncolor={100/255,160/255,170/255,0.9},\r\ntooltip=\"Number of drafting steps for currently selected phase.\",\r\ndynamicLabel={value=\"#gameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].subSteps\"}},\r\n{\r\nclick_function='noOperation',\r\nlabel='',\r\nfunction_owner=self,\r\nposition={1.115,0.1,0.35},\r\nrotation={0,0,0},\r\nwidth=500,\r\nheight=500,\r\nfont_size=300,\r\nscale={0.1,1,0.1},\r\ncolor={100/255,160/255,170/255,0.9},\r\ntooltip=\"Currently selected drafting step.\",\r\ndynamicLabel={value=\"gameConfig.drafting.custom.selectedSubStep\"},},\r\n{\r\nclick_function='gameConfigDraftingFunctions_ExportSettings',\r\nlabel='|->',\r\nfunction_owner=self,\r\nposition={1.55,0.1,-0.85},\r\nrotation={0,0,0},\r\nwidth=500,\r\nheight=500,\r\nfont_size=200,\r\nscale={0.15,1,0.15},\r\ncolor=gameSetupColors.toggleButtonOnColor,\r\ntooltip=\"Export drafting settings. (Copy from notes for reuse)\"},\r\n{\r\nclick_function='gameConfigDraftingFunctions_ImportSettings',\r\nlabel='->|',\r\nfunction_owner=self,\r\nposition={1.55,0.1,-0.65},\r\nrotation={0,0,0},\r\nwidth=500,\r\nheight=500,\r\nfont_size=200,\r\nscale={0.15,1,0.15},\r\ncolor=gameSetupColors.toggleButtonOnColor,\r\ntooltip=\"Import draft settings from notes.\",\r\n}\r\n}\r\n\ngameConfigMatViews={}\r\ngameConfigMatViews.mainButtons={\r\n{\r\nclick_function='printConfig',\r\nlabel=\"Show Config\",\r\ntooltip=\"Shows the current configuration in the notes text box.\\n\"..\r\n\"In order to copy the contents,click on the 'Edit Note' button in the bottom right corner\\n\"..\r\n\"Click into the notes text box and press 'CTRL + a' to select everything\\n\"..\r\n\"Remarks:\\n\"..\r\n\" - 'CTRL + a' is the only way that everything from the config will be selected and copied.\\n\"..\r\n\" - if you miss a part of the config you won't be able to load the config later on.\\n\",\r\nfunction_owner=self,\r\nposition={-1.3,0.3,-0.85},\r\nrotation={0,0,0},\r\nwidth=2800,\r\nheight=600,\r\nfont_size=450,\r\nscale={0.1,0.1,0.1},\r\ncolor={255/255,115/255,0,0.95},},\r\n{\r\nclick_function='loadConfig',\r\nlabel=\"Load Config\",\r\ntooltip=\"Replace the current game config if there is one in the notes text block in the bottom right corner.\\n\"..\r\n\"To copy a game config into the notes text block,just press the 'Edit Notes' button in the bottom right corner to start editing the notes,\"..\r\n\"click somewhere into the text block field and paste the new game config into the notes field.\\n\"..\r\n\"If loading the config failed you've probably missed a part when you initially copied the game config.\",\r\nfunction_owner=self,\r\nposition={-1.3,0.3,-0.65},\r\nrotation={0,0,0},\r\nwidth=2800,\r\nheight=600,\r\nfont_size=450,\r\nscale={0.1,0.1,0.1},\r\ncolor={255/255,115/255,0,0.95},},\r\n{\r\nclick_function='clearNotes',\r\nlabel=\"Clear Notes\",\r\ntooltip=\"Clears any text from the notes text block.\",\r\nfunction_owner=self,\r\nposition={-1.3,0.3,-0.45},\r\nrotation={0,0,0},\r\nwidth=2800,\r\nheight=600,\r\nfont_size=450,\r\nscale={0.1,0.1,0.1},\r\ncolor={255/255,115/255,0,0.95}},\r\n{\r\nclick_function='toggleGameConfigSettings',\r\nlabel=\"Basic Settings\",\r\ntooltip=\"Toggle between settings.\",\r\nfunction_owner=self,\r\nposition={0.35,0.3,-0.85},\r\nrotation={0,0,0},\r\nwidth=9000,\r\nheight=600,\r\nfont_size=450,\r\nscale={0.1,0.1,0.1},\r\ncolor={255/255,115/255,0,0.95},\r\nbuttonType=\"toggleGameConfigSettings\",},\r\n{\r\nclick_function='ChangeBoard',\r\nlabel='Change Map',\r\nfunction_owner=self,\r\nposition={-1.3,0.3,0.35},\r\nrotation={0,0,0},\r\nwidth=2800,\r\nheight=600,\r\nfont_size=450,\r\nscale={0.1,0.1,0.1},\r\ncolor={255/255,115/255,0,0.95}},\r\n{\r\nclick_function='FinishSetup',\r\nlabel='Finish Setup',\r\nfunction_owner=self,\r\nposition={-1.3,0.3,0.55},\r\nrotation={0,0,0},\r\nwidth=2800,\r\nheight=600,\r\nfont_size=450,\r\nscale={0.1,0.1,0.1},\r\ncolor={255/255,115/255,0,0.95},\r\nbuttonType=\"finishSetupButton\",},\r\n{\r\nclick_function='initialResearch',\r\nlabel='Start Game',\r\nfunction_owner=self,\r\nposition={-1.3,0.3,0.75},\r\nrotation={0,0,0},\r\nwidth=2800,\r\nheight=600,\r\nfont_size=450,\r\nscale={0.1,0.1,0.1},\r\ncolor={50/255,50/255,50/255,0.95},\r\nbuttonType=\"startGameButton\",\r\n}\r\n}\r\ngameConfigMatViews.views={\r\n{buttons=gameConfigBasicSettingsView,toggleLabel=\"Basic Settings\",imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164339050293427/423FB195C762CFFCA4C57707819EC35AE20D4DB7/\"},\r\n{buttons=gameConfigFanExpansionsView,toggleLabel=\"Fan Expansions\",imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164339050293427/423FB195C762CFFCA4C57707819EC35AE20D4DB7/\"},\r\n{buttons=gameConfigGlobalParametersView,toggleLabel=\"Global Parameter Settings\",imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164339050293427/423FB195C762CFFCA4C57707819EC35AE20D4DB7/\"},\r\n{buttons=gameConfigMapGeneratorView,toggleLabel=\"Map Settings\",imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691647367269739152/D70A25A864C12D08B6F4C1F255B306815ECF5E44/\"},\r\n{buttons=gameConfigAwardsAndMilestonesView,toggleLabel=\"Awards & Milestones Settings\",imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1714164339050293427/423FB195C762CFFCA4C57707819EC35AE20D4DB7/\"},\r\n{buttons=gameConfigDraftingView,toggleLabel=\"Drafting Settings\",imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1691648342676700524/E1DB0539577AB8B6500C45A035AF532F766C2C40/\"},\r\n}\r\ngameConfigMatViews.currentView=1\r","n53":"function ToggleTimer()\ngameConfig.setup.timer=not gameConfig.setup.timer\ncreateAllSetupButtons()\nend\nfunction ToggleShowFanMadeMaps()\ngameConfig.setup.showFanMadeMaps=not gameConfig.setup.showFanMadeMaps\ncreateAllSetupButtons()\nend\nfunction ToggleSolarPhase()\nif gameConfig.setup.turmoil then return end\ngameConfig.setup.solarPhase=not gameConfig.setup.solarPhase\ncreateAllSetupButtons()\nend\nfunction ToggleVenus()\ngameConfig.setup.venus=not gameConfig.setup.venus\nif gameConfig.setup.venus==false and gameConfig.setup.venusPhaseTwo==true then\ngameConfig.setup.venusPhaseTwo=false\nend\ncreateAllSetupButtons()\nend\nfunction ToggleClassicBoard()\nif true then return end\nif isDoubleClick(\"ToggleClassicBoard\") then return end\nfunction toggleClassicBoardCoroutine()\nlocal waitCounter=0\nwhile waitCounter < 30 do\nfor _,isOngoing in pairs(cloningOngoingTable) do\nif isOngoing==true then return 1 end\nend\nif transientState.removingPlayer or cloningOngoing then return 1 end\nwaitCounter=waitCounter + 1\ncoroutine.yield(0)\nend\ngameConfig.setup.classicBoard=not gameConfig.setup.classicBoard\ntablePositions.update()\nboard.update(true)\ncreateAllSetupButtons()\nreturn 1\nend\nstartLuaCoroutine(self,\"toggleClassicBoardCoroutine\")\nend\nfunction ToggleTurmoil()\ngameConfig.setup.turmoil=not gameConfig.setup.turmoil\nif gameConfig.setup.turmoil then\ngameConfig.setup.solarPhase=true\nend\ncreateAllSetupButtons()\nend\nfunction ToggleColonies()\ngameConfig.setup.colonies=not gameConfig.setup.colonies\ncreateAllSetupButtons()\nend\nfunction TogglePrelude()\ngameConfig.setup.prelude=not gameConfig.setup.prelude\ncreateAllSetupButtons()\nend\nfunction ToggleCorpEra()\ngameConfig.setup.corpEra=not gameConfig.setup.corpEra\ncreateAllSetupButtons()\nend\nfunction ToggleBGGCorps()\ngameConfig.setup.bggCorps=not gameConfig.setup.bggCorps\ncreateAllSetupButtons()\nend\nfunction ToggleBigBox()\ngameConfig.setup.bigBox=not gameConfig.setup.bigBox\ncreateAllSetupButtons()\nend\nfunction ToggleVenusWin()\ngameConfig.setup.venusWin=not gameConfig.setup.venusWin\nif gameConfig.setup.venus==false and gameConfig.setup.venusWin then\ngameConfig.setup.venus=true\nend\ncreateAllSetupButtons()\nend\nfunction ToggleExtendedScripting()\ngameConfig.setup.extendedScripting=not gameConfig.setup.extendedScripting\ncreateAllSetupButtons()\nend\nfunction ToggleDraft()\ngameConfig.setup.drafting=not gameConfig.setup.drafting\ncreateAllSetupButtons()\nend\nfunction ToggleXenos()\ngameConfig.setup.xenosCorps=not gameConfig.setup.xenosCorps\ncreateAllSetupButtons()\nend\nfunction ToggleFanMadeProjects()\ngameConfig.setup.fanMadeProjects=not gameConfig.setup.fanMadeProjects\ncreateAllSetupButtons()\nend\nfunction ToggleRandomizer()\ngameConfig.setup.randomizer=not gameConfig.setup.randomizer\ncreateAllSetupButtons()\nend\nfunction ToggleHighOrbit()\ngameConfig.setup.highOrbit=not gameConfig.setup.highOrbit\ncreateAllSetupButtons()\nend\nfunction ToggleVenusPhaseTwo()\ngameConfig.setup.venusPhaseTwo=not gameConfig.setup.venusPhaseTwo\nif gameConfig.setup.venus==false and gameConfig.setup.venusPhaseTwo==true then\ngameConfig.setup.venus=true\nend\ncreateAllSetupButtons()\nend\nfunction ToggleAres()\ngameConfig.setup.ares=not gameConfig.setup.ares\ncreateAllSetupButtons()\nend\nfunction TogglePathfinders()\ngameConfig.setup.pathfinders=not gameConfig.setup.pathfinders\ncreateAllSetupButtons()\nend\nfunction readGameConfigOnGameLoad()\nif getNotes()~=\"\" and string.find(getNotes(),\"{\") then\ngameConfigFunctions_loadConfig()\nend\nend\nfunction gameConfigFunctions_loadConfig()\ngameConfig=JSON.decode(getNotes())\nif gameConfig.setup.randomMap then\ngameConfigMapGeneratorFunctions.updateMapSettingsPreConfigButton()\nend\ncreateAllSetupButtons()\nsetNotes(\"\")\nend\nfunction gameConfigFunctions_publishConfig()\nsetNotes(JSON.encode(gameConfig))\nend\nfunction ChangeCorpAmount(obj,_,altClick)\nlocal delta=1\nif altClick then\ndelta=-1\nend\ngameConfig.setup.corpsToDraw=gameConfig.setup.corpsToDraw + delta\nif gameConfig.setup.corpsToDraw > 10 then\ngameConfig.setup.corpsToDraw=10\nelseif gameConfig.setup.corpsToDraw < 0 then\ngameConfig.setup.corpsToDraw=0\nend\nfor _,buttonInfo in pairs(gameConfigBasicSettingsView) do\nif buttonInfo.buttonType==\"corpCounter\" then\nbuttonInfo.label= \"Corps to draw: \"..gameConfig.setup.corpsToDraw\nend\nend\ncreateAllSetupButtons()\nend\nfunction gameConfigFunctions_clearNotes()\nsetNotes(\"\")\nend\nfunction gameConfigFunctions_toggleMapSize()\nlocal newSelection=gameConfig.mapGeneratorConfig.mapSizeSelection + 1\nif gameConfig.mapGeneratorConfig.mapSizeSelection > #mapSizes then\ngameConfig.mapGeneratorConfig.mapSizeSelection=1\nelseif gameConfig.mapGeneratorConfig.mapSizeSelection < 0 then\ngameConfig.mapGeneratorConfig.mapSizeSelection=#mapSizes\nend\ngameConfig.mapGeneratorConfig.mapSizeSelection=newSelection\nend\nfunction gameConfigFunctions_changeMapGeneratorTileAverageTileYield(params)\ntableHelpers.changeNumericValue(gameConfig.mapGeneratorConfig.tileEffects[params.resourceType],\"averageTileYield\",params.delta,1,20)\nend\nfunction gameConfigFunctions_changeMapGeneratorTileYieldDiffusion(params)\ntableHelpers.changeNumericValue(gameConfig.mapGeneratorConfig.tileEffects[params.resourceType],\"yieldDiffusion\",params.delta,0,1)\nend\nfunction gameConfigFunctions_changeMapGeneratorTileMaxYield(params)\ntableHelpers.changeNumericValue(gameConfig.mapGeneratorConfig.tileEffects[params.resourceType],\"maxYield\",params.delta,1,10)\nend\nfunction gameConfigFunctions_changeTileEffectWeightings(params)\ntableHelpers.changeNumericValue(gameConfig.mapGeneratorConfig.tileEffects[params.resourceType],\"weighting\",params.delta,0,20)\nend\nfunction gameConfigFunctions_changeNumberOfVolcanoTiles(params)\ntableHelpers.changeNumericValue(gameConfig.mapGeneratorConfig.absoluteTiles,\"volcanoTiles\",params.delta,0,5)\nend\nfunction gameConfigFunctions_changeNumberOfBlockedTiles(params)\ntableHelpers.changeNumericValue(gameConfig.mapGeneratorConfig.absoluteTiles,\"blockedTiles\",params.delta,0,5)\nend\nfunction gameConfigFunctions_changeNumberOfInitialErosions(params)\ntableHelpers.changeNumericValue(gameConfig.mapGeneratorConfig.absoluteTiles,\"initialErosions\",params.delta,0,50)\nend\nfunction gameConfigFunctions_changeNumberOfInitialDuststorms(params)\ntableHelpers.changeNumericValue(gameConfig.mapGeneratorConfig.absoluteTiles,\"initialDuststorms\",params.delta,0,50)\nend\nfunction gameConfigFunctions_changeBonusTileRatio(params)\ntableHelpers.changeNumericValue(gameConfig.mapGeneratorConfig,\"bonusTilesRatio\",params.delta,0,1000)\nend\nfunction gameConfigFunctions_changeOceanSeedPoints(params)\ntableHelpers.changeNumericValue(gameConfig.mapGeneratorConfig.oceanSettings,\"oceanSeedPoints\",params.delta,1,30)\nend\nfunction gameConfigFunctions_changeOceanSeedMinDistance(params)\ntableHelpers.changeNumericValue(gameConfig.mapGeneratorConfig.oceanSettings,\"oceanSeedMinDistance\",params.delta,1,15)\nend\nfunction gameConfigFunctions_changeOceanShapeFactor(params)\ntableHelpers.changeNumericValue(gameConfig.mapGeneratorConfig.oceanSettings,\"oceanShapeFactor\",params.delta,0,20)\nend\nfunction gameConfigFunctions_changeMapSize(params)\ntableHelpers.changeNumericValue(gameConfig.mapGeneratorConfig,\"mapSizeSelection\",params.delta,1,tableHelpers.getCount(randomizerTemplates))\nend\nfunction gameConfigFunctions_changeGlobalParameterSelection(params)\nlocal newSelection=gameConfig.globalParameters[params.what].selection + params.delta\nif newSelection > #globalParameters[params.what].mappings then\nnewSelection=1\nelseif newSelection < 1 then\nnewSelection=#globalParameters[params.what].mappings\nend\nlocal selectionInfo={}\ngameConfig.globalParameters[params.what].selection=newSelection\nadaptGlobalParameter(nil,nil,nil)\nend\nfunction gameConfigFunctions_changeGlobalParameterBonusesSelection(params)\nlocal newSelection=gameConfig.globalParameters[params.what].bonusSelection + params.delta\nif newSelection > #globalParameters[params.what].bonus then\nnewSelection=1\nelseif newSelection < 1 then\nnewSelection=#globalParameters[params.what].bonus\nend\ngameConfig.globalParameters[params.what].bonusSelection=newSelection\nend\nfunction gameConfigFunctions_changeGlobalParameterAresSelection(params)\nif globalParameters[params.what].ares==nil then\nlogging.broadcastToAll(params.what..\" does not have an ares track. Doing nothing.\")\nreturn\nend\nlocal newSelection=gameConfig.globalParameters[params.what].aresSelection + params.delta\nif newSelection > #globalParameters[params.what].ares then\nnewSelection=1\nelseif newSelection < 1 then\nnewSelection=#globalParameters[params.what].ares\nend\ngameConfig.globalParameters[params.what].aresSelection=newSelection\nend\nfunction loadExpansionBoardgameTile()\nlocal properties=boardgameTileProperties.baseGame\nif gameConfig.setup.pathfinders then\nproperties=boardgameTileProperties.allExpansions\nelseif gameConfig.setup.turmoil or gameConfig.setup.colonies then\nproperties=boardgameTileProperties.withoutPathfinders\nend\nlocal gameBoardTile=gameObjectHelpers.getObjectByName(\"gameBoardTile\")\nlocal customization={}\nlocal scale=gameBoardTile.getScale()\ncustomization.image=properties.imageUrl\ngameBoardTile.setCustomObject(customization)\nlocal reloadedTile=gameBoardTile.reload()\nreloadedTile.interactable=false\nWait.time(function()\nWait.condition(function()\nreloadedTile.setLock(true)\nreloadedTile.setScale(scale)\nend,function() return reloadedTile.resting end)\nend,2)\nend\nfunction DisableSolarPhase()\nif gameState.turmoil==true then\nlogging.broadcastToAll(\"Turmoil requires solar phase\",{1,1,1},loggingModes.exception)\nelse\ngameState.solarPhase=false\nend\nend\nfunction EnableDraft()\nlogging.broadcastToAll(\"Drafting enabled.\",{1,1,1},loggingModes.exception)\ngameState.draftingEnabled=true\nend\nfunction ChangeBoard(_,_,altClick)\nlocal delta=1\nif altClick then\ndelta=-1\nend\nChangeBoardInternal(delta)\nend\nfunction ChangeBoardInternal(delta)\ngameState.selectedMap=gameState.selectedMap + delta\nif gameConfig.setup.showFanMadeMaps and gameState.selectedMap > tableHelpers.getCount(predefinedMaps) - 1 then\ngameState.selectedMap=1\nelseif gameConfig.setup.showFanMadeMaps and gameState.selectedMap < 1 then\ngameState.selectedMap=tableHelpers.getCount(predefinedMaps) - 1\nelseif not gameConfig.setup.showFanMadeMaps and gameState.selectedMap > 3 then\ngameState.selectedMap=1\nelseif not gameConfig.setup.showFanMadeMaps and gameState.selectedMap < 1 then\ngameState.selectedMap=3\nend\nlocal customization={}\nlocal scale={1,1,1}\nlocal index=1\nfor name,mapData in pairs(predefinedMaps) do\nif gameState.selectedMap==index then\nlog(\"Map selected: \"..name)\ngameMap=hexMapHelpers.makeMapComputeFriendly(mapData)\ncustomization.image=mapData.metadata.imageUrl\nscale=mapData.metadata.scale\nadaptGlobalParametersFromMapMetadata(mapData.metadata)\nbreak\nend\nindex=index + 1\nend\nlocal marsMapTile=gameObjectHelpers.getObjectByName(\"marsMapTile\")\nmarsMapTile.setCustomObject(customization)\nlocal reloadedTile=marsMapTile.reload()\nWait.frames(|| reloadedTile.setScale(scale),4)\nif gameMap~=nil then\ngameMap.metadata.wasUpdated=true\nend\nend\n--Spawn Button to Set No of Corps\nfunction ChooseCorpAmount()\nlocal object=gameObjectHelpers.getObjectByName(\"corpAmountToken\")\nlocal setupMat=gameObjectHelpers.getObjectByName(\"setupMat\")\nfor index,buttonInfo in pairs(gameSetupMatButtons.setup) do\nif buttonInfo.label==\"Set No. of Corps\" then\nlocal targetPosition=vectorHelpers.fromLocalToWorld(setupMat,buttonInfo.position)\nobject.setPosition(targetPosition)\nobject.setRotation({0,180,0})\nobject.setScale({0.5,1,0.5})\nobject.lock()\ngameSetupMatButtons.setup[index].scale={0,0,0}\nend\nend\ncreateAllSetupButtons()\nend\nfunction adaptGlobalParametersFromMapMetadata(metadata)\nlocal globalParametersSelectionInfo=metadata.globalParameterDefaultMappings\nlocal bonusSelectionInfo=metadata.bonusDefaultMappings\nlocal aresSelectionInfo=metadata.aresDefaultMappings\nadaptGlobalParameter(globalParametersSelectionInfo,bonusSelectionInfo,aresSelectionInfo)\nend\nfunction adaptGlobalParameter(globalParametersSelectionInfo,bonusSelectionInfo,aresSelectionInfo)\nfor name,globalParameterInfo in pairs(globalParameters) do\nif type(globalParameterInfo)==\"table\" then\nlocal newStepsMappingSelection=gameConfig.globalParameters[name].selection\nlocal newBonusMappingSelection=gameConfig.globalParameters[name].bonusSelection\nlocal newAresMappingSelection=gameConfig.globalParameters[name].aresSelection\nif globalParametersSelectionInfo~=nil and globalParametersSelectionInfo[name]~=nil then\nnewStepsMappingSelection=globalParametersSelectionInfo[name].mappingIndex\nend\nif bonusSelectionInfo~=nil and bonusSelectionInfo[name]~=nil then\nnewBonusMappingSelection=bonusSelectionInfo[name].mappingIndex\nend\nif aresSelectionInfo~=nil and aresSelectionInfo[name]~=nil then\nnewAresMappingSelection=aresSelectionInfo[name].mappingIndex\nend\nglobalParameterSystem.values[name].bonusSelection=newBonusMappingSelection\nglobalParameterSystem.values[name].aresSelection=newAresMappingSelection\nif newStepsMappingSelection~=globalParameterSystem.values[name].selection then\nglobalParameterSystem.values[name].selection=newStepsMappingSelection\nchangeGlobalParameterTrack(name,newStepsMappingSelection)\nend\nend\nend\nend\nfunction changeGlobalParameterTrack(globalParameterName,selection)\nif transientState.changingGlobalParameters==nil then\ntransientState.changingGlobalParameters={globalParameterName={inProgress=false,latestSelection=selection}}\nelseif transientState.changingGlobalParameters[globalParameterName]==nil then\ntransientState.changingGlobalParameters[globalParameterName]={inProgress=false,latestSelection=selection}\nelse\ntransientState.changingGlobalParameters[globalParameterName].latestSelection=selection\nend\nfunction changeGlobalParameterTrackCoroutine()\nwhile transientState.changingGlobalParameters[globalParameterName].inProgress do\ncoroutine.yield(0)\nend\ntransientState.changingGlobalParameters[globalParameterName].inProgress=true\nlocal trackObject=getObjectFromGUID(globalParameters[globalParameterName].objectGuid)\ncustomization={}\ncustomization.image=globalParameters[globalParameterName].mappings[transientState.changingGlobalParameters[globalParameterName].latestSelection].imageUrl\ntrackObject.setCustomObject(customization)\nlocal counter=20\nwhile counter > 0 do\nif not trackObject.resting then\ncounter=20\nend\ncounter=counter - 1\ncoroutine.yield(0)\nend\ntrackObject.reload()\nfor i=1,5 do\ncoroutine.yield(0)\nend\ntransientState.changingGlobalParameters[globalParameterName].inProgress=false\nreturn 1\nend\nstartLuaCoroutine(self,\"changeGlobalParameterTrackCoroutine\")\nend","n54":"function ChangeTemperatureTrack(_,_,altClick)\nlocal delta=1\nif altClick then delta=-1 end\ngameConfigFunctions_changeGlobalParameterSelection({what=\"temperature\",delta=delta})\nupdateGlobalParameterSelectionButtonLabel(\"changeTemperatureTrackButton\",\"Toggle Temperature\\nTrack\",\"temperature\")\nend\nfunction ChangeOxygenTrack(_,_,altClick)\nlocal delta=1\nif altClick then delta=-1 end\ngameConfigFunctions_changeGlobalParameterSelection({what=\"oxygen\",delta=delta})\nupdateGlobalParameterSelectionButtonLabel(\"changeOxygenTrackButton\",\"Toggle Oxygen\\nTrack\",\"oxygen\")\nend\nfunction ChangeOceanTrack(_,_,altClick)\nlocal delta=1\nif altClick then delta=-1 end\ngameConfigFunctions_changeGlobalParameterSelection({what=\"ocean\",delta=delta})\nupdateGlobalParameterSelectionButtonLabel(\"changeOceanTrackButton\",\"Toggle Ocean\\nTrack\",\"ocean\")\nend\nfunction ChangeVenusTrack(_,_,altClick)\nif gameConfig.setup.venus then\nlocal delta=1\nif altClick then delta=-1 end\ngameConfigFunctions_changeGlobalParameterSelection({what=\"venus\",delta=delta})\nupdateGlobalParameterSelectionButtonLabel(\"changeVenusTrackButton\",\"Toggle Venus\\nTrack\",\"venus\")\nend\nend\nfunction ChangeTemperatureBonusTrack(_,_,altClick)\nlocal delta=1\nif altClick then delta=-1 end\ngameConfigFunctions_changeGlobalParameterBonusesSelection({what=\"temperature\",delta=delta})\nend\nfunction ChangeOxygenBonusTrack(_,_,altClick)\nlocal delta=1\nif altClick then delta=-1 end\ngameConfigFunctions_changeGlobalParameterBonusesSelection({what=\"oxygen\",delta=delta})\nend\nfunction ChangeOceanBonusTrack(_,_,altClick)\nlocal delta=1\nif altClick then delta=-1 end\ngameConfigFunctions_changeGlobalParameterBonusesSelection({what=\"ocean\",delta=delta})\nend\nfunction ChangeVenusBonusTrack(_,_,altClick)\nif gameConfig.setup.venus then\nlocal delta=1\nif altClick then delta=-1 end\ngameConfigFunctions_changeGlobalParameterBonusesSelection({what=\"venus\",delta=delta})\nend\nend\nfunction ChangeTemperatureAresTrack(_,_,altClick)\nlocal delta=1\nif altClick then delta=-1 end\ngameConfigFunctions_changeGlobalParameterAresSelection({what=\"temperature\",delta=delta})\nend\nfunction ChangeOxygenAresTrack(_,_,altClick)\nlocal delta=1\nif altClick then delta=-1 end\ngameConfigFunctions_changeGlobalParameterAresSelection({what=\"oxygen\",delta=delta})\nend\nfunction ChangeOceanAresTrack(_,_,altClick)\nlocal delta=1\nif altClick then delta=-1 end\ngameConfigFunctions_changeGlobalParameterAresSelection({what=\"ocean\",delta=delta})\nend\nfunction updateGlobalParameterSelectionButtonLabel(buttonId,baseLabel,globalParameterName)\nfor i,buttonInfo in pairs(gameConfigGlobalParametersView) do\nif buttonInfo.id==buttonId then\nlocal stepCount=#globalParameters[globalParameterName].mappings[gameConfig.globalParameters[globalParameterName].selection].steps - 1\nbuttonInfo.label=baseLabel..\" (\"..stepCount..\")\"\nend\nend\ncreateAllSetupButtons()\nend","n55":"gameConfigMapGeneratorFunctions={}\ngameConfigMapGeneratorFunctions.getDeltaValue=function(isNegative,amount)\nlocal delta=amount or 1\nif isNegative then\nreturn -delta\nelse\nreturn delta\nend\nend\ngameConfigMapGeneratorFunctions.initializeMapGeneratorCounters=function()\ncreateAllSetupButtons()\nend\ngameConfigMapGeneratorFunctions.adaptButtonLabel=function(id,newValue,isCustomLabel,tooltip)\nisEnabled=isEnabled or true\nisCustomLabel=isCustomLabel or false\nfor _,view in pairs(gameConfigMatViews.views) do\nfor _,buttonInfo in pairs(view.buttons) do\nif buttonInfo.id~=nil and buttonInfo.id==id then\nif isCustomLabel then\nbuttonInfo.label=newValue\nelse\nbuttonInfo.label=string.format(\"%.2f\",newValue)\nend\nif tooltip~=nil then\nbuttonInfo.tooltip=tooltip\nend\nend\nend\nend\nend\ngameConfigMapGeneratorFunctions.changeValue=function(resourceType,setting,id,altClick)\nif not gameConfig.setup.randomMap then\nreturn\nend\nlocal delta=gameConfigMapGeneratorFunctions.getDeltaValue(altClick,gameConfig.mapGeneratorConfig.deltaFactor)\nif setting==\"weighting\" then\ngameConfigFunctions_changeTileEffectWeightings({resourceType=resourceType,delta=delta})\nelseif setting==\"averageTileYield\" then\ngameConfigFunctions_changeMapGeneratorTileAverageTileYield({resourceType=resourceType,delta=delta})\nelseif setting==\"yieldDiffusion\" then\ngameConfigFunctions_changeMapGeneratorTileYieldDiffusion({resourceType=resourceType,delta=delta})\nelseif setting==\"maxYield\" then\ndelta=1\nif altClick then delta=-1 end\ngameConfigFunctions_changeMapGeneratorTileMaxYield({resourceType=resourceType,delta=delta})\nend\ncreateAllSetupButtons()\nend\nfunction toggleRandomizedMap(_,_,altClick)\ngameConfig.setup.randomMap=not gameConfig.setup.randomMap\nif not gameConfig.setup.randomMap then\nmapGenerator.destroyMap()\nChangeBoardInternal(0)\nelse\nupdateRandomMapTile()\nend\ncreateAllSetupButtons()\nend\nfunction updateRandomMapTile()\nlocal marsMapTile=gameObjectHelpers.getObjectByName(\"marsMapTile\")\nmarsMapTile.setCustomObject({image=randomMapBaseImage})\nlocal reloadedTile=marsMapTile.reload()\nlocal scale={1,1,1}\nlocal index=1\nfor _,templateInfo in pairs(randomizerTemplates) do\nif index==gameConfig.mapGeneratorConfig.mapSizeSelection then\nscale=templateInfo.metadata.scale\nbreak\nend\nindex=index + 1\nend\nWait.frames(|| reloadedTile.setScale(scale),4)\nend\nfunction changeDeltaFactor(_,_,altClick)\nif not gameConfig.setup.randomMap then\nreturn\nend\nlocal factor=10\nif altClick then\nfactor=0.1\nend\ngameConfig.mapGeneratorConfig.deltaFactor=gameConfig.mapGeneratorConfig.deltaFactor * factor\nif gameConfig.mapGeneratorConfig.deltaFactor < 0.01 then\ngameConfig.mapGeneratorConfig.deltaFactor=0.01\nelseif gameConfig.mapGeneratorConfig.deltaFactor > 1 then\ngameConfig.mapGeneratorConfig.deltaFactor=1\nend\ncreateAllSetupButtons()\nend\nfunction changeMapSize(_,_,altClick)\nif not gameConfig.setup.randomMap then\nreturn\nend\nlocal delta=1\nif altClick then delta=-1 end\nlocal customLabel=\"\"\nlocal counter=1\ngameConfigFunctions_changeMapSize({delta=delta})\nfor templateName,_ in pairs(randomizerTemplates) do\nif counter==gameConfig.mapGeneratorConfig.mapSizeSelection then\ncustomLabel=\"Map Size: \"..(templateName:gsub(\"^%l\",string.upper))\nend\ncounter=counter + 1\nend\ngameConfigMapGeneratorFunctions.adaptButtonLabel(\"mapSize\",customLabel,true)\nupdateRandomMapTile()\nmapGenerator.destroyMap(gameMap)\ncreateAllSetupButtons()\nend\nfunction changeVolcanoTileAmount(_,_,altClick)\nif not gameConfig.setup.randomMap then\nreturn\nend\nlocal delta=1\nif altClick then delta=-1 end\ngameConfigFunctions_changeNumberOfVolcanoTiles({delta=delta})\ncreateAllSetupButtons()\nend\nfunction changeBlockedTileAmount(_,_,altClick)\nif not gameConfig.setup.randomMap then\nreturn\nend\nlocal delta=1\nif altClick then delta=-1 end\ngameConfigFunctions_changeNumberOfBlockedTiles({delta=delta})\ncreateAllSetupButtons()\nend\nfunction changeBonusTileRatio(_,_,altClick)\nif not gameConfig.setup.randomMap then\nreturn\nend\nlocal delta=gameConfig.mapGeneratorConfig.deltaFactor\nif altClick then delta=-gameConfig.mapGeneratorConfig.deltaFactor end\nif gameConfig.mapGeneratorConfig.bonusTilesRatio >= 10 then delta=delta * 10 end\nif gameConfig.mapGeneratorConfig.bonusTilesRatio >= 100 then delta=delta * 10 end\ngameConfigFunctions_changeBonusTileRatio({delta=delta})\ncreateAllSetupButtons()\nend\nfunction changeInitialErosions(_,_,altClick)\nif not gameConfig.setup.randomMap and gameConfig.setup.ares then\nreturn\nend\nlocal delta=1\nif altClick then delta=-1 end\ngameConfigFunctions_changeNumberOfInitialErosions({delta=delta})\ncreateAllSetupButtons()\nend\nfunction changeInitialDustorms(_,_,altClick)\nif not gameConfig.setup.randomMap and gameConfig.setup.ares then\nreturn\nend\nlocal delta=1\nif altClick then delta=-1 end\ngameConfigFunctions_changeNumberOfInitialDuststorms({delta=delta})\ncreateAllSetupButtons()\nend\nfunction changeOceanSeedPointsAmount(_,_,altClick)\nif not gameConfig.setup.randomMap then\nreturn\nend\nlocal delta=1\nif altClick then delta=-1 end\ngameConfigFunctions_changeOceanSeedPoints({delta=delta})\ncreateAllSetupButtons()\nend\nfunction changeSeedMinDistance(_,_,altClick)\nif not gameConfig.setup.randomMap then\nreturn\nend\nlocal delta=1\nif altClick then delta=-1 end\ngameConfigFunctions_changeOceanSeedMinDistance({delta=delta})\ncreateAllSetupButtons()\nend\nfunction changeShapeFactor(_,_,altClick)\nif not gameConfig.setup.randomMap then\nreturn\nend\nlocal delta=gameConfig.mapGeneratorConfig.deltaFactor\nif altClick then delta=-gameConfig.mapGeneratorConfig.deltaFactor end\ngameConfigFunctions_changeOceanShapeFactor({delta=delta})\ncreateAllSetupButtons()\nend\nfunction loadMapGenPreconfig(_,_,altClick)\nif not gameConfig.setup.randomMap then\nreturn\nend\nlocal delta=1\nif altClick then delta=-1 end\ngameConfig.setup.mapPredefinedSettings=gameConfig.setup.mapPredefinedSettings + delta\nif gameConfig.setup.mapPredefinedSettings > tableHelpers.getCount(predefinedMapSettings) then\ngameConfig.setup.mapPredefinedSettings=1\nelseif gameConfig.setup.mapPredefinedSettings < 1 then\ngameConfig.setup.mapPredefinedSettings=tableHelpers.getCount(predefinedMapSettings)\nend\nlocal counter=1\nfor name,setting in pairs(predefinedMapSettings) do\nif counter==gameConfig.setup.mapPredefinedSettings then\ngameConfig.mapGeneratorConfig=tableHelpers.deepClone(setting.config.mapGeneratorConfig)\nend\ncounter=counter + 1\nend\ngameConfigMapGeneratorFunctions.updateMapSettingsPreConfigButton()\nend\ngameConfigMapGeneratorFunctions.updateMapSettingsPreConfigButton=function()\nlocal counter=1\nlocal customLabel=\"\"\nfor _,setting in pairs(predefinedMapSettings) do\nif counter==gameConfig.setup.mapPredefinedSettings then\ncustomLabel=setting.prettyName\ntooltip=\"A selection of predefined map configurations.\\n\\n\"..\n\"Warning: Changing this will override all of your current map settings.\\n\\n\"..\n\"Details:\\n\"..\nsetting.description\ngameConfigMapGeneratorFunctions.adaptButtonLabel(\"mapPreconfig\",customLabel,true,tooltip)\nbreak\nend\ncounter=counter + 1\nend\ngameConfigMapGeneratorFunctions.initializeMapGeneratorCounters()\nend\nfunction changeCreditsWeighting(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Credits\",\"weighting\",\"creditsWeighting\",altClick) end\nfunction changeCreditsAverageTileYield(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Credits\",\"averageTileYield\",\"creditsAverageTileYield\",altClick) end\nfunction changeCreditsYieldDiffusion(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Credits\",\"yieldDiffusion\",\"creditsYieldDiffusion\",altClick) end\nfunction changeCreditsMaxYield(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Credits\",\"maxYield\",\"creditsMaxYield\",altClick) end\nfunction changeSteelWeighting(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Steel\",\"weighting\",\"steelWeighting\",altClick) end\nfunction changeSteelAverageTileYield(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Steel\",\"averageTileYield\",\"steelAverageTileYield\",altClick) end\nfunction changeSteelYieldDiffusion(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Steel\",\"yieldDiffusion\",\"steelYieldDiffusion\",altClick) end\nfunction changeSteelMaxYield(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Steel\",\"maxYield\",\"steelMaxYield\",altClick) end\nfunction changeTitaniumWeighting(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Titanium\",\"weighting\",\"titaniumWeighting\",altClick) end\nfunction changeTitaniumAverageTileYield(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Titanium\",\"averageTileYield\",\"titaniumAverageTileYield\",altClick) end\nfunction changeTitaniumYieldDiffusion(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Titanium\",\"yieldDiffusion\",\"titaniumYieldDiffusion\",altClick) end\nfunction changeTitaniumMaxYield(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Titanium\",\"maxYield\",\"titaniumMaxYield\",altClick) end\nfunction changePlantsWeighting(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Plants\",\"weighting\",\"plantsWeighting\",altClick) end\nfunction changePlantsAverageTileYield(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Plants\",\"averageTileYield\",\"plantsAverageTileYield\",altClick) end\nfunction changePlantsYieldDiffusion(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Plants\",\"yieldDiffusion\",\"plantsYieldDiffusion\",altClick) end\nfunction changePlantsMaxYield(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Plants\",\"maxYield\",\"plantsMaxYield\",altClick) end\nfunction changeEnergyWeighting(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Energy\",\"weighting\",\"energyWeighting\",altClick) end\nfunction changeEnergyAverageTileYield(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Energy\",\"averageTileYield\",\"energyAverageTileYield\",altClick) end\nfunction changeEnergyYieldDiffusion(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Energy\",\"yieldDiffusion\",\"energyYieldDiffusion\",altClick) end\nfunction changeEnergyMaxYield(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Energy\",\"maxYield\",\"energyMaxYield\",altClick) end\nfunction changeHeatWeighting(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Heat\",\"weighting\",\"heatWeighting\",altClick) end\nfunction changeHeatAverageTileYield(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Heat\",\"averageTileYield\",\"heatAverageTileYield\",altClick) end\nfunction changeHeatYieldDiffusion(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Heat\",\"yieldDiffusion\",\"heatYieldDiffusion\",altClick) end\nfunction changeHeatMaxYield(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"Heat\",\"maxYield\",\"heatMaxYield\",altClick) end\nfunction changeDrawCardWeighting(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"DrawCard\",\"weighting\",\"drawCardWeighting\",altClick) end\nfunction changeDrawCardAverageTileYield(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"DrawCard\",\"averageTileYield\",\"drawCardAverageTileYield\",altClick) end\nfunction changeDrawCardYieldDiffusion(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"DrawCard\",\"yieldDiffusion\",\"drawCardYieldDiffusion\",altClick) end\nfunction changeDrawCardMaxYield(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"DrawCard\",\"maxYield\",\"drawCardMaxYield\",altClick) end\nfunction changeEffectsWeighting(_,_,altClick) gameConfigMapGeneratorFunctions.changeValue(\"OtherEffects\",\"weighting\",\"effectsWeighting\",altClick) end","n56":"--- Milestones\nfunction gameConfigAwardsAndMilestones_swapMilestones(_,_,altClick)\nlocal delta=altClick and -1 or 1\ntableHelpers.changeNumericValue(gameConfig.milestones,\"currentSelection\",delta,1,4,true)\nmilestoneSystem_toggleMilestones({nextSet=gameConfig.milestones.currentSelection})\ncreateAllSetupButtons()\nend\nfunction gameConfigAwardsAndMilestones_toggleRandomMilestones(_,_,_)\ngameConfig.milestones.randomizer.enabled=not gameConfig.milestones.randomizer.enabled\nif gameConfig.milestones.randomizer.enabled then\nif gameConfig.milestones.randomizer.numberOfMilestones~=#gameState.milestoneGuids then\nmilestoneSystem.setupMilestones()\nend\nmilestoneSystem.randomize()\nelse\nmilestoneSystem_toggleMilestones({nextSet=gameConfig.milestones.currentSelection})\nend\ncreateAllSetupButtons()\nend\nfunction gameConfigAwardsAndMilestones_changeNumberOfMilestones(_,_,altClick)\nif not gameConfig.milestones.randomizer.enabled then return end\nlocal delta=altClick and -1 or 1\ntableHelpers.changeNumericValue(gameConfig.milestones.randomizer,\"numberOfMilestones\",delta,3,10)\ncreateAllSetupButtons()\nend\nfunction gameConfigAwardsAndMilestones_changeMaxNumberOfMilestonesPerCategory(_,_,altClick)\nif not gameConfig.milestones.randomizer.enabled then return end\nlocal delta=altClick and -1 or 1\ntableHelpers.changeNumericValue(gameConfig.milestones.randomizer,\"maxMilestonesPerCategory\",delta,1,10)\ncreateAllSetupButtons()\nend\nfunction gameConfigAwardsAndMilestones_maxClaims(_,_,altClick)\nif not gameConfig.milestones.randomizer.enabled then return end\nlocal delta=altClick and -1 or 1\ntableHelpers.changeNumericValue(gameConfig.milestones.randomizer,\"maxClaims\",delta,3,5)\nlocal milestonePlate=gameObjectHelpers.getObjectByName(\"milestonePlate\")\nlocal customization={image=milestoneData.images[gameConfig.milestones.randomizer.maxClaims - 2]}\nmilestonePlate.setCustomObject(customization)\nmilestonePlate.reload()\ncreateAllSetupButtons()\nend\nfunction gameConfigAwardsAndMilestones_toggleGuranteeHoverlord(_,_,_)\nif not gameConfig.milestones.randomizer.enabled then return end\ngameConfig.milestones.randomizer.guranteeHoverlord=not gameConfig.milestones.randomizer.guranteeHoverlord\ncreateAllSetupButtons()\nend\nfunction gameConfigAwardsAndMilestones_randomizeMilestones(_,_,_)\nif not gameConfig.milestones.randomizer.enabled then return end\nif gameConfig.milestones.randomizer.numberOfMilestones~=#gameState.milestoneGuids then\nmilestoneSystem.setupMilestones()\nend\nmilestoneSystem.randomize()\ncreateAllSetupButtons()\nend\n--- Awards ---\nfunction gameConfigAwardsAndMilestones_swapAwards(_,_,altClick)\nlocal delta=altClick and -1 or 1\ntableHelpers.changeNumericValue(gameConfig.awards,\"currentSelection\",delta,1,4,true)\nawardSystem_toggleAwards({nextSet=gameConfig.awards.currentSelection})\ncreateAllSetupButtons()\nend\nfunction gameConfigAwardsAndMilestones_toggleRandomAwards(_,_,_)\ngameConfig.awards.randomizer.enabled=not gameConfig.awards.randomizer.enabled\nif gameConfig.awards.randomizer.enabled then\nif gameConfig.awards.randomizer.numberOfAwards~=#gameState.awardGuids then\nawardSystem.setupAwards()\nend\nawardSystem.randomize()\nelse\nawardSystem_toggleAwards({nextSet=gameConfig.awards.currentSelection})\nend\ncreateAllSetupButtons()\nend\nfunction gameConfigAwardsAndMilestones_changeNumberOfAwards(_,_,altClick)\nif not gameConfig.awards.randomizer.enabled then return end\nlocal delta=altClick and -1 or 1\ntableHelpers.changeNumericValue(gameConfig.awards.randomizer,\"numberOfAwards\",delta,3,10)\ncreateAllSetupButtons()\nend\nfunction gameConfigAwardsAndMilestones_changeMaxNumberOfAwardsPerCategory(_,_,altClick)\nif not gameConfig.awards.randomizer.enabled then return end\nlocal delta=altClick and -1 or 1\ntableHelpers.changeNumericValue(gameConfig.awards.randomizer,\"maxAwardsPerCategory\",delta,1,10)\ncreateAllSetupButtons()\nend\nfunction gameConfigAwardsAndMilestones_maxFunders(_,_,altClick)\nif not gameConfig.awards.randomizer.enabled then return end\nlocal delta=altClick and -1 or 1\ntableHelpers.changeNumericValue(gameConfig.awards.randomizer,\"maxFunders\",delta,3,5)\nlocal awardPlate=gameObjectHelpers.getObjectByName(\"awardPlate\")\nlocal customization={image=awardData.images[gameConfig.awards.randomizer.maxFunders - 2]}\nawardPlate.setCustomObject(customization)\nawardPlate.reload()\ncreateAllSetupButtons()\nend\nfunction gameConfigAwardsAndMilestones_toggleGuranteeVenuphile(_,_,_)\nif not gameConfig.awards.randomizer.enabled then return end\ngameConfig.awards.randomizer.guranteeVenuphile=not gameConfig.awards.randomizer.guranteeVenuphile\ncreateAllSetupButtons()\nend\nfunction gameConfigAwardsAndMilestones_randomizeAwards(_,_,_)\nif not gameConfig.awards.randomizer.enabled then return end\nif gameConfig.awards.randomizer.numberOfAwards~=#gameState.awardGuids then\nawardSystem.setupAwards()\nend\nawardSystem.randomize()\ncreateAllSetupButtons()\nend\n--- Generic ---\nfunction gameConfigAwardsAndMilestones_randomize(_,_,_)\nif not gameConfig.awards.randomizer.enabled or not gameConfig.milestones.randomizer.enabled then return end\nif gameConfig.milestones.randomizer.enabled then\nif gameConfig.milestones.randomizer.numberOfMilestones~=#gameState.milestoneGuids then\nmilestoneSystem.setupMilestones()\nend\nmilestoneSystem.randomize()\nend\nif gameConfig.awards.randomizer.enabled then\nif gameConfig.awards.randomizer.numberOfAwards~=#gameState.awardGuids then\nawardSystem.setupAwards()\nend\nawardSystem.randomize()\nend\ncreateAllSetupButtons()\nend","n57":"gameConfigDraftingFunctions={}\nfunction gameConfigDraftingFunctions_ToggleCustomDraftingRules(_,_,altClick)\ngameConfig.drafting.custom.active=not gameConfig.drafting.custom.active\nif gameConfig.drafting.custom.active then\ngameConfigDraftingFunctions.updateCustomSettingsFromPreset(gameState.drafting.currentDraftingRule.draftingSteps)\nend\ncreateAllSetupButtons()\nend\nfunction gameConfigDraftingFunctions_ExportSettings(_,_,_)\nsetNotes(JSON.encode(gameConfig.drafting))\nend\nfunction gameConfigDraftingFunctions_ImportSettings(_,_,_)\nlocal settingsString=getNotes()\nif string.match(settingsString,\"{\\\"custom\")~=nil and string.match(settingsString,\"mapGeneratorConfig\")==nil then\nlocal importedDraftingSettings=JSON.decode(getNotes())\ngameConfig.drafting=importedDraftingSettings\nsetNotes(\"\")\ncreateAllSetupButtons()\nelse\nlogging.printToAll(\"Unable to import draft settings. Invalid format/settings.\")\nend\nend\nfunction gameConfigDraftingFunctions_ChangePreset(_,_,altClick)\nlocal delta=altClick and -1 or 1\ngameConfig.drafting.initialDraftingSelection=gameConfig.drafting.initialDraftingSelection + delta\nif gameConfig.drafting.initialDraftingSelection > tableHelpers.getCount(draftingData.initialResearchPhase) then\ngameConfig.drafting.initialDraftingSelection=1\nelseif gameConfig.drafting.initialDraftingSelection < 1 then\ngameConfig.drafting.initialDraftingSelection=tableHelpers.getCount(draftingData.initialResearchPhase)\nend\nlocal counter=1\nfor ruleName,ruleDefinition in pairs(draftingData.initialResearchPhase) do\nif counter==gameConfig.drafting.initialDraftingSelection then\ngameConfig.drafting.presetDraftingRule=ruleDefinition\ngameState.drafting.currentDraftingRule=ruleDefinition\nif gameConfig.drafting.custom.active then\ngameConfigDraftingFunctions.updateCustomSettingsFromPreset(ruleDefinition.draftingSteps)\nend\nbreak\nend\ncounter=counter + 1\nend\ncreateAllSetupButtons()\nend\ngameConfigDraftingFunctions.updateCustomSettingsFromPreset=function(stepsInput)\ngameConfig.drafting.custom.selectedStep=1\ngameConfig.drafting.custom.selectedSubStep=1\ngameConfig.drafting.custom.steps=tableHelpers.deepClone(stepsInput)\nfor _,step in pairs(gameConfig.drafting.custom.steps) do\nif step.directionOverride==nil then step.directionOverride=1 end\nif step.cardsToDeal.corps==nil then step.cardsToDeal.corps={amount=0,targetHandIndex=1}  end\nif step.cardsToDeal.preludes==nil then step.cardsToDeal.preludes={amount=0,targetHandIndex=1} end\nif step.cardsToDeal.projects==nil then step.cardsToDeal.projects={amount=0,targetHandIndex=1} end\nfor _,subStep in pairs(step.subSteps) do\nif subStep.projects==nil then subStep.projects=0 end\nif subStep.preludes==nil then subStep.preludes=0 end\nif subStep.corps==nil then subStep.corps=0 end\nend\nend\nend\nfunction gameConfigDraftingFunctions_StepsPageLeft(_,_,altClick)\nif not gameConfig.drafting.custom.active then return end\nlocal newSelectedStep=gameConfig.drafting.custom.selectedStep - 1\nif newSelectedStep < 1 then\nreturn\nend\ngameConfig.drafting.custom.selectedStep=newSelectedStep\ncreateAllSetupButtons()\nend\nfunction gameConfigDraftingFunctions_StepsPageRight(_,_,altClick)\nif not gameConfig.drafting.custom.active then return end\nlocal newSelectedStep=gameConfig.drafting.custom.selectedStep + 1\nif newSelectedStep > #gameConfig.drafting.custom.steps then\nreturn\nend\ngameConfig.drafting.custom.selectedStep=newSelectedStep\ncreateAllSetupButtons()\nend\nfunction gameConfigDraftingFunctions_StepsAddRemove(_,_,altClick)\nif not gameConfig.drafting.custom.active then return end\nif altClick then\nif #gameConfig.drafting.custom.steps < 2 then\nreturn\nend\ntable.remove(gameConfig.drafting.custom.steps,#gameConfig.drafting.custom.steps)\nelse\ntable.insert(gameConfig.drafting.custom.steps,{\ncardsToDeal={\ncorps={amount=0,targetHandIndex=1},\npreludes={amount=0,targetHandIndex=1},\nprojects={amount=0,targetHandIndex=1},},\nsubSteps={{projects=0,corps=0,preludes=0}},\ndirectionOverride=1\n})\nend\ncreateAllSetupButtons()\nend\nfunction gameConfigDraftingFunctions_ChangeDrawProjectsAmount(_,_,altClick)\nif not gameConfig.drafting.custom.active then return end\nlocal delta=altClick and -1 or 1\nlocal newValue=gameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.projects.amount + delta\nif newValue < 0 then\nreturn\nelse\ngameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.projects.amount=newValue\nend\ncreateAllSetupButtons()\nend\nfunction gameConfigDraftingFunctions_ChangeDrawPreludesAmount(_,_,altClick)\nif not gameConfig.drafting.custom.active then return end\nlocal delta=altClick and -1 or 1\nlocal newValue=gameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.preludes.amount + delta\nif newValue < 0 then\nreturn\nelse\ngameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.preludes.amount=newValue\nend\ncreateAllSetupButtons()\nend\nfunction gameConfigDraftingFunctions_ChangeDrawCorpsAmount(_,_,altClick)\nif not gameConfig.drafting.custom.active then return end\nlocal delta=altClick and -1 or 1\nlocal newValue=gameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.corps.amount + delta\nif newValue < 0 then\nreturn\nelse\ngameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.corps.amount=newValue\nend\ncreateAllSetupButtons()\nend\nfunction gameConfigDraftingFunctions_ChangeDrawProjectsTargetHandIndex(_,_,altClick)\nif not gameConfig.drafting.custom.active then return end\nlocal delta=altClick and -1 or 1\nlocal newValue=gameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.projects.targetHandIndex + delta\nif newValue < 0 then\nreturn\nelseif newValue > 8 then\ngameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.projects.targetHandIndex=8\nelse\ngameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.projects.targetHandIndex=newValue\nend\ncreateAllSetupButtons()\nend\nfunction gameConfigDraftingFunctions_ChangeDrawPreludesTargetHandIndex(_,_,altClick)\nif not gameConfig.drafting.custom.active then return end\nlocal delta=altClick and -1 or 1\nlocal newValue=gameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.preludes.targetHandIndex + delta\nif newValue < 0 then\nreturn\nelseif newValue > 8 then\ngameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.preludes.targetHandIndex=8\nelse\ngameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.preludes.targetHandIndex=newValue\nend\ncreateAllSetupButtons()\nend\nfunction gameConfigDraftingFunctions_ChangeDrawCorpsTargetHandIndex(_,_,altClick)\nif not gameConfig.drafting.custom.active then return end\nlocal delta=altClick and -1 or 1\nlocal newValue=gameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.corps.targetHandIndex + delta\nif newValue < 0 then\nreturn\nelseif newValue > 8 then\ngameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.corps.targetHandIndex=8\nelse\ngameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].cardsToDeal.corps.targetHandIndex=newValue\nend\ncreateAllSetupButtons()\nend\nfunction gameConfigDraftingFunctions_SubStepPageLeft(_,_,altClick)\nif not gameConfig.drafting.custom.active then return end\nlocal newSelectedStep=gameConfig.drafting.custom.selectedSubStep - 1\nif newSelectedStep < 1 then\nreturn\nend\ngameConfig.drafting.custom.selectedSubStep=newSelectedStep\ncreateAllSetupButtons()\nend\nfunction gameConfigDraftingFunctions_SubStepPageRight(_,_,altClick)\nif not gameConfig.drafting.custom.active then return end\nlocal newSelectedStep=gameConfig.drafting.custom.selectedSubStep + 1\nif newSelectedStep > #gameConfig.drafting.custom.steps[gameConfig.drafting.custom.selectedStep].subSteps then\nreturn\nend\ngameConfig.drafting.custom.selectedSubStep=newSelectedStep\ncreateAllSetupButtons()\nend\nfunction gameConfigDraftingFunctions_SubStepAddRemove(_,_,altClick)\nif not gameConfig.drafting.custom.active then return end\nlocal currentStep=gameConfig.drafting.custom.selectedStep\nif altClick then\nif #gameConfig.drafting.custom.steps[currentStep].subSteps < 2 then\nreturn\nend\ntable.remove(gameConfig.drafting.custom.steps[currentStep].subSteps,#gameConfig.drafting.custom.steps[currentStep].subSteps)\nelse\ntable.insert(gameConfig.drafting.custom.steps[currentStep].subSteps,{projects=0,corps=0,preludes=0})\nend\ncreateAllSetupButtons()\nend\nfunction gameConfigDraftingFunctions_ChangeSubStepHandOverProjects(_,_,altClick)\nif not gameConfig.drafting.custom.active then return end\nlocal delta=altClick and -1 or 1\nlocal currentStep=gameConfig.drafting.custom.selectedStep\nlocal currentSubStep=gameConfig.drafting.custom.selectedSubStep\nlocal newValue=gameConfig.drafting.custom.steps[currentStep].subSteps[currentSubStep].projects + delta\nif newValue < 0 then\nreturn\nelse\ngameConfig.drafting.custom.steps[currentStep].subSteps[currentSubStep].projects=newValue\nend\ncreateAllSetupButtons()\nend\nfunction gameConfigDraftingFunctions_ChangeSubStepHandOverPreludes(_,_,altClick)\nif not gameConfig.drafting.custom.active then return end\nlocal delta=altClick and -1 or 1\nlocal currentStep=gameConfig.drafting.custom.selectedStep\nlocal currentSubStep=gameConfig.drafting.custom.selectedSubStep\nlocal newValue=gameConfig.drafting.custom.steps[currentStep].subSteps[currentSubStep].preludes + delta\nif newValue < 0 then\nreturn\nelse\ngameConfig.drafting.custom.steps[currentStep].subSteps[currentSubStep].preludes=newValue\nend\ncreateAllSetupButtons()\nend\nfunction gameConfigDraftingFunctions_ChangeSubStepHandOverCorps(_,_,altClick)\nif not gameConfig.drafting.custom.active then return end\nlocal delta=altClick and -1 or 1\nlocal currentStep=gameConfig.drafting.custom.selectedStep\nlocal currentSubStep=gameConfig.drafting.custom.selectedSubStep\nlocal newValue=gameConfig.drafting.custom.steps[currentStep].subSteps[currentSubStep].corps + delta\nif newValue < 0 then\nreturn\nelse\ngameConfig.drafting.custom.steps[currentStep].subSteps[currentSubStep].corps=newValue\nend\ncreateAllSetupButtons()\nend\n\ndisableMarker=false\ngameConfig={}\r\ngameConfig.version=1\r\ngameConfig.mapSizeSelection=3\r\ngameConfig.setup={\r\nsolarPhase=true,\r\nclassicBoard=false,\r\nprelude=false,\r\ncolonies=false,\r\nvenus=false,\r\nturmoil=false,\r\nbggCorps=false,\r\ncorpEra=true,\r\ndrafting=true,\r\nextendedScripting=true,\r\nrandomizer=false,\r\nxenosCorps=false,\r\nfanMadeProjects=false,\r\npathfinders=false,\r\nbigBox=false,\r\ntimer=false,\r\nhighOrbit=false,\r\nvenusPhaseTwo=false,\r\nares=false,\r\nshowFanMadeMaps=false,\r\ncorpsToDraw=2,\r\nrandomMap=false,\r\nmapPredefinedSettings=1,\r\nvenusWin=false,\r\n}\r\ngameConfig.drafting={}\r\ngameConfig.drafting.initialDraftingSelection=1\r\ngameConfig.drafting.presetDraftingRule=draftingData.initialResearchPhase.freeDraft\r\ngameConfig.drafting.custom={\r\nactive=false,\r\nselectedStep=1,\r\nselectedSubStep=1,\r\nconsiderForPayment=10,\r\nsteps=\r\n{\r\n{\r\ncardsToDeal=\r\n{\r\ncorps={amount=2,targetHandIndex=1},\r\npreludes={amount=4,targetHandIndex=3},\r\nprojects={amount=10,targetHandIndex=2},\r\n},\r\nsubSteps={{projects=8,corps=0,preludes=0},\r\n{projects=6,corps=0,preludes=0},\r\n{projects=4,corps=0,preludes=0},\r\n{projects=2,corps=0,preludes=0}\r\n},\r\ndirectionOverride=1\r\n}\r\n}\r\n}\r\ngameConfig.mapGeneratorConfig={}\r\ngameConfig.mapGeneratorConfig.mapSizeSelection=3\r\ngameConfig.mapGeneratorConfig.deltaFactor=0.1\r\ngameConfig.mapGeneratorConfig.bonusTilesRatio=8/10\r\ngameConfig.mapGeneratorConfig.totallyRandomTilesRatio=0.1\ngameConfig.mapGeneratorConfig.tileEffects={\r\nPlants={weighting=10,averageTileYield=1.8,yieldDiffusion=0.25,maxYield=3,seedPoints=3,shapeFactor=2,seedDistance=4},\r\nTitanium={weighting=2,averageTileYield=1,yieldDiffusion=0.4,maxYield=2,seedPoints=5,shapeFactor=0.6,seedDistance=4},\r\nSteel={weighting=5,averageTileYield=1.7,yieldDiffusion=0.25,maxYield=3,seedPoints=5,shapeFactor=0.8,seedDistance=4},\r\nDrawCard={weighting=3,averageTileYield=1.45,yieldDiffusion=0.25,maxYield=3,seedPoints=200,shapeFactor=0.2,seedDistance=4},\r\nHeat={weighting=0,averageTileYield=2,yieldDiffusion=0.5,maxYield=4,seedPoints=3,shapeFactor=2,seedDistance=4},\r\nEnergy={weighting=0,averageTileYield=1.5,yieldDiffusion=0.25,maxYield=4,seedPoints=2,shapeFactor=2,seedDistance=4},\r\nCredits={weighting=0,averageTileYield=5,yieldDiffusion=0.5,maxYield=6,seedPoints=5,shapeFactor=0.2,seedDistance=1},\r\nOtherEffects={weighting=0,averageTileYield=0.0,yieldDiffusion=0.0,maxYield=0,seedPoints=200,shapeFactor=0.2,seedDistance=1}\r\n}\r\ngameConfig.mapGeneratorConfig.oceanSettings={\r\noceanSeedPoints=4,\r\noceanSeedMinDistance=4,\r\noceanShapeFactor=1,-- values >= 1 --> bulky cluster,values < 1 --> snakey ocean lines\r\n}\r\ngameConfig.mapGeneratorConfig.absoluteTiles={\r\nvolcanoTiles=3,\r\nblockedTiles=0,-- blocked tiles give adjancency bonuses (e.g. draw 1 card,gain 1 plant,etc)\r\ninitialErosions=0,\r\ninitialDuststorms=3,\r\n}\r\ngameConfig.milestones={}\r\ngameConfig.milestones.currentSelection=1\r\ngameConfig.milestones.randomizer={}\r\ngameConfig.milestones.randomizer.enabled=false\r\ngameConfig.milestones.randomizer.numberOfMilestones=5\r\ngameConfig.milestones.randomizer.maxMilestonesPerCategory=2\r\ngameConfig.milestones.randomizer.guranteeHoverlord=true\r\ngameConfig.milestones.randomizer.maxClaims=3\r\ngameConfig.awards={}\r\ngameConfig.awards.currentSelection=1\r\ngameConfig.awards.randomizer={}\r\ngameConfig.awards.randomizer.enabled=false\r\ngameConfig.awards.randomizer.numberOfAwards=5\r\ngameConfig.awards.randomizer.maxAwardsPerCategory=2\r\ngameConfig.awards.randomizer.guranteeVenuphile=true\r\ngameConfig.awards.randomizer.maxFunders=3\r\ngameConfig.globalParameters={}\r\ngameConfig.globalParameters.temperature={\r\nselection=1,\r\nbonusSelection=1,\r\naresSelection=1,\r\n}\r\ngameConfig.globalParameters.oxygen={\r\nselection=1,\r\nbonusSelection=1,\r\naresSelection=1,\r\n}\r\ngameConfig.globalParameters.ocean={\r\nselection=1,\r\nbonusSelection=1,\r\naresSelection=1,\r\n}\r\ngameConfig.globalParameters.venus={\r\nselection=1,\r\nbonusSelection=1,\r\naresSelection=1,-- just a dummy value for symmetry reasons - venus should never have an effect on Mars hazards\r\n}\r\ngameConfig.timerConfiguration={\r\nisPaused=false,\r\nsecondsPlusPerGeneration=120,\r\nsecondsPlusPerEndTurn=15,\r\nsecondsInitial=1200,\r\nsecondsPerNegativeVp=10,-- minimum\r\nnegativeVpThreshold=0,\r\ndelta=1,\r\npauseOnDraft=false,\r\ntimeoutAction=\"doNothing\",\r\n}\r\ngameConfigFunctions={}\r\ngameConfigFunctions.refreshView=function()\r\nif gameState.setupIsDone and gameConfigMatViews.currentView < 3 then\r\ngameConfigMatViews.currentView=3\r\nupdateGameConfigSettingsView()\r\nend\r\nend\r\nfunction changeView(newView)\r\nlocal gameConfigMat=gameObjectHelpers.getObjectByName(\"gameConfigTile\")\r\nif gameConfigMat.getButtons()~=nil then\r\nfor i=#gameConfigMat.getButtons()-1,0,-1 do\r\ngameConfigMat.removeButton(i)\r\nend\r\nend\r\nlocal buttons=tableHelpers.combineSingleValueTables({gameConfigMatViews.mainButtons,newView.buttons})\r\ncreateSetupButtonsInternal(gameConfigMat,buttons)\r\nend\r\nfunction createAllSetupButtons()\r\nlocal gameConfigMat=gameObjectHelpers.getObjectByName(\"gameConfigTile\")\r\nlocal currentView=gameConfigMatViews.views[gameConfigMatViews.currentView]\r\nlocal buttons=tableHelpers.combineSingleValueTables({gameConfigMatViews.mainButtons,currentView.buttons})\r\ncreateSetupButtonsInternal(gameConfigMat,buttons)\r\nend\r\nfunction createSetupButtonsInternal(parentObject,buttons)\r\nlocal createFromScratch=parentObject.getButtons()==nil\r\nlocal buttonAmount=0\r\nfor i=1,#buttons do\r\nbuttonFunctions.adaptButtonColor(buttons[i])\r\nbuttonFunctions.adaptButtonLabel(buttons[i])\r\nbuttonFunctions.adaptButtonTooltip(buttons[i])\r\nbuttons[i].index=buttonAmount\r\nif transientState.finishSetupButtonDisabled and buttons[i].buttonType==\"finishSetupButton\" then\r\nbuttons[i].color={50/255,50/255,50/255,0.95}\r\nend\r\nif gameState.setupIsDone and buttons[i].buttonType==\"startGameButton\" then\r\nbuttons[i].color={255/255,115/255,0,0.95}\r\nend\r\nif createFromScratch then\r\nparentObject.createButton(buttons[i])\r\nelse\r\nparentObject.editButton(buttons[i])\r\nend\r\nbuttonAmount=buttonAmount + 1\r\nend\r\nend\r\nfunction printConfig(_,playerColor,_)\r\nGlobal.call(\"gameConfigFunctions_publishConfig\")\r\nend\r\nfunction loadConfig(_,playerColor,_)\r\nlocal notes=getNotes()\r\nif string.find(notes,\"{\") and string.find(notes,\"}\") then\r\nGlobal.call(\"gameConfigFunctions_loadConfig\")\r\nelse\r\nbroadcastToAll(\"No game config to load.\")\r\nend\r\nend\r\nfunction clearNotes(_,playerColor,_)\r\nsetNotes(\"\")\r\nend\r\nfunction toggleGameConfigSettings(_,_,altClick)\r\nlocal delta=1\r\nif altClick then\r\ndelta=-1\r\nend\r\ngameConfigMatViews.currentView=gameConfigMatViews.currentView + delta\r\nupdateGameConfigSettingsView()\r\nend\r\nfunction updateGameConfigSettingsView()\r\nif gameState.setupIsDone then\r\nif gameConfigMatViews.currentView > #gameConfigMatViews.views then\r\ngameConfigMatViews.currentView=3\r\nelseif gameConfigMatViews.currentView < 3 then\r\ngameConfigMatViews.currentView=#gameConfigMatViews.views\r\nend\r\nelse\r\nif gameConfigMatViews.currentView > #gameConfigMatViews.views then\r\ngameConfigMatViews.currentView=1\r\nelseif gameConfigMatViews.currentView < 1 then\r\ngameConfigMatViews.currentView=#gameConfigMatViews.views\r\nend\r\nend\r\nlocal gameConfigMat=gameObjectHelpers.getObjectByName(\"gameConfigTile\")\r\nlocal customization={}\r\ncustomization.image=gameConfigMatViews.views[gameConfigMatViews.currentView].imageUrl\r\ngameConfigMat.setCustomObject(customization)\r\nlocal reloadedTile=gameConfigMat.reload()\r\nfor _,buttonInfo in pairs(gameConfigMatViews.mainButtons) do\r\nif buttonInfo.buttonType==\"toggleGameConfigSettings\" then\r\nbuttonInfo.label=gameConfigMatViews.views[gameConfigMatViews.currentView].toggleLabel\r\nend\r\nend\r\nWait.frames(|| changeView(gameConfigMatViews.views[gameConfigMatViews.currentView]),1)\r\nend\r","n58":"function AddBigBox()\ngameObjectHelpers.addDecks(\"projectDeck\",\"bigBoxProjects\")\ngameObjectHelpers.addDecks(\"corpDeck\",\"bigBoxCorps\")\nend\nfunction AddPathfinders()\nlocal bag=gameObjectHelpers.getObjectByName(\"pathFinderBag\")\nlocal targetTransform=tablePositions.pathfinder.pathfinderBoard\nlocal board=bag.takeObject({position=targetTransform.pos,rotation=targetTransform.rot})\nboard.lock()\nWait.time(function()\nWait.condition(function()\nbag.takeObject({position=vectorHelpers.fromLocalToWorld(board,tablePositions.pathfinder.pathfinderPlanetTracks.venus[1])})\nbag.takeObject({position=vectorHelpers.fromLocalToWorld(board,tablePositions.pathfinder.pathfinderPlanetTracks.earth[1])})\nbag.takeObject({position=vectorHelpers.fromLocalToWorld(board,tablePositions.pathfinder.pathfinderPlanetTracks.mars[1])})\nbag.takeObject({position=vectorHelpers.fromLocalToWorld(board,tablePositions.pathfinder.pathfinderPlanetTracks.jovian[1])})\nend,function() return board.resting end)\nend,1)\ngameObjectHelpers.addDecks(\"projectDeck\",\"pathFinderProjects\")\ngameObjectHelpers.addDecks(\"corpDeck\",\"pathFinderCorps\")\ngameObjectHelpers.addDecks(\"preludeDeck\",\"pathFinderPreludes\")\nWait.frames(function()\ngameObjectHelpers.cleanOutDeck(\"projectDeck\",expansionCrossoverCards.pathfinderProjects.venus,gameConfig.setup.venus)\ngameObjectHelpers.cleanOutDeck(\"projectDeck\",expansionCrossoverCards.pathfinderProjects.colonies,gameConfig.setup.colonies)\ngameObjectHelpers.cleanOutDeck(\"projectDeck\",expansionCrossoverCards.pathfinderProjects.turmoil,gameConfig.setup.turmoil)\ngameObjectHelpers.cleanOutDeck(\"preludeDeck\",expansionCrossoverCards.pathfinderPreludes.venus,gameConfig.setup.venus)\ngameObjectHelpers.cleanOutDeck(\"preludeDeck\",expansionCrossoverCards.pathfinderPreludes.colonies,gameConfig.setup.colonies)\ngameObjectHelpers.cleanOutDeck(\"corpDeck\",expansionCrossoverCards.pathfinderCorps.venus,gameConfig.setup.venus)\nend,20)\nWait.time(function() board.call(\"activatePathfinderMatFeatures\") end,2)\nend\nfunction AddAres()\ngameState.ares=true\ngameObjectHelpers.addDecks(\"projectDeck\",\"aresDeck\")\ngameObjectHelpers.cleanOutDeck(\"projectDeck\",expansionCrossoverCards.ares.projects.baseGameReplacements,false)\npositionAsset(\"duststormBag\",tablePositions.ares.duststormBag)\npositionAsset(\"erosionBag\",tablePositions.ares.erosionBag)\nend\nfunction AddHighOrbit()\nlocal highOrbitDeck=gameObjectHelpers.getObjectByName(\"highOrbitInfrastructureDeck\")\nlocal baseLocation={54.50,1.03,-21.25}\nlocal nextFreePosition=tableHelpers.deepClone(baseLocation)\nlocal locationMap={}\nlocal locationMapLength=0\nfor i,card in pairs(highOrbitDeck.getObjects()) do\nlocal continue=false\nfor name,position in pairs(locationMap) do\nif name==card.name then\ncontinue=true\nend\nend\nif not continue then\nlocationMap[card.name]=tableHelpers.deepClone(nextFreePosition)\nnextFreePosition=vectorHelpers.addVectors(nextFreePosition,{0,0,5})\nlocationMapLength=locationMapLength + 1\nend\nif locationMapLength%9==0 then\nlocal factor=math.floor(locationMapLength/9)\nnextFreePosition=vectorHelpers.addVectors(baseLocation,{-7*factor,0,0})\nend\nend\nfor i=1,#highOrbitDeck.getObjects() - 1 do\nlocal card=highOrbitDeck.takeObject()\ncard.setPosition(locationMap[card.getName()])\ncard.setRotation({0,270,0})\nend\nWait.frames( function()\nlocal obj=getObjectFromGUID(\"f2855f\")\nif obj~=nil then\nobj.setRotation({0,270,0})\nobj.setPosition(locationMap[obj.getName()])\nend\nend\n,12)\nend\nfunction AddXenos()\ngameObjectHelpers.addDecks(\"corpDeck\",\"xenosCorps\")\nend\nfunction AddFanMadeProjects()\ngameObjectHelpers.addDecks(\"projectDeck\",\"fanMadeProjects\")\nend\nfunction AddVenus()\ngameState.venus=true\nif gameState.solarPhase~=false then\nlogging.printToAll(\"Solar Phase enabled with Venus. Click on Button to disable again\",{1,1,1},loggingModes.exception)\ngameState.solarPhase=true\nelse\nlogging.printToAll(\"Solar phase was already disabled. Not enabling.\",{1,1,1},loggingModes.exception)\nend\nAddVenusAssets()\nlocal customization={}\nif gameConfig.setup.venusPhaseTwo then\nAddVenusPhaseTwoAssets()\nvenusMap=hexMapHelpers.makeMapComputeFriendly(predefinedVenusMaps.venusPhaseTwo)\ncustomization.image=predefinedVenusMaps.venusPhaseTwo.metadata.imageUrl\nelse\nvenusMap=hexMapHelpers.makeMapComputeFriendly(predefinedVenusMaps.baseMap)\ncustomization.image=predefinedVenusMaps.baseMap.metadata.imageUrl\nend\nlocal venusMapTile=gameObjectHelpers.getObjectByName(\"venusMapTile\")\nvenusMapTile.setCustomObject(customization)\nvenusMapTile.reload()\nWait.frames(|| positionAsset(\"venusMapTile\",tablePositions.venus.venusMapTile),10)\nvenusMap.metadata.wasUpdated=true\nend\nfunction AddVenusAssets()\ngameObjectHelpers.addDecks(\"projectDeck\",\"venusProjects\")\ngameObjectHelpers.addDecks(\"corpDeck\",\"venusCorps\")\nif not gameConfig.awards.randomizer.enabled then\nawardSystem.spawnAwardTile(awardData.infos.Venuphile)\nend\nif not gameConfig.milestones.randomizer.enabled then\nmilestoneSystem.spawnMilestoneTile(milestoneData.infos.Hoverlord)\nend\npositionAsset(\"venusTerraformingTrack\",tablePositions.venus.venusTrack)\npositionAsset(\"venusTerraformingMarker\",tablePositions.venus.venusMarker)\nend\nfunction positionAsset(assetName,targetTransform)\nlocal asset=gameObjectHelpers.getObjectByName(assetName)\nasset.setPositionSmooth(targetTransform.pos)\nasset.setRotation(targetTransform.rot)\nend\nfunction AddPrelude()\ngameState.prelude=true\ngameObjectHelpers.addDecks(\"projectDeck\",\"preludeProjects\")\ngameObjectHelpers.addDecks(\"corpDeck\",\"preludeCorps\")\nend\nfunction AddColonies()\ngameState.colonies=true\n--add the cards\ngameObjectHelpers.addDecks(\"projectDeck\",\"coloniesProjects\")\ngameObjectHelpers.addDecks(\"corpDeck\",\"coloniesCorps\")\nend\nfunction AddTurmoil()\ngameState.turmoil=true\ngameState.solarPhase=true\nmilestoneSystem.turmoilSpecialHandling()\ngameObjectHelpers.addDecks(\"projectDeck\",\"turmoilProjects\")\ngameObjectHelpers.addDecks(\"corpDeck\",\"turmoilCorps\")\nend\nfunction AddBGGCorps()\ngameObjectHelpers.addDecks(\"corpDeck\",\"bggCorps\")\nend\nfunction AddCorpEra()\ngameObjectHelpers.addDecks(\"projectDeck\",\"corpEraProjects\")\ngameObjectHelpers.addDecks(\"corpDeck\",\"corpEraCorps\")\nend\nfunction SpawnTableaus()\nfor index,player in pairs(gameState.allPlayers) do\nif player.playerArea.activationTableau==nil or getObjectFromGUID(player.playerArea.activationTableau)==nil then\nplayer.playerArea.activationTableau=nil\ncreateActivationTableau(player)\nend\nobjectActivationSystem_enableAllActivationRules({playerColor=player.color})\nif player.playerArea.iconTableaus==nil or next(player.playerArea.iconTableaus)==nil then\ncreateIconTableaus(player)\nend\nend\nend\nfunction AddVenusPhaseTwoAssets()\ngameObjectHelpers.addDecks(\"projectDeck\",\"venusPhaseTwoDeck\")\nadaptGlobalParametersFromMapMetadata(predefinedVenusMaps.venusPhaseTwo.metadata)\npositionAsset(\"floatingArrayBag\",tablePositions.venusPhaseTwo.floatingArrayBag)\npositionAsset(\"gasMineBag\",tablePositions.venusPhaseTwo.gasMineBag)\npositionAsset(\"venusHabitatBag\",tablePositions.venusPhaseTwo.venusHabitatBag)\nend\nfunction spawnCardResourceCounters()\nlocal guidsOfObjectsToSpawn={\nsetupGuids.animalWildSource,\nsetupGuids.microbeFloaterSource,\nsetupGuids.scienceFighterSource,\nsetupGuids.dataAsteroidSource,\nsetupGuids.actionMarkersSource,\n}\nfor location,posAndRot in pairs(tablePositions.gameBoardAssets.cardResourceTokensPositions) do\nfor i,guid in ipairs(guidsOfObjectsToSpawn) do\nlocal rotatedSpacing=vectorHelpers.rotateVectorY(tablePositions.gameBoardAssets.cardResourceTokensSpacing,posAndRot.r[2])\nlocal pos=vectorHelpers.addVectors(posAndRot.p,vectorHelpers.multiplyVectorWithScalar(rotatedSpacing,(i-1)))\ncreateClonableObject(guid,pos,posAndRot.r)\nend\nend\nend\n--Finish Setup\nfunction FinishSetup()\nif gameState.setupIsDone then\nreturn\nend\ntransientState.finishSetupButtonDisabled=true\ncreateAllSetupButtons()\nfunction finishCoroutine()\ngameState.activeExpansions=tableHelpers.deepClone(gameConfig.setup)\nupdatePlayerSettings()\nif gameConfigMatViews.currentView < 3 then\ngameConfigMatViews.currentView=3\nfor i=1,5 do coroutine.yield(0) end\nupdateGameConfigSettingsView()\nend\ngameState.extendedScriptingEnabled=gameConfig.setup.extendedScripting\nif gameConfig.setup.venus then\nif gameConfig.setup.venusWin then\ngameState.venusIsWin=true\nend\nAddVenus()\nend\nif gameConfig.setup.colonies then\nAddColonies()\nend\nif gameConfig.setup.prelude then\nAddPrelude()\nend\nif gameConfig.setup.timer then\nAddTimerAssets()\nend\nif gameConfig.setup.bggCorps then\nAddBGGCorps()\nend\nif gameConfig.setup.corpEra then\nAddCorpEra()\nend\nif gameConfig.setup.turmoil then\nAddTurmoil()\nend\nif gameConfig.setup.xenosCorps then\nAddXenos()\nend\nif gameConfig.setup.fanMadeProjects then\nAddFanMadeProjects()\nend\nif gameConfig.setup.pathfinders then\nAddPathfinders()\nend\nif gameConfig.setup.ares then\nAddAres()\nend\nif gameConfig.setup.highOrbit then\nAddHighOrbit()\nend\nif gameConfig.setup.drafting then\nEnableDraft()\nend\nif gameState.extendedScriptingEnabled then\nSpawnTableaus()\nend\nif gameConfig.setup.bigBox then\nAddBigBox()\nend\nif not gameConfig.setup.solarPhase then\nDisableSolarPhase()\nend\nfor i=1,30 do\ncoroutine.yield(0)\nend\nif gameState.turmoil then\nlocal turmoilDeck=gameObjectHelpers.getObjectByName(\"turmoilDeck\")\nif gameState.venus then\ngameObjectHelpers.addDecks(\"turmoilDeck\",\"turmoilVenusCards\")\nend\nif gameState.colonies then\ngameObjectHelpers.addDecks(\"turmoilDeck\",\"turmoilColonyCards\")\nend\nif gameState.colonies and gameState.venus then\ngameObjectHelpers.addDecks(\"turmoilDeck\",\"turmoilColonyVenusCards\")\nend\nturmoilDeck.shuffle()\nend\ngameState.corporationsToDeal=gameConfig.setup.corpsToDraw\nbroadcastToAll(\"Make Mars Green Again!\",{0,2,0})\nbroadcastToAll(\"Click Research to Begin\",{1,1,0})\nif gameConfig.setup.randomizer then\nbroadcastToAll(\"Use a randomizer to generate a map\",{1,1,0})\nCreateRandomizerButton()\ninitializeRandomizerAwardsAndMilestones()\nend\nloadExpansionBoardgameTile()\nfor _,player in pairs(gameState.allPlayers) do\nif player.playerArea.iconTableaus[1]~=nil and getObjectFromGUID(player.playerArea.iconTableaus[1])~=nil then\ntoggleIconTableaus(player.color)\nWait.condition(|| toggleIconTableaus(player.color),function() return getObjectFromGUID(player.playerArea.iconTableaus[1])==nil end)\nend\nend\nsetupMapButtons()\nsetupStandardProjectMat()\nensureBagOceans()\nspawnCardResourceCounters()\nlocal counter=180\nwhile counter > 0 do\ncounter=counter - 1\nif cloningOngoing then counter=180 end\nif dealingInProgress then counter=180 end\nfor _,ongoing in pairs(cloningOngoingTable) do\nif ongoing then\ncounter=180\nend\nend\ncoroutine.yield(0)\nend\ngameState.setupIsDone=true\ncreateAllSetupButtons()\ngameState.wasUpdated=true\nreturn 1\nend\nstartLuaCoroutine(self,\"finishCoroutine\")\nend\nfunction AddTimerAssets()\ntimerFunctions.setupTimer()\nend\nfunction updatePlayerSettings()\nfor _,player in pairs(gameState.allPlayers) do\nlocal discountTags=tableHelpers.combineSingleValueTables({icons.baseIconNames,icons.specialIconNames,icons.anyTagNames})\nlocal tags=tableHelpers.combineSingleValueTables({icons.baseIconNames,icons.specialIconNames})\nif gameConfig.setup.pathfinders then\ndiscountTags=tableHelpers.combineSingleValueTables({discountTags,icons.pathfinder})\ntags=tableHelpers.combineSingleValueTables({discountTags,icons.pathfinder})\nend\nif gameConfig.setup.highOrbit then\ndiscountTags=tableHelpers.combineSingleValueTables({discountTags,icons.highOrbit})\ntags=tableHelpers.combineSingleValueTables({discountTags,icons.highOrbit})\nend\nplayer.paymentSystemConfig=paymentSystemConfig:new(discountTags)\nplayer.tagSystem=tagSystem:new(tags)\nend\nend\nfunction setupStandardProjectMat()\nlocal spMat=gameObjectHelpers.getObjectByName(\"standardProjectTile\")\nlocal spButtonInfos=standardProjectTileData.default.buttons\nlocal customization={image=standardProjectTileData.default.imageUrl}\nif gameConfig.setup.venusPhaseTwo then\nspButtonInfos=standardProjectTileData.venusPhaseTwo.buttons\ncustomization={image=standardProjectTileData.venusPhaseTwo.imageUrl}\nelseif gameConfig.setup.venus and gameConfig.setup.colonies then\nspButtonInfos=standardProjectTileData.venusAndColonies.buttons\ncustomization={image=standardProjectTileData.venusAndColonies.imageUrl}\nelseif gameConfig.setup.colonies then\nspButtonInfos=standardProjectTileData.colonies.buttons\ncustomization={image=standardProjectTileData.colonies.imageUrl}\nelseif gameConfig.setup.venus then\nspButtonInfos=standardProjectTileData.venus.buttons\ncustomization={image=standardProjectTileData.venus.imageUrl}\nend\nspMat.setCustomObject(customization)\nWait.frames(|| Wait.condition(function()\nlocal reloadedTile=spMat.reload()\nfor i,buttonInfo in pairs(spButtonInfos) do\nreloadedTile.createButton({\nclick_function=buttonInfo.click_function,\ntooltip=buttonInfo.tooltip,\nfunction_owner=self,\nposition={0.00,0.11,0.87 -(i-1) * 0.3435 * (5/(#spButtonInfos-1))},\nrotation={0,0,0},\nwidth=1100,\nheight=400,\nscale={0.5,0.1,0.15},\ncolor={1,0.25,0.25,0.2}\n})\nend\nend,function() return spMat.resting end),20)\nend\nfunction setupMapButtons()\nlocal mainBoardTile=gameObjectHelpers.getObjectByName(\"mainBoardTile\")\nfor _,buttonInfo in pairs(playMatButtons.mainMat) do\nmainBoardTile.createButton(buttonInfo)\nend\nend\nfunction setupBoard()\ncolonySetup.initializeButtons()\nend\ncreatingOceans=false\nfunction ensureBagOceans()\ngameState.oceansNeeded=#globalParameters.ocean.mappings[globalParameterSystem.values.ocean.selection].steps-1\nlocal oceansToCreate=gameState.oceansNeeded\nlocal oceansKnown=#gameState.oceanTileGuids\nlog(\"Need to create oceans\")\nlog(oceansToCreate)\nlog(\"Know about oceans\")\nlog(oceansKnown)\nfunction ensureCoroutine()\nwhile creatingOceans do\ncoroutine.yield(0)\nend\ncreatingOceans=true\nlocal oceansKnown=#gameState.oceanTileGuids\noceansToCreate=oceansToCreate - oceansKnown\nfor i=1,oceansToCreate do\ncloneOceanCoroutine()\nend\ncreatingOceans=false\nreturn 1\nend\nstartLuaCoroutine(self,\"ensureCoroutine\")\nend\nfunction cloneOceanCoroutine()\nlocal genericOceanTile=gameObjectHelpers.getObjectByName(\"genericOcean\")\nlocal copiedTile=genericOceanTile.clone()\ncoroutine.yield(0)\nwhile copiedTile.getGUID()==genericOceanTile.getGUID() do\ncoroutine.yield(0)\nend\ncopiedTile.setLock(false)\ngameObjectHelpers.recordOcean(copiedTile.getGUID())\nlocal oceanBag=gameObjectHelpers.getObjectByName(\"oceanBag\")\nlocal position=oceanBag.getPosition()\nposition[2]=position[2] + math.random()\ncopiedTile.setPositionSmooth(position,false,false)\nbagProtector.addToAllowList(oceanBag.getGUID(),copiedTile.getGUID())\ncoroutine.yield(0)\nreturn 1\nend\nfunction ToggleGlobalParameters()\nlocal tempToken=getObjectFromGUID(globalParameters.temperature.objectGuid)\ngameState.globalParameterSelection=gameState.globalParameterSelection + 1\nif gameState.globalParameterSelection > #globalParameters.temperature.mappings then\ngameState.globalParameterSelection=1\nend\nlocal customization={}\ncustomization.image=globalParameters.temperature.mappings[gameState.globalParameterSelection].imageUrl\ntempToken.setCustomObject(customization)\ntempToken.reload()\nend\nfunction gameSetup_research()\ninitialResearch()\nend\nfunction rollFirstPlayer(numberOfPlayers,numberOfRolls)\nlocal randomTable={}\nlocal maxValue=0\nlocal firstPlayerIndex=-1\nlocal i=0\nlocal tie=false\nwhile i < numberOfRolls or tie==true do\nlocal playerIndex=math.random(1,numberOfPlayers)\nif randomTable[playerIndex]==nil then\nrandomTable[playerIndex]=1\nelse\nrandomTable[playerIndex]=randomTable[playerIndex] + 1\nend\nif maxValue==randomTable[playerIndex] then\ntie=true\nelseif maxValue < randomTable[playerIndex] then\nfirstPlayerIndex=playerIndex\nmaxValue=randomTable[playerIndex]\ntie=false\nend\ni=i + 1\nend\nlog(\"Rolled \"..i..\" times first player with the following distribution (not ordered):\")\nlog(randomTable)\nreturn firstPlayerIndex\nend\nfunction initialResearch()\nif not gameState.setupIsDone then\nreturn\nend\ngameState.firstPlayer=rollFirstPlayer(gameState.numberOfPlayers,100)\nif gameConfig.setup.timer then\ntimerFunctions.initializeTimer(gameConfig.timerConfiguration)\nend\ngameObjectHelpers.getObjectByName(\"gameConfigTile\").destruct()\ngameState.started=true\nupdatePlayerSettings()\nensureBagOceans()\nglobalParameterSystem.bonusSetup()\nglobalParameterSystem.setupButtons()\nlocal projectDeck=tryToFindProjectStack()\nlocal preludeDeck=gameObjectHelpers.getObjectByName(\"preludeDeck\")\nlocal corpDeck=gameObjectHelpers.getObjectByName(\"corpDeck\")\nlog(\"Setting first player token\")\npassFirstPlayer()\nlog(\"Shuffling decks\")\nprojectDeck.shuffle()\npreludeDeck.shuffle()\nif gameState.corporationsToDeal==0 then\nbroadcastToAll(\"Not shuffling corps because we are not dealing any\")\nelse\ncorpDeck.shuffle()\nend\nif not gameConfig.setup.corpEra then\nfor _,player in pairs(gameState.allPlayers) do\nlocal playerStartProduction={productionValues={Credits=1,Steel=1,Titanium=1,Plants=1,Energy=1,Heat=1},\nresourceValues={},effects={}}\nWait.time(|| objectActivationSystem.doAction(player,nil,\"non corp era setup\",playerStartProduction),4)\nend\nend\nif gameState.colonies then\ncolonySetup.setup()\nif gameState.numberOfPlayers==1 then\ngetObjectFromGUID(gameState.allPlayers[1].playerArea.playerMat).call(\"changeProduction\",{\nkey=\"credits\",\namount=-2,\n})\nend\nend\nif gameState.turmoil then\nturmoilSetup()\nend\nWait.frames(function()\ndealStartingCards(projectDeck,preludeDeck,corpDeck)\nif gameState.numberOfPlayers==1 then\nsoloPlaySetup(projectDeck)\nend\nend,3)\ngameState.currentPhase=phases.gameStartPhase\nlog(\"Updating player UI\")\nupdatePlayerUI()\ngameObjectHelpers.getObjectByName(\"milestonePlate\").call(\"setupFinished\")\ngameObjectHelpers.getObjectByName(\"awardPlate\").call(\"setupFinished\")\nawardAndMilestoneFunctions.finalizeRandomizer()\nlocal marsMapTile=gameObjectHelpers.getObjectByName(\"gameMap\")\nsetupMapSnapPoints(gameMap,marsMapTile)\nif gameConfig.setup.venus then\nlocal venusMapTile=gameObjectHelpers.getObjectByName(\"venusMapTile\")\nsetupMapSnapPoints(venusMap,venusMapTile)\nend\nsetupSpaceTileSnapPoints()\nif gameConfig.setup.ares then\nWait.time(|| aresFunctions.finishSetup(),0.25)\nend\ngameState.wasUpdated=true\nend\nfunction setupMapSnapPoints(map,mapTile)\nlocal snapPoints=Global.getSnapPoints()\nfor i,jkMatrix in pairs(map.tiles) do\nfor j,kMatrix in pairs(jkMatrix) do\nfor k,tile in pairs(kMatrix) do\nlocal pos=hexMapHelpers.indicesToWorldCoordinates(map,{i,j,k},mapTile)\nlocal snapPoint={}\nsnapPoint.position=vectorHelpers.addVectors(pos,{0,-1,0})\nsnapPoint.rotation={0,270,0}\nsnapPoint.rotation_snap=true\ntable.insert(snapPoints,snapPoint)\nend\nend\nend\nGlobal.setSnapPoints(snapPoints)\nend\nfunction setupSpaceTileSnapPoints()\nfor tableName,spaceTileTable in pairs(tablePositions.reservedTiles.spaceTiles) do\nlocal skip=true\nif tableName==\"baseGame\" then\nskip=false\nelseif tableName==\"venus\" and gameConfig.setup.venus then\nskip=false\nelseif tableName==\"turmoil\" and gameConfig.setup.turmoil then\nskip=false\nelseif tableName==\"pathfinder\" and gameConfig.setup.pathfinders then\nskip=false\nend\nif not skip then\nlocal snapPoints=Global.getSnapPoints()\nfor _,entry in pairs(spaceTileTable) do\nlocal snapPoint={}\nsnapPoint.position=entry.pos\nsnapPoint.rotation=entry.rot\nsnapPoint.rotation_snap=true\ntable.insert(snapPoints,snapPoint)\nend\nGlobal.setSnapPoints(snapPoints)\nend\nend\nend\nfunction dealStartingCards(projectDeck,preludeDeck,corpDeck)\nif gameConfig.drafting.custom.active then\nresearchPhaseFunctions.beginResearchPhase({draftingSteps=gameConfig.drafting.custom.steps})\nelse\nlocal counter=1\nfor ruleName,ruleDefinition in pairs(draftingData.initialResearchPhase) do\nif counter==gameConfig.drafting.initialDraftingSelection then\nresearchPhaseFunctions.beginResearchPhase(ruleDefinition)\nbreak\nend\ncounter=counter + 1\nend\nend\nlocal numberOfCorps=0\nlocal numberOfPreludes=0\nfor _,step in pairs(gameState.drafting.currentDraftingRule.draftingSteps) do\nif step.cardsToDeal.corps~=nil then\nnumberOfCorps=numberOfCorps + step.cardsToDeal.corps.amount\nend\nif step.cardsToDeal.preludes~=nil then\nnumberOfPreludes=numberOfPreludes + step.cardsToDeal.preludes.amount\nend\nend\nif numberOfCorps==0 then\nlocal corpDeck=gameObjectHelpers.getObjectByName(\"corpDeck\")\nif #gameState.allPlayers * gameConfig.setup.corpsToDraw > #corpDeck.getObjects() then\ngameConfig.setup.corpsToDraw=math.lower(#corpDeck.getObjects() / #gameState.allPlayers)\nend\ncorpDeck.deal(gameConfig.setup.corpsToDraw)\nend\nif numberOfPreludes==0 and gameState.activeExpansions.prelude then\ngameObjectHelpers.getObjectByName(\"preludeDeck\").deal(4)\nend\nend\nfunction deleteMilestonesAndAwards()\nfor _,guid in pairs(gameState.milestoneGuids) do\ngetObjectFromGUID(guid).destruct()\nend\nfor _,guid in pairs(gameState.awardGuids) do\ngetObjectFromGUID(guid).destruct()\nend\ngameObjectHelpers.getObjectByName(\"milestonePlate\").destruct()\ngameObjectHelpers.getObjectByName(\"awardPlate\").destruct()\nend\nfunction soloPlaySetup(projectDeck)\nfunction soloPlaySetupCoroutine()\ndeleteMilestonesAndAwards()\ngameState.isSoloGame=true\ngameState.maxGeneration=14\nif gameState.prelude then\ngameState.maxGeneration=12\nend\nlocal neutralPlayerColor=\"White\"\nif gameState.allPlayers[1].color==neutralPlayerColor then\nneutralPlayerColor=\"Red\"\nelse\ngameState.currentPlayer=2\ngameState.firstPlayer=2\nend\ncreatePlayerInGame(neutralPlayerColor,true)\nlocal neutralPlayer=nil\nlocal humanPlayer=nil\nwhile neutralPlayer==nil do\nfor _,player in pairs(gameState.allPlayers) do\nif player.neutral then\nneutralPlayer=player\nneutralPlayer.terraformingRating=gameState.maxGeneration\nelse\nhumanPlayer=player\nplayer.terraformingRating=14\nend\nend\ncoroutine.yield(0)\nend\nlocal neutralPlayerStartResources={productionValues={Credits=5,Steel=5,Titanium=5,Plants=5,Energy=5,Heat=5},\nresourceValues={Credits=20,Steel=20,Titanium=20,Plants=20,Energy=20,Heat=20},effects={}}\nWait.time(|| objectActivationSystem.doAction(neutralPlayer,nil,\"neutral player setup\",neutralPlayerStartResources),4)\nupdateCubePositionsOnTerraformingBar()\nplaceAllNeutralPlayerTiles(neutralPlayer)\nbroadcastToAll(\"Solo play started. You have until generation \"..gameState.maxGeneration..\" to terraform everything! Good luck!\",{0,1,0})\nif gameState.venus then\nbroadcastToAll(\"Solo play started. You have to terraform Venus as well!\",{0,1,0})\ngameState.venusIsWin=true\nend\nreturn 1\nend\nstartLuaCoroutine(self,\"soloPlaySetupCoroutine\")\nend\nfunction placeAllNeutralPlayerTiles(neutralPlayer)\nlogging.broadcastToAll(\"Sologame setup: Placing neutral cities and greeneries.\")\nlocal citySource=gameObjectHelpers.getObjectByName(\"genericCityBag\")\nlocal greenerySource=gameObjectHelpers.getObjectByName(\"genericGreeneryBag\")\ngameSetup.sologameSetup.placeNeutralPlayerTile(neutralPlayer,citySource,\"City\",1,{0,0,0})\ngameSetup.sologameSetup.placeNeutralPlayerTile(neutralPlayer,greenerySource,\"Greenery\",1,{0,0,0})\ngameSetup.sologameSetup.placeNeutralPlayerTile(neutralPlayer,citySource,\"City\",-1,{0,#gameMap.tiles[0],0})\ngameSetup.sologameSetup.placeNeutralPlayerTile(neutralPlayer,greenerySource,\"Greenery\",1,{0,0,0})\nend\ngameSetup={}\ngameSetup.sologameSetup={}\ngameSetup.sologameSetup.placeNeutralPlayerTile=function(neutralPlayer,tileSource,tileType,walkDirection,startIndices)\nfunction placeSoloGameTileCoroutine()\nif randomizer.isDone~=nil then\nwhile not randomizer.isDone or randomizer.mapGenerationInProgress do\ncoroutine.yield(0)\nend\nend\nwhile transientState.spawningTile do\ncoroutine.yield(0)\nend\ntransientState.spawningTile=true\nsearchForCard({amountToSearchFor=1,callbackInfo={callbackFuncName=\"onSoloSetupCardRevealed\"}})\nwhile transientState.solo.stepsToWalk==-1 do\ncoroutine.yield(0)\nend\nlocal transform=gameSetup.sologameSetup.getTargetTransform(transientState.solo.stepsToWalk,tileType,walkDirection,startIndices)\nlocal tile=tileSource.takeObject({position=transform.pos,rotation=transform.rot})\nlocal waitFrames=0\nwhile waitFrames < 30 do\nif tile.resting then\nwaitFrames=waitFrames + 1\nelse\nwaitFrames=0\nend\ncoroutine.yield(0)\nend\ntile.call(\"activateObjectRemotely\",{playerColor=neutralPlayer.color})\ntransientState.solo.stepsToWalk=-1\ntransientState.spawningTile=false\nreturn 1\nend\nstartLuaCoroutine(self,\"placeSoloGameTileCoroutine\")\nend\ngameSetup.sologameSetup.getTargetTransform=function(stepsToWalk,tileType,walkDirection,startIndices)\nlocal targetIndices={0,0,0}\nif tileType==\"City\" then\ntargetIndices=hexMapHelpers.walkMapHorizontally(\ngameMap,\nstepsToWalk - 1,\nwalkDirection,\nstartIndices,\n{mapFeatures.tileType.ocean,mapFeatures.tileType.nocticsCity},\n{}\n)\ntransientState.solo.lastNeutralCityIndices=targetIndices\nelse\ntargetIndices=hexMapHelpers.walkAroundTile(\ngameMap,\nstepsToWalk - 1,\ntransientState.solo.lastNeutralCityIndices,\n{mapFeatures.tileType.ocean,mapFeatures.tileType.nocticsCity},\n{}\n)\nend\nlocal marsMapTile=gameObjectHelpers.getObjectByName(\"gameMap\")\nreturn {pos=hexMapHelpers.indicesToWorldCoordinates(gameMap,targetIndices,marsMapTile),rot={0,270,0}}\nend\nfunction onSoloSetupCardRevealed(params)\nlocal card=getObjectFromGUID(params.cardGuid)\ntransientState.solo.stepsToWalk=tonumber(descriptionInterpreter.getValuesFromInput(card.getDescription(),\"Cost:\")[1])\nend","n59":"mapGenerator={}\nrandomizerTilesInPlay={}\nrandomizer={mapGenerationInProgress=false,isDone=true}\nfunction createMap(_,_,_)\nif not gameConfig.setup.randomMap then\nreturn\nend\nmapGenerator.createMap()\nend\nmapGenerator.createMap=function()\nif randomizer.mapGenerationInProgress then\nreturn\nend\nrandomizer.mapGenerationInProgress=true\nlocal counter=1\nfor name,template in pairs(randomizerTemplates) do\nif counter==gameConfig.mapGeneratorConfig.mapSizeSelection then\ngameMap=hexMapHelpers.makeMapComputeFriendly(template)\ngameMap.metadata.wasUpdated=true\nbreak\nend\ncounter=counter + 1\nend\nmath.randomseed(os.time())\nlocal validIndices=getValidMapIndices(gameMap)\nmapGenerator.spawnOceanTiles(gameMap,validIndices)\nmapGenerator.spawnSpecialTiles(gameMap,validIndices)\nmapGenerator.spawnTiles(gameMap,validIndices,gameConfig.mapGeneratorConfig.absoluteTiles.volcanoTiles,randomizerTiles.volcanoTiles)\nmapGenerator.spawnTiles(gameMap,validIndices,gameConfig.mapGeneratorConfig.absoluteTiles.blockedTiles,randomizerTiles.blockedTiles)\nlocal randomTiles=#validIndices * gameConfig.mapGeneratorConfig.totallyRandomTilesRatio\nif math.ceil(randomTiles) - randomTiles > 0.5 then\nrandomTiles=math.floor(randomTiles)\nelse\nrandomTiles=math.ceil(randomTiles)\nend\nlocal fixedTilesDistribution={empty=0,bonus=0}\nif not (gameConfig.mapGeneratorConfig.bonusTilesRatio <= 1e-4) then\nlocal bonusTilesRatio=1/gameConfig.mapGeneratorConfig.bonusTilesRatio\nlocal emptyTilesRatio=1\nfor i=1,#validIndices - randomTiles do\nif bonusTilesRatio < emptyTilesRatio then\nbonusTilesRatio=bonusTilesRatio + 1/gameConfig.mapGeneratorConfig.bonusTilesRatio\nfixedTilesDistribution.bonus=fixedTilesDistribution.bonus + 1\nelse\nemptyTilesRatio=emptyTilesRatio + 1\nfixedTilesDistribution.empty=fixedTilesDistribution.empty + 1\nend\nend\nelse\nfixedTilesDistribution={empty=#validIndices - randomTiles,bonus=0}\nend\nfor i=1,randomTiles do\nlocal r=math.random(1,2)\nif r==1 then\nfixedTilesDistribution.empty=fixedTilesDistribution.empty + 1\nelse\nfixedTilesDistribution.bonus=fixedTilesDistribution.bonus + 1\nend\nend\nmapGenerator.spawnTiles(gameMap,validIndices,fixedTilesDistribution.empty,randomizerTiles.emptyTiles)\nlocal bonusTileYields={}\nfor i=1,fixedTilesDistribution.bonus do\nlocal yield=mapGenerator.rollTileEffect()\nif bonusTileYields[yield.tileEffectType]==nil then\nbonusTileYields[yield.tileEffectType]={yield.yield}\nelse\ntable.insert(bonusTileYields[yield.tileEffectType],yield.yield)\nend\nend\nmapGenerator.spawnBonusTiles(gameMap,validIndices,bonusTileYields,randomizerTiles.bonusTiles)\nfunction waitForMapCreationToFinish()\nlocal index=0\nwhile #randomizerTilesInPlay < gameMap.metadata.mapSize and index < 3600 do\nindex=index + 1\ncoroutine.yield(0)\nend\ntransientState.randomizerTilesUpdatesInProgress=0\nupdateVisualMap()\nfor i=1,30 do\ncoroutine.yield(0)\nend\nlocal counter=0\nwhile counter < 10 do\ncounter=counter + 1\nif transientState.randomizerTilesUpdatesInProgress~=0 then\ncounter=0\nend\ncoroutine.yield(0)\nend\nrandomizer.mapGenerationInProgress=false\nreturn 1\nend\nstartLuaCoroutine(self,\"waitForMapCreationToFinish\")\nend\nmapGenerator.spawnBonusTiles=function(map,validIndices,bonusTileYields,referenceBonusTiles)\nlocal spawnIndices={}\nfor yieldName,potentialYields in pairs(bonusTileYields) do\nspawnIndices[yieldName]={}\nmapGenerator.internal.findSeedIndices(validIndices,\nspawnIndices[yieldName],\ngameConfig.mapGeneratorConfig.tileEffects[yieldName].seedPoints,\ngameConfig.mapGeneratorConfig.tileEffects[yieldName].seedDistance,\n#potentialYields)\nlocal amountToFind=#potentialYields - #spawnIndices[yieldName]\nif amountToFind > 0 then\nlocal shapeFactor=gameConfig.mapGeneratorConfig.tileEffects[yieldName].shapeFactor\nmapGenerator.internal.findIndices(map,validIndices,spawnIndices[yieldName],amountToFind,shapeFactor)\nend\nfor i,yield in pairs(potentialYields) do\nif spawnIndices[yieldName]==nil then\nbreak\nend\nlocal r=math.random(1,#spawnIndices[yieldName])\nmapGenerator.internal.spawnBonusTile(map,spawnIndices[yieldName][r],yield,yieldName,referenceBonusTiles)\ntable.remove(spawnIndices[yieldName],r)\nend\nend\nend\nmapGenerator.destroyMap=function(map)\nfunction destroyMapCoroutine()\nif randomizer.mapGenerationInProgress then\nlogging.broadcastToAll(\"Randomized map will be removed as soon as map creation is finished and finalized (5-10 seconds).\")\nend\nwhile randomizer.mapGenerationInProgress do\ncoroutine.yield(0)\nend\nfor _,objInfo in pairs(randomizerTilesInPlay) do\nlocal obj=getObjectFromGUID(objInfo.guid)\nif obj~=nil then\nobj.destruct()\nend\nend\nrandomizerTilesInPlay={}\nreturn 1\nend\nstartLuaCoroutine(self,\"destroyMapCoroutine\")\nend\nmapGenerator.rollTileEffect=function()\nlocal potentialEffects={}\nfor resourceType,settings in pairs(gameConfig.mapGeneratorConfig.tileEffects) do\ntable.insert(potentialEffects,{weight=settings.weighting,value=resourceType})\nend\nlocal result=rollFromTable(potentialEffects,10000)\nlocal yield=mapGenerator.rollYield(gameConfig.mapGeneratorConfig.tileEffects[result])\nreturn {tileEffectType=result,yield=yield}\nend\nmapGenerator.rollYield=function(tileEffects)\nlocal x0=tileEffects.averageTileYield\nlocal f_x0=(math.ceil(x0) - x0) + tileEffects.yieldDiffusion * (x0 - math.floor(x0))\nlocal f_x1=(math.ceil(x0) - x0) * tileEffects.yieldDiffusion + (x0 - math.floor(x0))\nlocal potentialYields={}\nlocal chanceSum=0\nif math.abs(f_x0) < 1e-4 then\nf_x0=1\nf_x1=1\nchanceSum=1\ntable.insert(potentialYields,{weight=f_x0,value=x0})\nelse\nchanceSum=f_x0 + f_x1\ntable.insert(potentialYields,{weight=f_x0,value=math.floor(x0)})\ntable.insert(potentialYields,{weight=f_x1,value=math.ceil(x0)})\nend\nfor i=math.floor(x0)-1,1,-1 do\nlocal f_x=f_x0 * math.pow(tileEffects.yieldDiffusion,math.floor(x0) - i)\nif f_x > 0.05 then\nchanceSum=chanceSum + f_x\ntable.insert(potentialYields,{weight=f_x,value=i})\nelse\nbreak\nend\nend\nfor i=math.ceil(x0)+1,tileEffects.maxYield do\nlocal f_x=f_x1 * math.pow(tileEffects.yieldDiffusion,i - math.ceil(x0))\nif f_x > 0.05 then\nchanceSum=chanceSum + f_x\ntable.insert(potentialYields,{weight=f_x,value=i})\nelse\nbreak\nend\nend\nreturn rollFromTable(potentialYields,1000)\nend\nmapGenerator.internal={}\nmapGenerator.internal.findOceanSeedIndices=function(validIndices,oceanIndices)\nlocal numberOfSeedPoints=gameConfig.mapGeneratorConfig.oceanSettings.oceanSeedPoints\nif numberOfSeedPoints > #globalParameters.ocean.mappings[globalParameterSystem.values.ocean.selection].steps - 1 then\nnumberOfSeedPoints=#globalParameters.ocean.mappings[globalParameterSystem.values.ocean.selection].steps - 1\nend\nmapGenerator.internal.findSeedIndices(validIndices,oceanIndices,numberOfSeedPoints,gameConfig.mapGeneratorConfig.oceanSettings.oceanSeedMinDistance)\nend\nmapGenerator.internal.findSeedIndices=function(validIndices,spawnIndices,numberOfSeedPoints,seedMinDistance,upperLimit)\nupperLimit=upperLimit or numberOfSeedPoints\nfor i=1,numberOfSeedPoints do\nif i > upperLimit then\nreturn\nend\nlocal distanceToNearestSeed=-1\nlocal r=-1\nlocal retriesLeft=500\nwhile distanceToNearestSeed < seedMinDistance and retriesLeft > 0 do\nr=math.random(1,#validIndices)\ndistanceToNearestSeed=9999\nfor _,indices in pairs(spawnIndices) do\nlocal distance=hexMapHelpers.computeDistanceBetweenIndices(indices,validIndices[r])\nif distance < distanceToNearestSeed then\ndistanceToNearestSeed=distance\nend\nend\nretriesLeft=retriesLeft - 1\nend\ntable.insert(spawnIndices,validIndices[r])\ntable.remove(validIndices,r)\nend\nend\nmapGenerator.internal.spawnBonusTile=function(map,tileIndices,yield,yieldName,referenceBonusTiles)\nif yieldName==\"DrawCard\" then\nlocal foundYield=false\nwhile not foundYield do\nfor _,tile in pairs(randomizerTiles.bonusTiles) do\nif tile.placementProperties.effects~=nil then\nlocal checkAgainstYield=#tile.placementProperties.effects\nif checkAgainstYield~=nil and checkAgainstYield==yield then\nplaceTile(map,tileIndices,tile)\nreturn\nend\nend\nend\nif yield <= 1 then\nplaceTile(map,tileIndices,randomizerTiles.emptyTiles[1])\nreturn\nelse\nyield=yield - 1\nend\nend\nelseif yieldName==\"OtherEffects\" then\nlocal r=math.random(1,#randomizerTiles.randomizerTileExpansion)\nplaceTile(map,tileIndices,randomizerTiles.randomizerTileExpansion[r])\nelse\nlocal foundYield=false\nwhile not foundYield do\nfor _,tile in pairs(randomizerTiles.bonusTiles) do\nif tile.placementProperties.resourceValues~=nil then\nlocal checkAgainstYield=tile.placementProperties.resourceValues[yieldName]\nif checkAgainstYield~=nil and checkAgainstYield==yield then\nplaceTile(map,tileIndices,tile)\nreturn\nend\nend\nend\nif yield <= 1 then\nplaceTile(map,tileIndices,randomizerTiles.emptyTiles[1])\nreturn\nelse\nyield=yield - 1\nend\nend\nend\nend\nmapGenerator.internal.indicesIdentical=function(a,b)\nreturn a[1]==b[1] and a[2]==b[2] and a[3]==b[3]\nend\nmapGenerator.internal.findOceanIndices=function(validIndices,oceanIndices,map)\nif #oceanIndices==0 then\nreturn\nend\nlocal extraOceanTiles=3\nif gameConfig.setup.fanMadeProjects then\nextraOceanTiles=extraOceanTiles + 1\nend\nlocal amountToFind=#globalParameters.ocean.mappings[globalParameterSystem.values.ocean.selection].steps - 1 - #oceanIndices + extraOceanTiles\nmapGenerator.internal.findIndices(map,validIndices,oceanIndices,amountToFind,gameConfig.mapGeneratorConfig.oceanSettings.oceanShapeFactor)\nend\nmapGenerator.internal.findIndices=function(map,validIndices,spawnIndices,amountToFind,shapeFactor)\nif #spawnIndices==0 then\nreturn\nend\nfor i=1,amountToFind do\nlocal potentialIndices={}\nlocal retries=100\nwhile next(potentialIndices)==nil do\nlocal r=math.random(1,#spawnIndices)\nfor _,nti in pairs(hexMapHelpers.getNeighboursIndicesFromIndices(map,spawnIndices[r])) do\nlocal chance=1\nlocal freeTileConsidered=false\nif tableHelpers.isTableValueInTable(validIndices,nti,mapGenerator.internal.indicesIdentical) then\nfor _,ntiInner in pairs(hexMapHelpers.getNeighboursIndicesFromIndices(map,nti)) do\nif tableHelpers.isTableValueInTable(spawnIndices,ntiInner,mapGenerator.internal.indicesIdentical) then\nif freeTileConsidered then\nchance=chance * shapeFactor\nelse\nfreeTileConsidered=true\nend\nend\nend\nif chance > 1e-5 then\ntable.insert(potentialIndices,{value=nti,weight=chance})\nend\nend\nend\nretries=retries - 1\nif retries <= 0 then\nlocal r=math.random(1,#validIndices)\ntable.insert(spawnIndices,validIndices[r])\ntable.remove(validIndices,r)\nbreak\nend\nend\nif retries > 0 then\nlocal indices=rollFromTable(potentialIndices,10000)\nlocal index=-1\nfor i,checkedIndices in pairs(validIndices) do\nif mapGenerator.internal.indicesIdentical(checkedIndices,indices) then\nindex=i\nbreak\nend\nend\ntable.insert(spawnIndices,validIndices[index])\ntable.remove(validIndices,index)\nend\nend\nend\nmapGenerator.spawnOceanTiles=function(map,validIndices)\nlocal oceanIndices={}\nlocal tilesToPlace= tableHelpers.deepClone(randomizerTiles.oceanTiles)\nmapGenerator.internal.findOceanSeedIndices(validIndices,oceanIndices)\nmapGenerator.internal.findOceanIndices(validIndices,oceanIndices,map)\nfor i,tileIndices in pairs(oceanIndices) do\nlocal poppedTile=popRandomTile(tilesToPlace)\nif poppedTile==nil then\nregularTiles=tableHelpers.deepClone(randomizerTiles.oceanTiles)\npoppedTile=popRandomTile(regularTiles)\nend\nplaceTile(map,tileIndices,poppedTile)\nend\nend\nmapGenerator.spawnSpecialTiles=function(map,validIndices)\nlocal specialTileIndices={}\nfor _,tileInfo in pairs(randomizerTiles.reservedTiles) do\nlocal r=math.random(1,#validIndices)\nspecialTileIndices=validIndices[r]\ntable.remove(validIndices,r)\nplaceTile(map,specialTileIndices,tileInfo)\nend\nend\nmapGenerator.spawnTiles=function(map,validIndices,numberOfTiles,tiles)\nlocal tilesToPlace=tableHelpers.deepClone(tiles)\nlocal tilesIndices={}\nfor i=1,numberOfTiles do\nlocal r=math.random(1,#validIndices)\ntable.insert(tilesIndices,validIndices[r])\ntable.remove(validIndices,r)\nend\nfor i,tileIndices in pairs(tilesIndices) do\nif next(tilesIndices)~=nil then\nlocal poppedTile=popRandomTile(tilesToPlace)\nif poppedTile==nil then\ntilesToPlace=tableHelpers.deepClone(tiles)\npoppedTile=popRandomTile(tilesToPlace)\nend\nplaceTile(map,tileIndices,poppedTile)\nend\nend\nend\n--\n--     table.insert(specialTilesIndices,validIndices[r])\n--\n-- end\nfunction getValidMapIndices(map)\nlocal validIndices={}\nfor i,jkMatrix in pairs(map.tiles) do\nfor j,kMatrix in pairs(jkMatrix) do\nfor k,tile in pairs(kMatrix) do\nif next(tile.features)~=nil and tile.features[1]==\"empty\" then\ntable.insert(validIndices,{i,j,k})\nend\nend\nend\nend\nreturn validIndices\nend\nfunction rollFromTable(inputTable,rollTableSize,weightName,valueName)\nweightName=weightName or \"weight\"\nvalueName=valueName or \"value\"\nlocal randomFriendlyTable=makeRandomFriendly(inputTable,rollTableSize,weightName,valueName)\nlocal num=math.random(1,rollTableSize)\nlocal indices={}\nfor _,entry in pairs(randomFriendlyTable) do\nif num >= entry.startValue and num <= entry.endValue then\nreturn entry.value\nend\nend\nend\nfunction makeRandomFriendly(inputTable,size,weightName,valueName)\nweightName=weightName or \"weight\"\nvalueName=valueName or \"value\"\nlocal sum=0\nfor _,entry in pairs(inputTable) do\nsum=sum + entry[weightName]\nend\nlocal sizeFactor=size/sum\nlocal offset=1\nlocal outputTable={}\nfor _,entry in pairs(inputTable) do\nlocal startValue=offset\nlocal deltaValue=entry[weightName] * sizeFactor\nif math.ceil(deltaValue) - deltaValue >= 0.5 then\ndeltaValue=math.ceil(deltaValue)\nelse\ndeltaValue=math.floor(deltaValue)\nend\nlocal endValue=startValue + deltaValue\nif endValue > size then\nendValue=size\nend\nif endValue~=startValue then\ntable.insert(outputTable,{startValue=startValue,endValue=endValue,value=entry[valueName]})\noffset=endValue + 1\nend\nif offset > size then\nbreak\nend\nend\nreturn outputTable\nend\nfunction updateVisualMap()\nfor _,tileInfo in pairs(randomizerTilesInPlay) do\nupdateTile(tileInfo)\nend\nend\nfunction updateTile(tileInfo)\nfunction updateTileCoroutine()\ntransientState.randomizerTilesUpdatesInProgress=transientState.randomizerTilesUpdatesInProgress + 1\nlocal tile=getObjectFromGUID(tileInfo.guid)\nlocal customization={}\ncustomization.image=tileInfo.imageUrl\ntile.setCustomObject(customization)\nlocal reloadedTile=tile.reload()\ncoroutine.yield(0)\nreloadedTile.interactable=false\nfor i=1,20 do coroutine.yield(0) end\nwhile not reloadedTile.resting do\ncoroutine.yield(0)\nend\nreloadedTile.setLock(true)\nreloadedTile.setScale({1.31,1,1.31})\ntileInfo.guid=reloadedTile.guid\ntransientState.randomizerTilesUpdatesInProgress=transientState.randomizerTilesUpdatesInProgress - 1\nreturn 1\nend\nstartLuaCoroutine(self,\"updateTileCoroutine\")\nend\nfunction popRandomTile(tiles)\nlocal totalAmountOfTiles=0\nfor _,tile in pairs(tiles) do\ntotalAmountOfTiles=totalAmountOfTiles + tile.remaining\nend\nif totalAmountOfTiles==0 then\nreturn nil\nend\nlocal whichTileToPop=math.random(1,totalAmountOfTiles)\nlocal currentIndex=0\nfor i,tile in pairs(tiles) do\ncurrentIndex=currentIndex + tile.remaining\nif whichTileToPop <= currentIndex + tile.remaining then\nreturn tile\nend\nend\nend\nspawnIndex=1\nfunction spawnTileObject(targetPosition,imageUrl,indices)\nlocal cloneCallback=function(clonedGuid)\nlocal clonedTile=getObjectFromGUID(clonedGuid)\nclonedTile.setLock(false)\nclonedTile.interactable=false\nWait.time(function()\nclonedTile.setLock(true)\nclonedTile.setScale({1.31,1,1.31})\ntable.insert(randomizerTilesInPlay,{guid=clonedTile.guid,indices=indices,imageUrl=imageUrl})\nend,2)\nend\nlocal potentialCloningGuids=randomizerTiles.baseTileGuids\nspawnIndex=spawnIndex + 1\nif spawnIndex > #potentialCloningGuids then\nspawnIndex=1\nend\nfastCreateClonableObject(potentialCloningGuids[spawnIndex],targetPosition,{0,270,0},cloneCallback)\nend\nfunction placeTile(map,tileIndices,rawTile)\nlocal gameMapTile={features=rawTile.features,placementProperties=rawTile.placementProperties,adjacenyEffects=rawTile.adjacenyEffects or {}}\nmap.tiles[tileIndices[1]][tileIndices[2]][tileIndices[3]]=gameMapTile\nlocal tileAlreadyExists=false\nfor _,tileInfo in pairs(randomizerTilesInPlay) do\nif tileInfo.indices[1]==tileIndices[1] and tileInfo.indices[2]==tileIndices[2] and tileInfo.indices[3]==tileIndices[3] then\ntileInfo.imageUrl=rawTile.imageUrl\ntileAlreadyExists=true\nend\nend\nif not tileAlreadyExists then\nlocal marsMapTile=gameObjectHelpers.getObjectByName(\"gameMap\")\nlocal targetPosition=hexMapHelpers.indicesToWorldCoordinates(map,tileIndices,marsMapTile)\nspawnTileObject(targetPosition,rawTile.imageUrl,tileIndices)\nend\nend","n60":"uninteractable_guids={\r\n--table\r\n'9354f9',\r\n--table extenders\r\n'6a8317',\r\n'd68373',\r\n'961278',\r\n'4265e6',\r\n'1f1736',\r\n'0b4feb',\r\n\"10523e\",\r\n\"1628e9\",\r\n\"25a388\",\r\n\"06e0c1\",\r\n\"116beb\",\r\n\"0cbc93\",\r\n\"0b4feb\",\r\n\"466281\",\r\n\"3761bd\",\r\n\"d8abda\",\r\n\"909a34\",\r\n\"1bd753\",\r\n\"dd3511\",\r\n\"b4bd71\",\r\n\"12dce1\",\r\n\"f62096\",\r\nturmoilBoard=\"12612d\",\r\nturmoilEventBoard=\"fc9a89\",\r\n\"091112\",\r\n\"ec4e45\",-- gameplay variants\r\n--the rest\r\n'ca3d95',\r\n'f1bfac',\r\n'7db564',\r\n'5458b5',\r\n'5c06aa',\r\n'fab25e',\r\n'94efa5',\r\n'b1cfa0',\r\n'c48e12',\r\n'583d53',\r\n'75192e',\r\n'31b4c1',\r\n'988125',\r\n'c4938b',\r\n'1c4a11',\r\n'456200',\r\n'1e3ee1',\r\n'e76803',\r\n'd5bd4c',\r\n'136760',\r\n'8df3e7',\r\n'8a9df9',\r\n'cb244a',\r\n'adbbbe',\r\n'cb4ffd',\r\n'6480c1',\r\n'c9adc5',\r\n'4fdd36',\r\n'67a37b',\r\n'2d8b29',\r\n'a09130',\r\n'0818d8',\r\n'5bd29d',\r\n'dc4b3f',\r\n'28588f',\r\n'42b9e7',\r\n'2bd7cb',\r\n'323d14',\r\n'e260a7',\r\n'2c06c3',\r\n'8a0903',\r\n'a140d8',\r\n'ecaa6c',\r\n'943859',\r\n'7ddd14',\r\n'a40a0b',\r\n'c1fd7a',\r\n'b0beba',\r\n'270e01',\r\n--Randomizer button\r\n'fb5a32',\r\n'c0ee0f',\r\n'e5b496',\r\n'28091f',\r\n'332dcf',\r\n'9c4b18',\r\n'fe23fb',\r\n'ff0395',\r\n'efab72',\r\n'290822',\r\n'849ab1',\r\n'8484d8',\r\n'5168e1',\r\n'9b4c37',\r\n'009718',\r\n'c8a4b6',\r\n'64abda',\r\n'04ad36',\r\n'4c561a',\r\n'35a17f',\r\n'772467',\r\n'c290b9',\r\n'b27a13',\r\n'6a1319',\r\n'e72b70',\r\n'4c5add',\r\n'76a492',\r\n'39361c',\r\n'ebcf60',\r\n'7e8037',\r\n'691263',\r\n'f7f3c1',\r\n'c2f052',\r\n'a0b629',\r\n'd1ecbb',\r\n'53dc16',\r\n'd74656',\r\n'1b503f',\r\n'2378a0',\r\n'e319da',\r\n'c14cf3',\r\n'505189',\r\n'5bc390',\r\n'aeab5d',\r\n'180c02',\r\n'cf8a7e',\r\n'c5247e',\r\n'9f9d1e',\r\n'990b7f',\r\n'035fd0',\r\n'19c3bb',\r\n'd02091',\r\n'a79721',\r\n'b64a5c',\r\n'a0e376',\r\n'b10b90',\r\n'b33276',\r\n'187d04',\r\n'5ad2d0',\r\n'772eaf',\r\n'58db6e',\r\n'ca30dc',\r\n'9784e6',\r\n'3c2f97',\r\n'79282f',\r\n\"d3845f\",\r\n'466282',-- table left panel\r\n'466283',-- game setup subtable\r\n'ca6fe5',\r\n'ca6fe4',\r\n'ca6fe3',\r\n'ca6fe2',\r\n'ca6fe1',\r\n'ca6fe0',\r\n'ca6fdf',\r\n'ca6fde',\r\n'ca6fdd',\r\n'ca6fdc',\r\n'466284',\r\n'e0de83',\r\nglobalParameters.oxygen.objectGuid,\r\n'76225d',\r\nglobalParameters.temperature.objectGuid,\r\n'9a571f',\r\n'cf4f00',-- ocean track\r\n'71ca01',-- game mat tile\r\n'71ca02',-- standard project tile\r\n'8f1595',-- milestone tile\r\n'8f1596',-- awards tile\r\n'fa0471',-- turmoil tile\r\n'2baba5',-- turmoil party tile\r\n'cb2a6c',-- game config tile\r\n'9460b1',-- timer config tile\r\n}\r\nfunction makeObjectsUninteractable()\r\nfor _,guid in pairs(uninteractable_guids) do\r\nobject=getObjectFromGUID(guid)\r\nif object then\r\nobject.interactable=false\r\nend\r\nend\r\nend\r","n61":"bags={\r\nvenusBag=\"0818d8\",\r\ncoloniesBag=\"ebe13a\",\r\ncoloniesShipBag=\"b176ad\",\r\ncoloniesMarkersBag=\"b308cf\",\r\npathFinderBag=\"323d14\",\r\noceanBag=\"d6af9e\",\r\nspecialsBag=\"0d97f2\",\r\ngenericDelegateBag=\"deb215\",\r\n}\r\nbagProtectorGuidStores.normalBags=bags\r\nreferenceBags={\r\ncontainerOne=\"3340b2\",\r\ncontainerTwo=\"9ee3f2\"\r\n}\r\nbagProtectorGuidStores.referenceBags=referenceBags\r\ncardAutomaton={\r\nbaseCard=\"e77dbd\",\r\nbaseBlueCard=\"e77dbe\",\r\nbaseGreenCard=\"e77dbf\",\r\nbaseEventCard=\"e77dc0\",\r\nbaseInfrastructureCard=\"e77dc1\",\r\nbaseCorporationCard=\"e77dc2\",\r\n}\r\nturmoilPartyPlates={\r\nMarsFirst=\"ad4d18\",\r\nScientists=\"ce0555\",\r\nUnity=\"35bec1\",\r\nGreens=\"99259c\",\r\nReds=\"995445\",\r\nKelvinists=\"dafd56\",\r\n}\r\nexpansions={\r\nvenusProjects=\"b530b4\",\r\nvenusCorps=\"d76fa5\",\r\nvenuphileAwardTile=\"d4e451\",\r\nhoverlordMilestoneTile=\"404512\",\r\nvenusTerraformingTrack=\"59dd23\",\r\nvenusTerraformingMarker=\"ca3d97\",\r\ncoloniesTradingTile=\"3e7af8\",\r\ncoloniesProjects=\"211e80\",\r\ncoloniesCorps=\"cdef51\",\r\ncoloniesTradeFleetTile=\"9ba254\",\r\npreludeProjects=\"400808\",\r\npreludeCorps=\"4b4231\",\r\nturmoilPartyTile=\"2baba5\",\r\nturmoilProjects=\"160ff4\",\r\nturmoilCorps=\"2be67c\",\r\nturmoilDeck=\"87a219\",\r\nturmoilGlobalEventDeck=\"87a219\",\r\nturmoilColonyCards=\"f8b2f4\",\r\nturmoilVenusCards=\"899f9f\",\r\nturmoilColonyVenusCards=\"192cfa\",\r\nturmoilTMToken=\"a9aaf0\",\r\nturmoilTile=\"fa0471\",\r\nturmoilBoard=\"12612d\",\r\nturmoilEventBoard=\"fc9a89\",\r\nturmoilNeutralDelegates=\"7caf29\",\r\nturmoilBasePartyPlate=\"99259c\",\r\nturmoilDominanceMarker=\"578734\",\r\nturmoilGenericDelegate=\"2b66ef\",\r\nvenusPhaseTwoDeck=\"23d12e\",\r\nsolarisDeck=\"d1001d\",\r\naresDeck=\"aed180\",\r\nbigBoxCorps=\"fcd67e\",\r\nbigBoxProjects=\"c632e8\",\r\nbggCorps=\"3e7abf\",\r\ncorpEraProjects=\"f34f65\",\r\ncorpEraCorps=\"1a43a4\",\r\npathFinderProjects=\"f0cf60\",\r\npathFinderCorps=\"bf570f\",\r\npathFinderPreludes=\"56f4b8\",\r\nhighOrbitInfrastructureDeck=\"8bf4f7\",\r\nxenosCorps=\"97b1d0\",\r\nfanMadeProjects=\"95f620\",\r\n}\r\nsetupGuids={\r\nplaymat=\"9a571f\",\r\ndraftBag=\"b0beba\",\r\nsetupMat=\"2bd7cb\",\r\nstandardProjects=\"270e01\",\r\nboardZone=\"afc408\",\r\ntradeFleetZone=\"41343b\",\r\ngenerationCounter=\"1c4a11\",\r\ncityCounter=\"8df3e7\",\r\ncitiesOnMarsCounter=\"c6c23e\",\r\noceanCounter=\"e260a7\",\r\ncapitalCityToken=\"0e17f3\",\r\noceanCityToken=\"4cfb25\",\r\ngenericScoreBoard=\"091112\",\r\ngenericTRCube=\"7ddd14\",\r\ngenericClassicPlayerBoard=\"583d53\",\r\ngenericPlayerBoard=\"13d3bb\",\r\ngenericPlayerBoardFlipped=\"13d3be\",\r\ngenericDraftingToKeepTile=\"7a62d8\",\r\ngenericDraftingCheckToken=\"25ad34\",\r\ngenericIconTableau=\"0adaf2\",\r\ngenericPathfinderIconTableau=\"e4ebb6\",\r\ngenericHighOrbitIconTableau=\"e4ebb7\",\r\ngenericActivationTableau=\"52f95e\",\r\ngenerationMarker=\"a63f90\",\r\ngenericPlayerAntiLagBoard=\"bd6888\",\r\ngenericPlayerOrgHelpBoard=\"081edb\",\r\nmilestonePlate=\"8f1595\",\r\nmilestoneDefaultTile=\"ca6fe4\",\r\nmilestoneAndAwardDefaultTile=\"ca6fe4\",\r\nawardPlate=\"8f1596\",\r\nbaseBonusTokenGuid=\"a4d4c3\",\r\nmainBoardTile=\"71ca01\",\r\nfirstPlayerToken=\"2f276a\",\r\ngenericOcean=\"e3a5e4\",\r\ngenericCityBag=\"f38446\",\r\ngenericGreeneryBag=\"e4c505\",\r\nanimalWildSource=\"716168\",\r\nmicrobeFloaterSource=\"4499d3\",\r\nscienceFighterSource=\"411a07\",\r\noreSource=\"716169\",\r\ndataAsteroidSource=\"9dec75\",\r\nactionMarkersSource=\"3cc625\",\r\nresourceWildTokenSource=\"3cc626\",\r\nprogramableActionTokenSource=\"3cc627\",\r\nfloatingArrayBag=\"bb5da3\",\r\ngasMineBag=\"080f86\",\r\nvenusHabitatBag=\"7f9cef\",\r\nduststormBag=\"d749f0\",\r\nerosionBag=\"fe18b7\",\r\nextraOceansCounter=\"e260a7\",\r\noxygenToken=\"ca3d95\",\r\ntemperatureToken=\"f1bfac\",\r\noceanToken=\"ca3d96\",\r\nscrappingToken=\"ca3d97\",\r\nvenusPathfinderToken=\"0683d4\",\r\nearthPathfinderToken=\"92ae13\",\r\nmarsPathfinderToken=\"d45204\",\r\njovianPathfinderToken=\"6a30b4\",\r\noxygenMax=\"2cc3ab\",\r\ntempMax=\"ef3cb2\",\r\nscoreCounterBag=\"c1fd7a\",\r\nprojectStackTile='b550fe',\r\nprojectDiscardTile=\"f7e628\",\r\nprojectZone=\"1ae58d\",\r\nrevealZone=\"1ae58e\",\r\ndiscardStackTile='0e0cb2',\r\ncorpAmountToken=\"c1af2b\",\r\nloggingTile=\"9a5720\",\r\npathfinderBoard=\"9ebcf8\",\r\nprojectDeck=\"5a3113\",\r\ncorpDeck=\"7f05e7\",\r\npreludeDeck=\"501238\",\r\ngameObjectsBoard=\"466283\",\r\ngameMap=\"e0de83\",\r\nmarsMapTile=\"e0de83\",\r\nvenusMapTile=\"76225d\",\r\ngameBoardTile=\"71ca01\",\r\nstandardProjectTile=\"71ca02\",\r\ngameConfigTile=\"cb2a6c\",\r\ntimerConfigTile=\"9460b1\",\r\n}\r\nspecialTiles={\r\npreserve=\"8617b9\",\r\nminingArea=\"617acd\",\r\nminingRights=\"3de716\",\r\nnuclear=\"8df758\",\r\nrestricted=\"59c9a4\",\r\ncapital=\"0e17f3\",\r\nlavaFlows=\"a40228\",\r\necologicalZone=\"c58448\",\r\nindustrial=\"676cf5\",\r\nmohole=\"b69b74\",\r\ncommercial=\"11528c\",\r\ncrashSite=\"e56912\",\r\nnewVenice=\"4cfb25\",\r\noceanGreenery=\"919a9d\",\r\nwetlands=\"919a9d\",\r\nredCity=\"4bab93\",\r\nMenagerieTile=\"80c18b\",\r\nAresCapital=\"be9df4\",\r\nAresCommercialDistrict=\"c66e48\",\r\nAresEcologicalZone=\"b46a9e\",\r\nAresFertilizerFactory=\"1c6b35\",\r\nAresIndustrialCenter=\"793527\",\r\nAresMeteorCrater=\"9b23ce\",\r\nAresMiningAreaSteel=\"2627ee\",\r\nAresMiningAreaTitanium=\"568ea3\",\r\nAresMiningRightsSteel=\"697619\",\r\nAresMiningRightsTitanium=\"b212e7\",\r\nAresMoholeArea=\"eef791\",\r\nAresNaturalPreserve=\"7ee900\",\r\nAresNuclearZone=\"3ea477\",\r\nAresOceanFarm=\"943c58\",\r\nAresOceanicCity=\"ea6814\",\r\nAresOceanSanctuary=\"223447\",\r\nAresRestrictedArea=\"2b26f1\",\r\nAresSolarFarm=\"6ae25b\",\r\nAresVolcano=\"87136d\",\r\n}\r\ngameObjectGuidStores.expansions=expansions\r\ngameObjectGuidStores.setupGuids=setupGuids\r\ngameObjectGuidStores.bags=bags\r\ngameObjectGuidStores.cardAutomaton=cardAutomaton\r\ngameObjectGuidStores.specialTiles=specialTiles\r","n62":"gameState={\r\nextendedScriptingEnabled=false,\r\ntemperatureDone=false,\r\nvenusDone=false,\r\nvenusIsWin=false,\r\noxygenDone=false,\r\noceansDone=false,\r\nglobalParameterSelection=1,\r\noceansNeeded=9,\r\nprelude=false,\r\ncolonies=false,\r\nvenus=false,\r\nturmoil=false,\r\nares=false,\r\nsolarPhase=nil,\r\ndraftingEnabled=false,\r\nshuffleBackAfterSearch=false,\r\nrandomizeMap=false,\r\ninitialProjectsToDeal=10,\r\ncorporationsToDeal=2,\r\npreludesToDeal=4,\r\nprojectsPerGeneration=4,\r\nstarted=false,\r\nsetupIsDone=false,\r\nended=false,\r\nselectedMap=1,\r\ncurrentPhase=phases.gameSetupPhase,\r\nautomaticSpaceTilePlacement=true,\r\nwasUpdated=true,\r\n}\r\ngameState.drafting={\r\ndraftingDirection=1,\r\ncurrentStep=1,\r\ncurrentSubStep=1,\r\ndone=false,\r\nignoreRules=false,\r\ncurrentDraftingRule=draftingData.initialResearchPhase.d_4_3_3,\r\n}\r\ngameState.aresData={\r\nerosionTilesFlipped=false,\r\nduststormTilesFlipped=false,\r\nmarkers={},\r\n}\r\ngameState.turmoilData={\r\noneTimeEffectTable={}\r\n}\r\ngameState.milestones={\r\nmaxClaims=3\r\n}\r\ngameState.awards={\r\nmaxFunders=3\r\n}\r\ngameState.allPlayers={}\r\ngameState.numberOfPlayers=0\r\ngameState.rawPlayerOrder={\r\n\"White\",\r\n\"Red\",\r\n\"Yellow\",\r\n\"Orange\",\r\n\"Green\",\r\n\"Blue\",\r\n\"Purple\",\r\n\"Pink\"\r\n}\r\ngameState.currentGeneration=1\r\ngameState.firstPlayer=nil\r\ngameState.currentPlayer=nil\r\ngameState.citiesInSpace=0\r\ngameState.citiesOnMars=0\r\ngameState.citiesInSpaceGuids={}\r\ngameState.oceanTileGuids={}\r\ngameState.activeExpansions={}\r\ngameState.claimedMilestones={}\r\ngameState.claimedAwards={}\r\ngameState.static={}\r\ngameState.static.coloniesGameData={}\r\ngameState.timerConfiguration={\r\npauseOnDraft=false,\r\ntimeoutAction=\"doNothing\",\r\n}\r\ntransientState={\r\nspawningTile=false\r\n}\r\ntransientState.solo={\r\nlastNeutralCityIndices={0,0,0},\r\nstepsToWalk=-1\r\n}\r\ntransientState.aresData={\r\nstepsToWalk=0,\r\n}\r\ntransientState.turmoilActions={\r\ntrRevisionInProgress=false,\r\nglobalEventInProgress=false,\r\nnewGovInProgress=false,\r\nchangingTimesInProgress=false,\r\n}\r\ntransientState.autoPassData={\r\ninProgress=false,\r\ntilesToPlace={},\r\n}\r\ntransientState.changingGlobalParameters={}\r\nfunction getGameState()\r\nreturn gameState\r\nend\r\nfunction changeCityCount(params)\r\nif hexMapHelpers.isOnMars(gameMap,params.position) then\r\ngameState.citiesOnMars=gameState.citiesOnMars + params.delta\r\nelse\r\nif gameState.citiesInSpaceGuids==nil then\r\ngameState.citiesInSpaceGuids={}\r\nend\r\nif params.delta==1 then\r\ntable.insert(gameState.citiesInSpaceGuids,params.guid)\r\nelseif params.delta==-1 then\r\nlocal index=1\r\nfor i,guid in pairs(gameState.citiesInSpaceGuids) do\r\nif guid==params.guid then\r\nindex=i\r\nbreak\r\nend\r\nend\r\ntable.remove(gameState.citiesInSpaceGuids,index)\r\nend\r\ngameState.citiesInSpace=gameState.citiesInSpace + params.delta\r\nend\r\nupdateCityCounters()\r\nend\r\ngameObjectHelpers.isCity=function(guid)\r\nlocal object=getObjectFromGUID(guid)\r\nif object==nil then\r\nreturn false\r\nend\r\nlocal cityNames={\"City\",\"New Venice\",\"Red City\",\"Capital\"}\r\nfor _,name in pairs(cityNames) do\r\nif name==object.getName() then\r\nreturn true\r\nend\r\nend\r\nreturn false\r\nend\r\ngameObjectHelpers.isOcean=function(guid)\r\nif guid==nil then return false end\r\nreturn tableHelpers.isValueInTable(gameState.oceanTileGuids,guid)\r\nend\r\ngameObjectHelpers.isGreenery=function(guid)\r\nlocal object=getObjectFromGUID(guid)\r\nif object==nil then\r\nreturn false\r\nend\r\nreturn object.getName()==\"Greenery\"\r\nend\r\ngameObjectHelpers.isEmpty=function(guid)\r\nreturn guid==nil or guid==\"8b4c4f\"\r\nend\r\ngameObjectHelpers.recordOcean=function(guid)\r\nglobalParameterSystem.values.ocean.value=globalParameterSystem.values.ocean.value + 1\r\ntable.insert(gameState.oceanTileGuids,guid)\r\nend\r\ngameObjectHelpers.oceanDestroyed=function(guid)\r\nglobalParameterSystem.values.ocean.value=globalParameterSystem.values.ocean.value - 1\r\ntableHelpers.removeValueFromTable(gameState.oceanTileGuids,guid)\r\nend\r\ngameObjectHelpers.oceanStashed=function(guid)\r\nglobalParameterSystem.values.ocean.value=globalParameterSystem.values.ocean.value - 1\r\nend\r\ngameObjectHelpers.oceanRetrieved=function(guid)\r\nglobalParameterSystem.values.ocean.value=globalParameterSystem.values.ocean.value + 1\r\nend\r\nfunction isSupportedColor(color)\r\nfor _,supportedColor in pairs(gameState.rawPlayerOrder) do\r\nif supportedColor==color then\r\nreturn true\r\nend\r\nend\r\nreturn false\r\nend\r\nfunction isColorPlaying(color)\r\nfor _,player in pairs(gameState.allPlayers) do\r\nif player.color==color then\r\nreturn true\r\nend\r\nend\r\nreturn false\r\nend\r\ngameStateFunctions={}\r\ngameStateFunctions.addPlayer=function(playerColor,isNeutralPlayer)\r\nlocal positionToInsert=1\r\nlocal positionInRawOrder=-1\r\nfor i=1,#gameState.rawPlayerOrder do\r\nif gameState.rawPlayerOrder[i]==playerColor then\r\npositionInRawOrder=i\r\nend\r\nend\r\nif positionInRawOrder==-1 then\r\nlogging.broadcastToAll(\"Player Color \"..playerColor..\" not in Turn order. Report this issue\",playerColor,loggingModes.exception)\r\nreturn\r\nend\r\nfor i=1,positionInRawOrder do\r\nif gameState.allPlayers[positionToInsert]==nil then\r\nbreak\r\nend\r\nif gameState.allPlayers[positionToInsert].color==gameState.rawPlayerOrder[i] then\r\npositionToInsert=positionToInsert + 1\r\nend\r\nend\r\ntable.insert(gameState.allPlayers,positionToInsert,TMPlayer:new(playerColor,20,isNeutralPlayer) )\r\ngameState.numberOfPlayers=gameState.numberOfPlayers + 1\r\ngameState.allPlayers[positionToInsert].wasUpdated=true\r\nend\r","n63":"uiNames={}\nuiNames.solarPhase=\"solarPhase\"\nuiNames.genStart=\"genStart\"\nuiNames.playerNames={\n\"Player1\",\n\"Player2\",\n\"Player3\",\n\"Player4\",\n\"Player5\",\n\"Player6\"\n}\nuiNames.activePlayerIndicator={\n\"Turn1\",\n\"Turn2\",\n\"Turn3\",\n\"Turn4\",\n\"Turn5\",\n\"Turn6\"\n}\nuiNames.endTurnButtons={\nWhite=\"WhiteEndTurn\",\nBlue=\"BlueEndTurn\",\nYellow=\"YellowEndTurn\",\nRed=\"RedEndTurn\",\nGreen=\"GreenEndTurn\",\nOrange=\"OrangeEndTurn\"\n}","n64":"\n\nfunction toggleAntiLag(playerColor)\r\nlocal playerIndex=getPlayerIndexByColor(playerColor)\r\nif gameState.allPlayers[playerIndex].playerArea.playerAntiLagBoard~=nil then\r\ngetObjectFromGUID(gameState.allPlayers[playerIndex].playerArea.playerAntiLagBoard).destruct()\r\ngameState.allPlayers[playerIndex].playerArea.playerAntiLagBoard=nil\r\nelse\r\nif Player[playerColor].seated then\r\nbroadcastToColor(\"To use anti lag board just move cards from your hand there. It will lag less if enough players do this. They are hidden there from other players.\",playerColor,{0,1,0})\r\nend\r\ncreatePlayerAntiLagBoard(gameState.allPlayers[playerIndex])\r\nend\r\ngameState.allPlayers[playerIndex].wasUpdated=true\r\nend\r\nfunction toggleOrg(playerColor)\r\nlocal player=getPlayerByColor(playerColor)\r\nif player.playerArea.playerOrgHelpBoard~=nil then\r\ngetObjectFromGUID(player.playerArea.playerOrgHelpBoard).destruct()\r\nplayer.playerArea.playerOrgHelpBoard=nil\r\nelse\r\ncreatePlayerOrgHelpBoard(player)\r\nend\r\nend\r\nfunction toggleIconTableaus(playerColor)\r\nlocal playerIndex=getPlayerIndexByColor(playerColor)\r\nlocal player=gameState.allPlayers[playerIndex]\r\nif player.playerArea.iconTableaus~=nil and #player.playerArea.iconTableaus > 0 then\r\nfor _,iconTableauGuid in pairs(player.playerArea.iconTableaus) do\r\nlocal iconTableau=getObjectFromGUID(iconTableauGuid)\r\nif iconTableau~=nil then\r\niconTableau.destruct()\r\nend\r\nend\r\nplayer.playerArea.iconTableaus={}\r\nelse\r\ncreateIconTableaus(player)\r\nend\r\nplayer.wasUpdated=true\r\nend\r\nfunction toggleActivationTableau(playerColor)\r\nlocal player=getPlayerByColor(playerColor)\r\nif player.playerArea.activationTableau~=nil then\r\nlocal object=getObjectFromGUID(player.playerArea.activationTableau)\r\nplayer.playerArea.activationTableau=nil\r\nif object~=nil then\r\nobject.destruct()\r\nelse\r\ncreateActivationTableau(player)\r\nend\r\nelse\r\ncreateActivationTableau(player)\r\nend\r\nplayer.wasUpdated=true\r\nend\r\nfunction togglePersonalScoreBoard(playerColor)\r\nlocal player=getPlayerByColor(playerColor)\r\nif player.playerArea.personalScoreBoard~=nil then\r\nlocal object=getObjectFromGUID(player.playerArea.personalScoreBoard)\r\nplayer.playerArea.personalScoreBoard=nil\r\nif object~=nil then\r\nobject.destruct()\r\nelse\r\ncreatePersonalScoreBoard(player)\r\nend\r\nelse\r\ncreatePersonalScoreBoard(player)\r\nend\r\nplayer.wasUpdated=true\r\nend\r\nfunction createTRCube(player)\r\nfunction coroutineCloneCube()\r\ncoroutine.yield(0)\r\nlocal genericCube=gameObjectHelpers.getObjectByName(\"genericTRCube\")\r\nlocal newCube=genericCube.clone()\r\nwhile newCube.getGUID()==genericCube.getGUID() do\r\ncoroutine.yield(0)\r\nend\r\nnewCube.setName(player.color .. \" TR Cube\")\r\nnewCube.setLock(true)\r\nnewCube.setColorTint(stringColorToRGB(player.color))\r\nplayer.playerArea.trCube=newCube.getGUID()\r\nupdateCubePositionsOnTerraformingBar()\r\ncoroutine.yield(0)\r\ncoroutine.yield(0)\r\nupdateCubePositionsOnTerraformingBar()\r\nplayer.wasUpdated=true\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"coroutineCloneCube\")\r\nend\r\nfunction createPlayerBoard(player)\r\nlog(\"Creating player board for \"..player.color)\r\nlocal transform=tablePositions.player.playerSpawnPositions[player.color]\r\nlocal genericBoard=gameObjectHelpers.getObjectByName(\"genericPlayerBoard\")\r\nif transform.isLeftRightFlipped then\r\ngenericBoard=gameObjectHelpers.getObjectByName(\"genericPlayerBoardFlipped\")\r\nend\r\ncreateClonableObject(\r\ngenericBoard,\r\ntransform.pos,\r\ntransform.rot,\r\nfunction(clonedObjectGuid)\r\nplayer.playerArea.playerMat=genericBoard.getVar(\"lastClonedSelfGuid\")\r\nlocal clonedBoard=getObjectFromGUID(player.playerArea.playerMat)\r\nclonedBoard.call(\"initialize\",{playerColor=player.color,playerName=player.name})\r\nplayerActionFuncs_toggleAutoPassOption({playerColor=player.color,delta=0})\nplayer.wasUpdated=true\r\nend\r\n)\r\nend\r\nfunction createPlayerAntiLagBoard(player)\r\nlocal genericBoard=\tgameObjectHelpers.getObjectByName(\"genericPlayerAntiLagBoard\")\r\nlocal offsetTransform=tableHelpers.deepClone(getObjectFromGUID(player.playerArea.playerMat).call(\"getAntiLagBoardTransform\"))\r\ncreateClonableObject(\r\ngenericBoard,\r\noffsetTransform.pos,\r\noffsetTransform.rot,\r\nfunction(clonedObjectGuid)\r\nplayer.playerArea.playerAntiLagBoard=clonedObjectGuid\r\nlocal clonedBoard=getObjectFromGUID(player.playerArea.playerAntiLagBoard)\r\nclonedBoard.call(\"setPlayerColor\",player.color)\r\nclonedBoard.call(\"activateBoard\")\r\nplayer.wasUpdated=true\r\nend\r\n)\r\nend\r\nfunction createPlayerOrgHelpBoard(player)\r\nlocal genericBoard=\tgameObjectHelpers.getObjectByName(\"genericPlayerOrgHelpBoard\")\r\nlocal offsetTransform=tableHelpers.deepClone(getObjectFromGUID(player.playerArea.playerMat).call(\"getOrgBoardTransform\"))\r\ncreateClonableObject(\r\ngenericBoard,\r\noffsetTransform.pos,\r\noffsetTransform.rot,\r\nfunction(clonedObjectGuid)\r\nplayer.playerArea.playerOrgHelpBoard=clonedObjectGuid\r\nlocal clonedBoard=getObjectFromGUID(player.playerArea.playerOrgHelpBoard)\r\nclonedBoard.setVar(\"playerColor\",player.color)\r\nplayer.wasUpdated=true\r\nend\r\n)\r\nend\r\nfunction createIconTableaus(player)\r\nlog(\"Creating icon tableau for \"..player.color)\r\nfunction createIconTableausCoroutine()\r\nlocal tableau=gameObjectHelpers.getObjectByName(\"genericIconTableau\")\r\nwhile player.playerArea==nil or getObjectFromGUID(player.playerArea.playerMat)==nil do\r\ncoroutine.yield(0)\r\nend\r\nlocal offsetTransform=tableHelpers.deepClone(getObjectFromGUID(player.playerArea.playerMat).call(\"getIconTableuTransform\"))\r\ncreateClonableObject(tableau,\r\noffsetTransform.pos,\r\noffsetTransform.rot,\r\nfunction(clonedObjectGuid)\r\nif player.playerArea.iconTableaus==nil then\r\nplayer.playerArea.iconTableaus={}\r\nend\r\ntable.insert(player.playerArea.iconTableaus,clonedObjectGuid)\r\nlocal clonedIconTableau=getObjectFromGUID(clonedObjectGuid)\r\nclonedIconTableau.call(\"setPlayerColor\",player.color)\r\nend)\r\nlocal offset={-7.45,0,0}\r\nif gameState.activeExpansions.pathfinders then\r\nlocal basePathfinderTableau=gameObjectHelpers.getObjectByName(\"genericPathfinderIconTableau\")\r\nlocal pathfinderOffset=vectorHelpers.addVectors(offsetTransform.pos,vectorHelpers.rotateVectorY(offset,offsetTransform.rot[2]))\r\noffset=vectorHelpers.addVectors(offset,{-1.45,0,0})\r\ncreateClonableObject(basePathfinderTableau,\r\npathfinderOffset,\r\noffsetTransform.rot,\r\nfunction(clonedObjectGuid)\r\nif player.playerArea.iconTableaus==nil then\r\nplayer.playerArea.iconTableaus={}\r\nend\r\ntable.insert(player.playerArea.iconTableaus,clonedObjectGuid)\r\nlocal clonedIconTableau=getObjectFromGUID(clonedObjectGuid)\r\nclonedIconTableau.call(\"setPlayerColor\",player.color)\r\nplayer.wasUpdated=true\r\nend)\r\nend\r\nif gameState.activeExpansions.highOrbit then\r\nlocal highOrbitTableau=gameObjectHelpers.getObjectByName(\"genericHighOrbitIconTableau\")\r\nlocal highOrbitOffset=vectorHelpers.addVectors(offsetTransform.pos,vectorHelpers.rotateVectorY(offset,offsetTransform.rot[2]))\r\noffset=vectorHelpers.addVectors(offset,{-1.45,0,0.0})\r\ncreateClonableObject(highOrbitTableau,\r\nhighOrbitOffset,\r\noffsetTransform.rot,\r\nfunction(clonedObjectGuid)\r\nif player.playerArea.iconTableaus==nil then\r\nplayer.playerArea.iconTableaus={}\r\nend\r\ntable.insert(player.playerArea.iconTableaus,clonedObjectGuid)\r\nlocal clonedIconTableau=getObjectFromGUID(clonedObjectGuid)\r\nclonedIconTableau.call(\"setPlayerColor\",player.color)\r\nplayer.wasUpdated=true\r\nend)\r\nend\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"createIconTableausCoroutine\")\r\nend\r\nfunction createActivationTableau(player)\r\nfunction createActivationTableauCoroutine()\r\nlocal genericActivationTableau=gameObjectHelpers.getObjectByName(\"genericActivationTableau\")\r\nwhile player.playerArea==nil or getObjectFromGUID(player.playerArea.playerMat)==nil do\r\ncoroutine.yield(0)\r\nend\r\nlocal offsetTransform=tableHelpers.deepClone(getObjectFromGUID(player.playerArea.playerMat).call(\"getActivationTableuTransform\"))\r\ncreateClonableObject(genericActivationTableau,offsetTransform.pos,offsetTransform.rot,\r\nfunction(clonedObjectGuid)\r\nplayer.playerArea.activationTableau=clonedObjectGuid\r\nlocal clonedActivationTableau=getObjectFromGUID(player.playerArea.activationTableau)\r\nclonedActivationTableau.call(\"setPlayerColor\",player.color)\r\nplayer.wasUpdated=true\r\nend)\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"createActivationTableauCoroutine\")\r\nend\r\nfunction createPersonalScoreBoard(player)\r\nif player.neutral then return end\r\nfunction cloneScoreBoardCoroutine()\r\nlocal playerMat=getObjectFromGUID(player.playerArea.playerMat)\r\nlocal targetTransform=tableHelpers.deepClone(getObjectFromGUID(player.playerArea.playerMat).call(\"getPersonalScoreBoardTransform\"))\r\nlocal object=gameObjectHelpers.getObjectByName(\"genericScoreBoard\")\r\nnewObject=object.clone()\r\nnewObject.lock()\r\nwhile(object.getGUID()==newObject.getGUID()) do\r\ncoroutine.yield(0)\r\nend\r\nfor i=1,5 do\r\ncoroutine.yield(0)\r\nend\r\nlocal playerIndex=getPlayerIndexByColor(player.color)\r\nplayer.playerArea.personalScoreBoard=newObject.getGUID()\r\nnewObject.setPositionSmooth(targetTransform.pos,false,false)\r\nnewObject.setRotation(targetTransform.rot)\r\nnewObject.setScale({1.45,1,1.45})\r\nnewObject.call(\"setOwner\",player.color)\r\nnewObject.call(\"registerEventHandlers\")\r\nnewObject.call(\"setPlayerIndex\",playerIndex)\r\nupdatePlayerStats(playerIndex)\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"cloneScoreBoardCoroutine\")\r\nend\r\ncloningOngoing=false\r\nfunction isCloningOngoing()\r\nfor guid,status in pairs(cloningOngoingTable) do\r\nif status then\r\nreturn true\r\nend\r\nend\r\nreturn false\r\nend\r\ncloningOngoingTable={}\r\nfunction createClonableObject(object,targetPosition,targetRotation,callback,exclusiveCloningRequested)\r\nfunction coroutineCloneObject()\r\nlocal guid=object\r\nlocal clonableObject=nil\r\nif type(object)==\"userdata\" then\r\nclonableObject=object\r\nguid=clonableObject.getGUID()\r\nelse\r\nclonableObject=getObjectFromGUID(object)\r\nend\r\ncoroutine.yield(0)\r\nif clonableObject.tag==\"Bag\" then\r\nexclusiveCloningRequested=true\r\nend\r\nwhile exclusiveCloningRequested and exclusiveCloning do\r\ncoroutine.yield(0)\r\nend\r\nif exclusiveCloningRequested then\r\nexclusiveCloning=true\r\nwhile isCloningOngoing() do\r\ncoroutine.yield(0)\r\nend\r\nend\r\n--log(\"Enter clone object coroutine\")\r\nwhile cloningOngoingTable[guid] or (exclusiveCloning and not exclusiveCloningRequested) do\r\ncoroutine.yield(0)\r\nend\r\ncloningOngoingTable[guid]=true\r\n--log(\"Starting clonable object creation for object with guid \"..clonableObject.getGUID())\r\nclonableObject.call(\"copySelf\",{position=targetPosition,rotation=targetRotation})\r\nwhile clonableObject.getVar(\"lastClonedSelfGuid\")==nil do\r\ncoroutine.yield(0)\r\nend\r\nlocal clonedObjectGuid=clonableObject.getVar(\"lastClonedSelfGuid\")\r\nif type(callback)==\"function\" then\r\ncallback(clonedObjectGuid)\r\nend\r\n--log(\"Finished cloning object\")\r\nif exclusiveCloningRequested then\r\nexclusiveCloning=false\r\nend\r\ncloningOngoingTable[guid]=false\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"coroutineCloneObject\")\r\nend\r\nfunction fastCreateClonableObject(object,targetPosition,targetRotation,callback,exclusiveCloningRequested)\r\nfunction coroutineCloneObject()\r\nlocal guid=object\r\nlocal clonableObject=nil\r\nif type(object)==\"userdata\" then\r\nclonableObject=object\r\nguid=clonableObject.getGUID()\r\nelse\r\nclonableObject=getObjectFromGUID(object)\r\nend\r\nwhile cloningOngoingTable[guid] do\r\ncoroutine.yield(0)\r\nend\r\ncloningOngoingTable[guid]=true\r\nclonableObject.call(\"copySelf\",{position=targetPosition,rotation=targetRotation})\r\nwhile clonableObject.getVar(\"lastClonedSelfGuid\")==nil do\r\ncoroutine.yield(0)\r\nend\r\nlocal clonedObjectGuid=clonableObject.getVar(\"lastClonedSelfGuid\")\r\nif type(callback)==\"function\" then\r\ncallback(clonedObjectGuid)\r\nend\r\ncloningOngoingTable[guid]=false\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"coroutineCloneObject\")\r\nend\r\n--\r\n--   obj.owningPlayer=owningPlayer\r\n--   obj.genericToBeClonedObjectName=genericToBeClonedObjectName\r\n--\r\n--\r\n--\r\n-- \t\t-- Make sure only one cloning is going on at one time\r\n--\r\n--\r\n--\r\n--\r\n--\r\n--\r\n--\r\n--  return toBeClonedObject.clonedObject\r","n65":"function genStart()\r\nif isDoubleClick(\"genStart\") then\r\nreturn\r\nend\r\ngameState.currentPhase=phases.generationPhase\r\neventHandling_triggerEvent( {\r\ntriggeredByColor=gameState.allPlayers[gameState.firstPlayer].color,\r\ntriggerType=eventData.triggerType.playerTurnBegan} )\r\nnotifyCurrentPlayer()\r\nupdatePlayerUI()\r\nend\r\nfunction endTurnRemotely(params)\r\nlocal triggeredByColor=params.playerColor\r\nif gameState.currentPhase==phases.draftingPhase then\r\ngameState.currentPhase=phases.generationPhase\r\nend\r\nfor i,player in pairs(gameState.allPlayers) do\r\nif player.color==triggeredByColor then\r\nif i==gameState.currentPlayer then\r\nif params.hasPassed then\r\nplayer.hasPassedGeneration=true\r\nend\r\nendTurn()\r\nend\r\nend\r\nend\r\nend\r\nfunction endTurnHandleTimer(nextPlayerToCheck)\r\nlocal currentPlayer=gameState.allPlayers[gameState.currentPlayer]\r\nif gameState.activeExpansions.timer then\r\nif gameState.currentPlayer~=nextPlayerToCheck then\r\nif currentPlayer.playerActions.actionDone==0 then\r\nlocal playerMat=getObjectFromGUID(currentPlayer.playerArea.playerMat)\r\nplayerMat.call(\"passGenerationRemotely\")\r\ntimerFunctions.onPlayerTurnEnd(gameState.currentPlayer)\r\nreturn true\r\nelse\r\ntimerFunctions.onPlayerTurnEnd(gameState.currentPlayer)\r\nend\r\nelse\r\nif currentPlayer.timer.time==0 then\r\nlocal playerMat=getObjectFromGUID(currentPlayer.playerArea.playerMat)\r\nplayerMat.call(\"passGenerationRemotely\")\r\ntimerFunctions.onPlayerTurnEnd(gameState.currentPlayer)\r\nreturn true\r\nend\r\nend\r\ngameState.allPlayers[nextPlayerToCheck].timer.isRunning=true\r\nend\r\nreturn false\r\nend\r\nfunction endTurn()\r\nif isDoubleClick(\"endTurn\") then\r\nreturn\r\nend\r\nif gameState.started then\r\nlocal nextPlayerFound=false\r\nif gameState.turmoil then\r\nrecalculateDominance()\r\nrecalculatePartyLeads()\r\nend\r\nfor i=1,gameState.numberOfPlayers do\r\nlocal nextPlayerToCheck=gameState.currentPlayer + i\r\nif nextPlayerToCheck > gameState.numberOfPlayers then\r\nnextPlayerToCheck=nextPlayerToCheck - gameState.numberOfPlayers\r\nend\r\nlocal hasPassed=gameState.allPlayers[nextPlayerToCheck].hasPassedGeneration\r\nif not hasPassed and not gameState.allPlayers[nextPlayerToCheck].neutral and Player[gameState.allPlayers[nextPlayerToCheck].color].seated then\r\nlocal exit=endTurnHandleTimer(nextPlayerToCheck)\r\nif exit then\r\nbreak\r\nend\r\nif gameState.currentPlayer==nextPlayerToCheck then\r\nlogging.broadcastToAll(gameState.allPlayers[nextPlayerToCheck].name..\" is alone in this gen!\",{1,1,1},loggingModes.important)\r\nelse\r\ngameState.allPlayers[gameState.currentPlayer].playerActions.actionsDone=0\r\nif gameState.currentPhase==phases.generationPhase then\r\neventHandling_triggerEvent( {\r\ntriggeredByColor=gameState.allPlayers[gameState.currentPlayer].color,\r\ntriggerType=eventData.triggerType.playerTurnEnd} )\r\nend\r\nend\r\ngameState.currentPlayer=nextPlayerToCheck\r\nnextPlayerFound=true\r\nnotifyCurrentPlayer()\r\nupdatePlayerUI()\r\nif gameState.currentPhase==phases.generationPhase then\r\neventHandling_triggerEvent( {\r\ntriggeredByColor=gameState.allPlayers[gameState.currentPlayer].color,\r\ntriggerType=eventData.triggerType.playerTurnBegan} )\r\nend\r\nbreak\r\nend\r\nend\r\nif not nextPlayerFound then\r\ngameState.allPlayers[gameState.currentPlayer].playerActions.actionsDone=0\r\ngameState.currentPlayer=-1\r\nproductionPhase()\r\nif not checkEndOfGame() then\r\nif gameState.solarPhase then\r\ngameState.currentPhase=phases.solarPhase\r\nlocal firstPlayer=gameState.allPlayers[gameState.firstPlayer]\r\nlogging.broadcastToAll(firstPlayer.name..\" to do solar phase!\",firstPlayer.color,loggingModes.essential)\r\nupdatePlayerUI()\r\nelse\r\nendGeneration()\r\nend\r\nelse\r\nlogging.printToAll(\"Game is ending! Thanks for playing!\",{1,1,1},loggingModes.exception)\r\nendGame()\r\nend\r\nend\r\nend\r\nend\r\nfunction solarPhase()\r\nif isDoubleClick(\"solarPhase\") then\r\nreturn\r\nend\r\nendGeneration()\r\nend\r\nfunction endGame()\r\ngameState.ended=true\r\ngameState.currentPhase=phases.gameEndPhase\r\nshowScoreBoards()\r\nupdatePlayerUI()\r\nend\r\nfunction endGeneration()\r\ngameState.currentGeneration=gameState.currentGeneration + 1\r\nif gameState.isSoloGame and gameState.currentGeneration > gameState.maxGeneration then\r\nlogging.broadcastToAll(\"You should have finished terraforming by now. Unfortunately by official rules game is over now. You can keep playing however\",{1,0,0},loggingModes.exception)\r\nend\r\nupdateCubePositionsOnTerraformingBar()\r\npassFirstPlayer()\r\nresetPassState()\r\nresearchPhaseFunctions.beginResearchPhase(draftingData.researchPhase.defaultRule)\r\nif gameState.activeExpansions.timer then\r\ntimerFunctions.onEndGeneration()\r\nend\r\nif gameState.colonies then\r\nresetTradingFleets()\r\nincreaseColonyMarkers()\r\nend\r\nupdatePlayerUI()\r\nresetActions()\r\neventHandling_triggerEvent({triggeredByColor=nil,triggerType=eventData.triggerType.newGeneration})\r\nend\r\nfunction resetActions()\r\nobjects=getAllObjects()\r\nfor i,v in pairs(objects) do\r\nrotation=v.getRotation()\r\nzAxis=rotation[3]\r\nif v.getDescription()=='Action Marker' and zAxis >= 179 then\r\nv.flip()\r\nelseif v.getVar('action')==true then\r\nv.call('genEnd')\r\nend\r\nend\r\nend\r\nfunction resetPassState()\r\nfor i,player in pairs(gameState.allPlayers) do\r\nif not player.neutral then\r\nplayer.hasPassedGeneration=false\r\nlocal playerMat=getObjectFromGUID(player.playerArea.playerMat)\r\nif playerMat~=nil then\r\nplayerMat.call(\"resetRocketPass\")\r\nend\r\nend\r\nend\r\nend\r\nfunction productionPhase()\r\nfor _,tmPlayer in pairs(gameState.allPlayers) do\r\nif not tmPlayer.neutral then\r\nlogging.printToColor(\"> > > > > > > > > Production Phase for player: \"..tmPlayer.color,tmPlayer.color,tmPlayer.color,loggingModes.debugging)\r\nlogging.printToColor(\"[Stockpile] Creds:\"..getPlayerResource({resourceType=\"credits\",playerColor=tmPlayer.color})\r\n..\" Steel:\"..getPlayerResource({resourceType=\"steel\",playerColor=tmPlayer.color})\r\n..\" Titan:\"..getPlayerResource({resourceType=\"titanium\",playerColor=tmPlayer.color})\r\n..\" Plants:\"..getPlayerResource({resourceType=\"plants\",playerColor=tmPlayer.color})\r\n..\" Energy:\"..getPlayerResource({resourceType=\"energy\",playerColor=tmPlayer.color})\r\n..\" Heat:\"..getPlayerResource({resourceType=\"heat\",playerColor=tmPlayer.color})\r\n..\" TR:\"..tmPlayer.terraformingRating,\r\ntmPlayer.color,tmPlayer.color,loggingModes.debugging)\r\nlogging.printToColor(\"[Production] Creds:\"..getPlayerProduction({resourceType=\"credits\",playerColor=tmPlayer.color})\r\n..\" Steel:\"..getPlayerProduction({resourceType=\"steel\",playerColor=tmPlayer.color})\r\n..\" Titan:\"..getPlayerProduction({resourceType=\"titanium\",playerColor=tmPlayer.color})\r\n..\" Plants:\"..getPlayerProduction({resourceType=\"plants\",playerColor=tmPlayer.color})\r\n..\" Energy:\"..getPlayerProduction({resourceType=\"energy\",playerColor=tmPlayer.color})\r\n..\" Heat:\"..getPlayerProduction({resourceType=\"heat\",playerColor=tmPlayer.color}),\r\ntmPlayer.color,tmPlayer.color,loggingModes.debugging)\r\nend\r\ngetObjectFromGUID(tmPlayer.playerArea.playerMat).call(\"performProductionPhase\",tmPlayer.terraformingRating)\r\nif not tmPlayer.neutral then\r\nlogging.printToColor(\"Production done\",tmPlayer.color,tmPlayer.color,loggingModes.debugging)\r\nlogging.printToColor(\"[Stockpile] Creds:\"..getPlayerResource({resourceType=\"credits\",playerColor=tmPlayer.color})\r\n..\" Steel:\"..getPlayerResource({resourceType=\"steel\",playerColor=tmPlayer.color})\r\n..\" Titan:\"..getPlayerResource({resourceType=\"titanium\",playerColor=tmPlayer.color})\r\n..\" Plants:\"..getPlayerResource({resourceType=\"plants\",playerColor=tmPlayer.color})\r\n..\" Energy:\"..getPlayerResource({resourceType=\"energy\",playerColor=tmPlayer.color})\r\n..\" Heat:\"..getPlayerResource({resourceType=\"heat\",playerColor=tmPlayer.color}),\r\ntmPlayer.color,tmPlayer.color,loggingModes.debugging)\r\nlogging.printToColor(\"< < < < < < < < <\",tmPlayer.color,tmPlayer.color,loggingModes.debugging)\r\nend\r\nend\r\neventHandling_triggerEvent({triggeredByColor=nil,triggerType=eventData.triggerType.productionPhase})\r\nend\r\nfunction checkEndOfGame()\r\nlocal soloGameEnd=true\r\nif gameState.isSoloGame then\r\nsoloGameEnd=gameState.currentGeneration >= gameState.maxGeneration\r\nend\r\nif globalParameterSystem.values.temperature.isDone then\r\nlogging.printToAll(\"Temperature is Done! Keep going!\",{1,1,1},loggingModes.exception)\r\nend\r\nif globalParameterSystem.values.oxygen.isDone then\r\nlogging.printToAll(\"Oxygen is Done! Keep going!\",{1,1,1},loggingModes.exception)\r\nend\r\nif oceanEndGameConditionFulfilled() then\r\nlogging.printToAll(\"All oceans placed! Keep going!\",{1,1,1},loggingModes.exception)\r\nend\r\nif gameState.venusIsWin and gameState.venus then\r\nif globalParameterSystem.values.venus.isDone then\r\nlogging.printToAll(\"Venus is Done! Keep going!\",{1,1,1},loggingModes.exception)\r\nelse\r\nlogging.broadcastToAll(\"Remember Venus is a Win Condition!\",{1,1,1},loggingModes.exception)\r\nend\r\nreturn globalParameterSystem.values.temperature.isDone and globalParameterSystem.values.oxygen.isDone and oceanEndGameConditionFulfilled() and globalParameterSystem.values.venus.isDone and soloGameEnd\r\nelse\r\nreturn globalParameterSystem.values.temperature.isDone and globalParameterSystem.values.oxygen.isDone and oceanEndGameConditionFulfilled() and soloGameEnd\r\nend\r\nend\r\nfunction oceanEndGameConditionFulfilled()\r\nreturn #getObjectFromGUID(bags.oceanBag).getObjects()==0\r\nend\r","n66":"gameObjectHelpers.findPlaymat=function()\r\nfor k,obj in pairs(getAllObjects()) do\r\nif obj.getName()==\"PlayMatTile\" then\r\nreturn obj\r\nend\r\nend\r\nlogging.broadcastToAll('Playmat not found,report the issue!',{1,0.1,0.1},loggingModes.exception)\r\nend\r\nfunction increaseTempButtonClick(obj,playerColor)\r\nincreaseTemp(playerColor)\r\nend\r\nfunction decreaseTempButtonClick(obj,playerColor)\r\ndecreaseTemp(playerColor)\r\nend\r\nfunction increaseO2ButtonClick(obj,playerColor)\r\nincreaseO2(playerColor)\r\nend\r\nfunction decreaseO2ButtonClick(obj,playerColor)\r\ndecreaseO2(playerColor)\r\nend\r\nfunction increaseVenusButtonClick(obj,playerColor)\r\nincreaseVenus(playerColor)\r\nend\r\nfunction decreaseVenusButtonClick(obj,playerColor)\r\ndecreaseVenus(playerColor)\r\nend\r\nfunction increaseTRButtonClick(obj,playerColor)\r\nincreasePlayerTRByColor(playerColor,\"manual button click\")\r\nend\r\nfunction decreaseTRButtonClick(obj,playerColor)\r\ndecreasePlayerTRByColor(playerColor,\"manual button click\")\r\nend\r\nfunction increaseVenus(playerColor)\r\nglobalParameterSystem.changeParameter(globalParameters.venus,globalParameterSystem.values.venus,1,playerColor,eventData.triggerType.venusTerraformed)\r\nend\r\nfunction decreaseVenus(playerColor)\r\nglobalParameterSystem.changeParameter(globalParameters.venus,globalParameterSystem.values.venus,-1,playerColor)\r\nend\r\nfunction increaseTemp(playerColor)\r\nglobalParameterSystem.changeParameter(globalParameters.temperature,globalParameterSystem.values.temperature,1,playerColor)\r\nend\r\nfunction decreaseTemp(playerColor)\r\nglobalParameterSystem.changeParameter(globalParameters.temperature,globalParameterSystem.values.temperature,-1,playerColor)\r\nend\r\nfunction increaseO2(playerColor)\r\nglobalParameterSystem.changeParameter(globalParameters.oxygen,globalParameterSystem.values.oxygen,1,playerColor,eventData.triggerType.oxygenIncreased)\r\nend\r\nfunction decreaseO2(playerColor)\r\nglobalParameterSystem.changeParameter(globalParameters.oxygen,globalParameterSystem.values.oxygen,-1,playerColor)\r\nend\r\nfunction increaseOcean(playerColor)\r\nglobalParameterSystem.changeParameter(globalParameters.ocean,globalParameterSystem.values.ocean,1,playerColor,nil)\r\nend\r\nfunction decreaseOcean(playerColor)\r\nglobalParameterSystem.changeParameter(globalParameters.ocean,globalParameterSystem.values.ocean,-1,playerColor,nil)\r\nend\r\nfunction changeExtraOcean(delta)\r\nglobalParameterSystem.values.ocean.extra=globalParameterSystem.values.ocean.extra + delta\r\nif globalParameterSystem.values.ocean.extra < 0 then\r\nglobalParameterSystem.values.ocean.extra=0\r\nend\r\nlocal extraOceansCounter=gameObjectHelpers.getObjectByName(\"extraOceansCounter\")\r\nextraOceansCounter.setValue(globalParameterSystem.values.ocean.extra)\r\nend\r\nfunction updateCityCounters()\r\nlocal extraCities=0\r\nfor _,specialCityName in pairs({\"capitalCityToken\",\"oceanCityToken\",\"redCity\"}) do\r\nif gameObjectHelpers.getObjectByName(specialCityName)~=nil then\r\nextraCities=extraCities + 1\r\nend\r\nend\r\ngameObjectHelpers.getObjectByName(\"cityCounter\").setValue(gameState.citiesOnMars + gameState.citiesInSpace)\r\ngameObjectHelpers.getObjectByName(\"citiesOnMarsCounter\").setValue(gameState.citiesOnMars)\r\nend\r\nfunction energyStandardProject(obj,color)\r\nlocal tmPlayer=getPlayerByColor(color)\r\nlocal creditsNeeded=11\r\nif gameState.extendedScriptingEnabled and tmPlayer.paymentSystemConfig.discounts.permanent[\"PowerStandardProject\"]~=nil then\r\ncreditsNeeded=creditsNeeded + tmPlayer.paymentSystemConfig.discounts.permanent[\"PowerStandardProject\"]\r\nend\r\nif getPlayerResource({resourceType=\"credits\",playerColor=color}) >= creditsNeeded then\r\nlogging.printToAll(color..\" used standard project 'Power Plant'\",color,loggingModes.detail)\r\nchangePlayerProduction({resourceType=\"energy\",playerColor=color,resourceAmount= 1})\r\nchangePlayerResource({resourceType=\"credits\",playerColor=color,resourceAmount= -creditsNeeded})\r\neventHandling_triggerEvent({triggeredByColor=color,triggerType=eventData.triggerType.standardProjectPowerPlant})\r\nplayerActionFuncs.playerHasPerformedAction(color)\r\nend\r\nend\r\nfunction sellPatentsStandardProject(obj,playerColor)\r\nlocal effects={}\r\nlocal resourceValues={Credits=0}\r\nfor _,object in pairs(Player[playerColor].getHandObjects()) do\r\nif object.tag==\"Card\" then\r\ntable.insert(effects,\"DiscardCard\")\r\nresourceValues[\"Credits\"]=resourceValues[\"Credits\"] + 1\r\nend\r\nend\r\nlocal actionProperties={effects=effects,resourceValues=resourceValues,productionValues={}}\r\nlogging.printToAll(playerColor..\" used standard project 'Sell Patent'\",playerColor,loggingModes.detail)\r\nGlobal.call(\"objectActivationSystem_doAction\",{\r\nactivationEffects=actionProperties,\r\nsourceName=\"selling patents\",\r\nplayerColor=playerColor,\r\nobject=nil,\r\n})\r\nend\r\nfunction temperatureStandardProject(obj,color)\r\nif getPlayerResource({resourceType=\"credits\",playerColor=color}) >= 14 and not gameState.temperatureDone then\r\nlogging.printToAll(color..\" used standard project 'Asteroid'\",color,loggingModes.detail)\r\nincreaseTempButtonClick(obj,color,nil)\r\nchangePlayerResource({resourceType=\"credits\",playerColor=color,resourceAmount= -14})\r\neventHandling_triggerEvent({triggeredByColor=color,triggerType=eventData.triggerType.standardProjectTemperature})\r\nplayerActionFuncs.playerHasPerformedAction(color)\r\nend\r\nend\r\nfunction oceanStandardProject(obj,color)\r\nif getPlayerResource({resourceType=\"credits\",playerColor=color}) >= 18 and not globalParameterSystem.values.ocean.isDone then\r\nlogging.printToAll(color..\" used standard project 'Aquifier'\",color,loggingModes.detail)\r\ndealOceanToPlayer(getPlayerIndexByColor(color))\r\nchangePlayerResource({resourceType=\"credits\",playerColor=color,resourceAmount= -18})\r\neventHandling_triggerEvent({triggeredByColor=color,triggerType=eventData.triggerType.standardProjectOcean})\r\nplayerActionFuncs.playerHasPerformedAction(color)\r\nend\r\nend\r\nfunction greeneryStandardProject(obj,color)\r\nlocal tmPlayer=getPlayerByColor(color)\r\nlocal creditsNeeded=23\r\nif gameState.extendedScriptingEnabled and tmPlayer.paymentSystemConfig.discounts.permanent[\"GreeneryStandardProject\"]~=nil then\r\ncreditsNeeded=creditsNeeded + tmPlayer.paymentSystemConfig.discounts.permanent[\"GreeneryStandardProject\"]\r\nend\r\nif getPlayerResource({resourceType=\"credits\",playerColor=color}) >= creditsNeeded then\r\nlogging.printToAll(color..\" used standard project 'Greenery'\",color,loggingModes.detail)\r\ndealGreeneryTileToPlayer(getPlayerIndexByColor(color))\r\nchangePlayerResource({resourceType=\"credits\",playerColor=color,resourceAmount= -creditsNeeded})\r\neventHandling_triggerEvent({triggeredByColor=color,triggerType=eventData.triggerType.standardProjectGreenery})\r\nplayerActionFuncs.playerHasPerformedAction(color)\r\nend\r\nend\r\nfunction cityStandardProject(obj,playerColor)\r\nlocal tmPlayer=getPlayerByColor(playerColor)\r\nlocal creditsNeeded=25\r\nif gameState.extendedScriptingEnabled and tmPlayer.paymentSystemConfig.discounts.permanent[\"CityStandardProject\"]~=nil then\r\ncreditsNeeded=creditsNeeded + tmPlayer.paymentSystemConfig.discounts.permanent[\"CityStandardProject\"]\r\nend\r\nlocal isAllowed=buyStandardProject(playerColor,creditsNeeded,\"City\",{eventData.triggerType.standardProjectCity})\r\nif isAllowed then\r\ndealCityTileToPlayer(getPlayerIndexByColor(playerColor))\r\nchangePlayerProduction({resourceType=\"credits\",playerColor=playerColor,resourceAmount=1})\r\nend\r\nend\r\nfunction venusSp15(obj,playerColor)\r\nif not gameState.activeExpansions.venus then\r\nreturn\r\nend\r\nlocal isAllowed=buyStandardProject(playerColor,15,\"Air Scrapping\",{eventData.triggerType.standardProjectVenus,eventData.triggerType.buyVenusStandardProject})\r\nif isAllowed then\r\nincreaseVenusButtonClick(obj,playerColor)\r\nend\r\nend\r\nfunction coloniesSp17(obj,playerColor)\r\nlocal isAllowed=buyStandardProject(playerColor,17,\"Colony\",{eventData.triggerType.standardProjectColony})\r\nif isAllowed then\r\ndealPlayerMarkerToPlayer(getPlayerIndexByColor(playerColor))\r\nend\r\nend\r\nfunction airScrappingStandardProject(_,playerColor)\r\nvenusSp15(nil,playerColor)\r\nend\r\nfunction colonyStandardProject(_,playerColor)\r\ncoloniesSp17(nil,playerColor)\r\nend\r\nfunction floatingArrayStandardProject(_,playerColor)\r\nlocal isAllowed=buyStandardProject(playerColor,19,\"Floating Array\",{eventData.triggerType.buyVenusStandardProject})\r\nif isAllowed then\r\ndealFloatingArrayTileToPlayer(getPlayerIndexByColor(playerColor))\r\nend\r\nend\r\nfunction gasMineStandardProject(_,playerColor)\r\nlocal isAllowed=buyStandardProject(playerColor,21,\"Gas Mine\",{eventData.triggerType.buyVenusStandardProject})\r\nif isAllowed then\r\ndealGasMineTileToPlayer(getPlayerIndexByColor(playerColor))\r\nend\r\nend\r\nfunction venusHabitatStandardProject(_,playerColor)\r\nlocal isAllowed=buyStandardProject(playerColor,25,\"Cloud City\",{eventData.triggerType.buyVenusStandardProject})\r\nif isAllowed then\r\nchangePlayerProduction({resourceType=\"credits\",playerColor=playerColor,resourceAmount=1})\r\ndealVenusHabitatTileToPlayer(getPlayerIndexByColor(playerColor))\r\nend\r\nend\r\nfunction buyStandardProject(playerColor,cost,standardProjectName,customEventTriggerTypes)\r\nif getPlayerResource({resourceType=\"credits\",playerColor=playerColor}) >= cost then\r\nlogging.printToAll(playerColor..\" used standard project '\"..standardProjectName..\"'\",playerColor,loggingModes.detail)\r\nchangePlayerResource({resourceType=\"credits\",playerColor=playerColor,resourceAmount=-cost})\r\neventHandling_triggerEvent({triggeredByColor=playerColor,triggerType=eventData.triggerType.buyStandardProject})\r\nif customEventTriggerTypes then\r\nfor _,trigger in pairs(customEventTriggerTypes) do\r\neventHandling_triggerEvent({triggeredByColor=playerColor,triggerType=trigger})\r\nend\r\nend\r\nplayerActionFuncs.playerHasPerformedAction(color)\r\nreturn true\r\nelse\r\nlogging.printToColor(\"Cannot buy standard project '\"..standardProjectName..\"''. You need \"..cost..\" credits.\",playerColor,playerColor)\r\nreturn false\r\nend\r\nend\r","n67":"scoringFunctions={}\r\nscoringFunctions.venusPhaseTwo=function(playerColor)\r\nif venusMap==nil then\r\nreturn 0\r\nend\r\nlocal vpCount=0\r\nfor i,jkMatrix in pairs(venusMap.tiles) do\r\nfor j,kMatrix in pairs(jkMatrix) do\r\nfor k,tile in pairs(kMatrix) do\r\nif tile.tileObjects~=nil then\r\nfor _,tileObject in pairs(tile.tileObjects) do\r\nif tileObject.owner==playerColor then\r\nlocal objectName=tileObject.objectName\r\nif objectName==\"venusHabitat\" or objectName==\"gasMine\" then\r\nfor _,neighbourTile in pairs(hexMapHelpers.getNeighboursFromIndices(venusMap,{i,j,k})) do\r\nif neighbourTile.tileObjects~=nil then\r\nfor _,neighbourTileObject in pairs(neighbourTile.tileObjects) do\r\nif neighbourTileObject.objectName==\"floatingArray\" then\r\nvpCount=vpCount + 1\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nreturn vpCount\r\nend\r\nscoringFunctions.timer=function(player)\r\nif gameState.timerConfiguration.timeoutAction~=\"giveNegativeVPs\" or player.neutral then return 0 end\r\nlocal timeToConsider=player.timer.time - gameState.timerConfiguration.negativeVpThreshold\r\nif timeToConsider > 0 then\r\nreturn 0\r\nend\r\nreturn math.ceil(timeToConsider/gameState.timerConfiguration.secondsPerNegativeVp)\r\nend\r\nscoringFunctions.pathfinder=function(playerColor)\r\nif not gameState.activeExpansions.pathfinders then\r\nreturn 0\r\nend\r\nlocal vpCount=0\r\nlocal pathfinderBoard=gameObjectHelpers.getObjectByName(\"pathfinderBoard\")\r\nfor _,trackId in pairs({\"Mars\",\"Venus\",\"Earth\",\"Jovian\"}) do\r\nif pathfinderBoard.call(\"hasReachedVpThreshold\",trackId) then\r\nlocal maxValue=0\r\nfor _,player in pairs(gameState.allPlayers) do\r\nif not player.neutral then\r\nif player.tagSystem.tagCounts[trackId] > maxValue then\r\nmaxValue=player.tagSystem.tagCounts[trackId]\r\nend\r\nend\r\nend\r\nif getPlayerByColor(playerColor).tagSystem.tagCounts[trackId]==maxValue then\r\nvpCount=vpCount + pathfinderBoard.call(\"getVPFromTrack\",trackId)\r\nend\r\nend\r\nend\r\nreturn vpCount\r\nend\r\nfunction calculateGreeneryScoreForPlayer(player_color)\r\nlocal greeneryVPCount=0\r\nfor i,jkMatrix in pairs(gameMap.tiles) do\r\nfor j,kMatrix in pairs(jkMatrix) do\r\nfor k,tile in pairs(kMatrix) do\r\nif tile.tileObjects~=nil then\r\nfor _,tileObject in pairs(tile.tileObjects) do\r\nif (tileObject.objectName==\"greenery\" or tileObject.objectName==\"wetlands\") and player_color==tileObject.owner then\r\ngreeneryVPCount=greeneryVPCount + 1\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nreturn greeneryVPCount\r\nend\r\nfunction calculateCityScoreForPlayer(player_color)\r\nlocal cityVPCount=0\r\nfor i,jkMatrix in pairs(gameMap.tiles) do\r\nfor j,kMatrix in pairs(jkMatrix) do\r\nfor k,tile in pairs(kMatrix) do\r\nif tile.tileObjects~=nil then\r\nfor _,tileObject in pairs(tile.tileObjects) do\r\nif tileObject.owner==player_color then\r\nlocal objectName=tileObject.objectName\r\nif objectName==\"cityTile\" or objectName==\"newVenice\" or objectName==\"capitalCity\" then\r\nfor _,neighbourTile in pairs(hexMapHelpers.getNeighboursFromIndices(gameMap,{i,j,k})) do\r\nif neighbourTile.tileObjects~=nil then\r\nfor _,neighbourTileObject in pairs(neighbourTile.tileObjects) do\r\nif neighbourTileObject.objectName==\"greenery\" then\r\ncityVPCount=cityVPCount + 1\r\nelseif objectName~=\"capitalCity\" and neighbourTileObject.objectName==\"wetlands\" then\r\ncityVPCount=cityVPCount + 1\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nreturn cityVPCount\r\nend\r\nfunction vpsForSpecialTiles(playerColor)\r\nlocal specialTilesVPs=0\r\nfor i,jkMatrix in pairs(gameMap.tiles) do\r\nfor j,kMatrix in pairs(jkMatrix) do\r\nfor k,tile in pairs(kMatrix) do\r\nif tile.tileObjects~=nil then\r\nfor _,tileObject in pairs(tile.tileObjects) do\r\nif tileObject.objectName==\"commercialDistrict\" and playerColor==tileObject.owner then\r\nfor _,neighbourTile in pairs(hexMapHelpers.getNeighboursFromIndices(gameMap,{i,j,k})) do\r\nlocal objectNamesCounting={cityTile=\"cityTile\",redCity=\"redCity\",capitalCity=\"capitalCity\",newVenice=\"newVenice\"}\r\nif neighbourTile.tileObjects~=nil then\r\nfor _,neighbourTileObject in pairs(neighbourTile.tileObjects) do\r\nif objectNamesCounting[neighbourTileObject.objectName]~=nil then\r\nspecialTilesVPs=specialTilesVPs + 1\r\nend\r\nend\r\nend\r\nend\r\nelseif tileObject.objectName==\"redCity\" and playerColor==tileObject.owner then\r\nfor _,neighbourTile in pairs(hexMapHelpers.getNeighboursFromIndices(gameMap,{i,j,k})) do\r\nif neighbourTile.tileObjects==nil or next(neighbourTile.tileObjects)==nil then\r\nspecialTilesVPs=specialTilesVPs + 1\r\nend\r\nend\r\nelseif tileObject.objectName==\"capitalCity\" and playerColor==tileObject.owner then\r\nfor _,neighbourTile in pairs(hexMapHelpers.getNeighboursFromIndices(gameMap,{i,j,k})) do\r\nif neighbourTile.tileObjects~=nil then\r\nfor _,neighbourTileObject in pairs(neighbourTile.tileObjects) do\r\nif neighbourTileObject.objectName==\"ocean\" or neighbourTileObject.objectName==\"wetlands\" then\r\nspecialTilesVPs=specialTilesVPs + 1\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nreturn specialTilesVPs\r\nend\r\nfunction calculateMilestones(playerColor)\r\nlocal scoreCount=0\r\nfor _,claimedMilestone in pairs(gameState.claimedMilestones) do\r\nif claimedMilestone.owner==playerColor then\r\nscoreCount=scoreCount + 5\r\nend\r\nend\r\nreturn scoreCount\r\nend\r\nfunction calculateAwards(playerColor)\r\nlocal playerColorsAndVps=awardScoring.calculateAllPlayerAwardScores()\r\nreturn playerColorsAndVps[playerColor] or 0\r\nend\r\nfunction calculateDelegateVPs(playerColor)\r\nlocal scoreCount=0\r\nlocal chairman=getChairman()\r\nif playerColor==chairman.getDescription() then\r\nscoreCount=scoreCount + 1\r\nend\r\nfor _,partyInfo in pairs(gameState.turmoilData.parties) do\r\nif getPartyLeadColor(partyInfo)==playerColor then\r\nscoreCount=scoreCount + 1\r\nend\r\nif getPartyLeadColor(partyInfo)==nil then\r\nWait.time(|| logging.broadcastToColor(\"Warning: Ignoring party \"..partyInfo.partyId..\" for VP counting. No delegates (or party leader) present.\",playerColor,{1,0.4,0,1},loggingModes.exception),2)\r\nend\r\nend\r\nreturn scoreCount\r\nend\r\nfunction calculateCardsAndEventsForPlayer(tmPlayer)\r\nlocal scoreCount=tmPlayer.victoryPoints.simple\r\nfor _,vpDefinition in pairs(tmPlayer.victoryPoints.complex) do\r\nlocal resolvedFormula=resolveVictoryPointsFormula(vpDefinition.victoryPointsFormula)\r\nscoreCount=scoreCount + vpsFromCounters(resolvedFormula,vpDefinition.victoryPointsSourceGuid,vpDefinition.sourceFriendlyName,tmPlayer.color)\r\nscoreCount=scoreCount + vpsFromCities(resolvedFormula,tmPlayer.color)\r\nscoreCount=scoreCount + vpsFromColonies(resolvedFormula,tmPlayer.color)\r\nscoreCount=scoreCount + vpsFromTags(resolvedFormula,tmPlayer.tagSystem.tagCounts)\r\nend\r\nscoreCount=scoreCount + vpsForSpecialTiles(tmPlayer.color)\r\nreturn scoreCount\r\nend\r\nfunction resolveVictoryPointsFormula(input)\r\nlocal subStrings={}\r\nfor subString in string.gmatch(input,\"[0-9]\") do\r\ntable.insert(subStrings,subString)\r\nend\r\nfor subString in string.gmatch(input,\"[^0-9]+\") do\r\nif subString~=\"Per\" then\r\ntable.insert(subStrings,subString)\r\nend\r\nend\r\nreturn subStrings\r\nend\r\nfunction vpsFromCounters(resolvedFormula,sourceGuid,sourceFriendlyName,playerColor)\r\nif resolvedFormula[3]~=\"Counter\" and resolvedFormula[3]~=\"Counters\" then\r\nreturn 0\r\nend\r\nlocal card=getObjectFromGUID(sourceGuid)\r\nif card==nil then\r\nbroadcastToAll(playerColor..\" did not get any victory points for counter based card '\"..sourceFriendlyName..\"'. Card is probably hidden in a stack. Search for the card and place it somewhere on the board to resolve this issue.\",playerColor)\r\nreturn 0\r\nend\r\nlocal cardState=card.getVar(\"cardState\")\r\nlocal vpCounterCount=0\r\nif card.getVar(\"getVpCounterCount\")~=nil then\r\nvpCounterCount=card.call(\"getVpCounterCount\")\r\nelseif cardState.counters~=nil or cardState.counters[1]~=nil then\r\nvpCounterCount=cardState.counters[1]\r\nend\r\nreturn math.floor(resolvedFormula[1] * vpCounterCount / resolvedFormula[2])\r\nend\r\nfunction vpsFromCities(resolvedFormula,playerColor)\r\nif resolvedFormula[3]~=\"Cities\" and resolvedFormula[3]~=\"CityTile\" then\r\nreturn 0\r\nend\r\nlocal allCities=Global.call(\"getOwnableObjectCount\",{\r\nownableObjectName=ownableObjects.baseGame.tiles.city,\r\nplayerColor=playerColor,\r\ncardName=\"\",\r\nwho=\"allPlayers\"}\r\n)\r\nreturn math.floor(resolvedFormula[1] * allCities / resolvedFormula[2])\r\nend\r\nfunction vpsFromColonies(resolvedFormula,playerColor)\r\nif resolvedFormula[3]~=\"Colonies\" and resolvedFormula[3]~=\"Colony\" then\r\nreturn 0\r\nend\r\nlocal allColonies=Global.call(\"getOwnableObjectCount\",{\r\nownableObjectName=ownableObjects.colonies.objects.colony,\r\nplayerColor=playerColor,\r\ncardName=\"\",\r\nwho=\"allPlayers\"}\r\n)\r\nreturn math.floor(resolvedFormula[1] * allColonies / resolvedFormula[2])\r\nend\r\nfunction vpsFromTags(resolvedFormula,tagCounts)\r\nfor tag,count in pairs(tagCounts) do\r\nif tag==resolvedFormula[3] then\r\nreturn math.floor(resolvedFormula[1] * count / resolvedFormula[2])\r\nend\r\nend\r\nreturn 0\r\nend\r\nfunction showScoreBoards()\r\nfunction cloneScoreBoardCoroutine()\r\nfor playerIndex,player in pairs(gameState.allPlayers) do\r\nif not player.neutral then\r\nlocal playerMat=getObjectFromGUID(player.playerArea.playerMat)\r\nlocal targetTransform=tableHelpers.deepClone(playerMat.call(\"getScoreBoardTransform\"))\r\nlocal object=gameObjectHelpers.getObjectByName(\"genericScoreBoard\")\r\nnewObject=object.clone()\r\nnewObject.lock()\r\nwhile(object.getGUID()==newObject.getGUID()) do\r\ncoroutine.yield(0)\r\nend\r\nfor i=1,5 do\r\ncoroutine.yield(0)\r\nend\r\nplayer.playerArea.statsBoard=newObject.getGUID()\r\nnewObject.setPositionSmooth(targetTransform.pos,false,false)\r\nnewObject.setRotation(targetTransform.rot)\r\nnewObject.call(\"setOwner\",player.color)\r\nif gameState.extendedScriptingEnabled and not player.neutral then\r\nnewObject.call(\"registerEventHandlers\")\r\nend\r\nfor i=1,5 do coroutine.yield(0) end\r\nnewObject.call(\"toggleHidden\")\r\nfor i=1,5 do coroutine.yield(0) end\r\nnewObject.call(\"setPlayerIndex\",playerIndex)\r\nupdatePlayerStats(playerIndex)\r\nend\r\nend\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"cloneScoreBoardCoroutine\")\r\nif gameState.extendedScriptingEnabled then\r\nlocal vpMessages={\r\n\"------------------- Victory Points -------------------\",\r\n\"Victory points that have to counted manually:\",\r\n}\r\nif gameState.turmoil then\r\ntable.insert(vpMessages,\" - 'Law Suit' event card. Does not give any negative points.\")\r\nend\r\nif gameState.activeExpansions.xenosCorps then\r\ntable.insert(vpMessages,\" - PuR & KLEEN - manually count victory points for adjacency victory points for oceans\")\r\nend\r\nif #vpMessages~=2 then\r\nfor index,message in pairs(vpMessages) do\r\nWait.time(|| broadcastToAll(message,{0.9,0.5,0,1}),index * 2)\r\nend\r\nend\r\nend\r\nend\r\nfunction updatePlayerStats(playerIndex)\r\nlocal player=gameState.allPlayers[playerIndex]\r\nfor _,objName in pairs({\"statsBoard\",\"personalScoreBoard\"}) do\r\nlocal statsBoard=getObjectFromGUID(player.playerArea[objName])\r\nif statsBoard~=nil then\r\nstatsBoard.call(\"setTRValue\",player.terraformingRating)\r\nstatsBoard.call(\"setCityValue\",calculateCityScoreForPlayer(player.color))\r\nstatsBoard.call(\"setGreeneryValue\",calculateGreeneryScoreForPlayer(player.color))\r\nstatsBoard.call(\"setPathfinder\",scoringFunctions.pathfinder(player.color))\r\nstatsBoard.call(\"setTimer\",scoringFunctions.timer(player))\r\nstatsBoard.call(\"setVenusPhaseTwo\",scoringFunctions.venusPhaseTwo(player.color))\r\nstatsBoard.call(\"setCardsAndEvents\",calculateCardsAndEventsForPlayer(player))\r\nstatsBoard.call(\"setMilestoneVPs\",calculateMilestones(player.color))\r\nstatsBoard.call(\"setAwardsVPs\",calculateAwards(player.color))\r\nif gameState.turmoil then\r\nstatsBoard.call(\"setDelegates\",calculateDelegateVPs(player.color))\r\nend\r\nif objName==\"personalScoreBoard\" then\r\nlocal blueCardsCount=#player.ownedCards.Blue\r\nlocal greenCardsCount=#player.ownedCards.Green\r\nlocal infrastructureCardsCount=#player.ownedCards.Infrastructure\r\nlocal eventCardsCount=#player.ownedCards.Event\r\nlocal costyCards=findCostyCards(player,20)\r\nstatsBoard.call(\"updatePlayedCards\",{\r\nblueCardsCount=blueCardsCount,\r\ngreenCardsCount=greenCardsCount,\r\neventCardsCount=eventCardsCount,\r\ncostyCards=costyCards,\r\ntotalCardsPlayed=blueCardsCount + greenCardsCount + eventCardsCount + infrastructureCardsCount\r\n})\r\nend\r\nend\r\nend\r\nend\r\nfunction findCostyCards(player,cost)\r\nlocal amount=0\r\nlocal cardsToConsider=tableHelpers.combineSingleValueTables({player.ownedCards[\"Blue\"],player.ownedCards[\"Green\"]})\r\nfor _,card in pairs(cardsToConsider) do\r\nlocal cardObject=getObjectFromGUID(card.guid)\r\nif cardObject==nil then\r\nprintToColor(\"Card \"..card.name..\" didn't get considered for the \"..awardName..\" award - card is probably in a stack.\",player.color,player.color)\r\nelse\r\nlocal baseCost=getBaseCost(cardObject.getDescription())\r\nif baseCost~=nil and baseCost.value >= cost then\r\namount=amount + 1\r\nend\r\nend\r\nend\r\nreturn amount\r\nend\r\nfunction updatePlayerStatsByColor(playerColor)\r\nlocal playerIndex=getPlayerIndexByColor(playerColor)\r\nupdatePlayerStats(playerIndex)\r\nend\r","n68":"function updateCubePositionsOnTerraformingBar()\r\ncubesAtPosition={}\r\ncubesAtPosition[gameState.currentGeneration]=1\r\npositionCubeRaw(gameObjectHelpers.getObjectByName(\"generationMarker\"),gameState.currentGeneration,1)\r\nfor i,player in pairs(gameState.allPlayers) do\r\nif cubesAtPosition[player.terraformingRating]~=nil then\r\ncubesAtPosition[player.terraformingRating]=cubesAtPosition[player.terraformingRating] + 1\r\nelse\r\ncubesAtPosition[player.terraformingRating]=1\r\nend\r\nif player.playerArea.trCube~=nil then\r\npositionCubeRaw(getObjectFromGUID(player.playerArea.trCube),player.terraformingRating,cubesAtPosition[player.terraformingRating])\r\nend\r\nend\r\nend\r\nfunction positionCubeRaw(marker,value,height)\r\nif marker==nil then\r\nreturn\r\nend\r\nmarker.setRotation({0,0,0})\r\nlocal p=computePosition(value,height)\r\nmarker.setPositionSmooth(p)\r\nend\r\nfunction computePosition(inputValue,height)\r\nlocal moddedValue=inputValue % 170\r\nlocal blc=tablePositions.gameBoardAssets.trTrackPositions.bottomLeftCorner\r\nlocal tlc=tablePositions.gameBoardAssets.trTrackPositions.topLeftCorner\r\nlocal trc=tablePositions.gameBoardAssets.trTrackPositions.topRightCorner\r\nlocal brc=tablePositions.gameBoardAssets.trTrackPositions.bottomRightCorner\r\nif moddedValue <= 35 then\r\nreturn {blc[1],blc[2] + height - 1,blc[3] + (moddedValue * (tlc[3] - blc[3])/35)}\r\nelseif moddedValue <= 85 then\r\nreturn {tlc[1] + ((moddedValue - 35) * (trc[1] - tlc[1])/50),tlc[2] + height - 1,tlc[3]}\r\nelseif moddedValue <= 120 then\r\nreturn {trc[1],trc[2] + height - 1,trc[3] + ((moddedValue - 85) * (brc[3] - trc[3])/35)}\r\nelseif moddedValue <= 170 then\r\nreturn {brc[1] + ((moddedValue - 120) * (blc[1] - brc[1])/50),brc[2] + height - 1,brc[3]}\r\nend\r\nreturn blc\r\nend\r","n69":"\ntagToResourceConversionAllowedMap={\nBuilding=\"Steel\",\nSpace=\"Titanium\",\nInfrastructure=\"Titanium\",\n}\npaymentSystemConfig={}\nfunction paymentSystemConfig:new(icons)\nlocal obj={}\nobj.discounts={permanent=createDefaultDiscountTable(icons),transient={}}\nobj.baseConversionRates={Steel=2,Titanium=3,HeatToTemp=8,PlantsToGreenery=8}\nobj.conversionRates={Steel=2,Titanium=3,HeatToTemp=8,PlantsToGreenery=8}\nobj.paymentDistribution={Credits=0,Steel=0,Titanium=0}\nobj.conversionsAllowed={Steel=false,Titanium=false}\nobj.overpayedCredits=0\nobj.resourceExtensions={}\nobj.cardActivationInProgress=false\nobj.currentObjectGuid=\"\"\nreturn obj\nend\nfunction createDefaultDiscountTable(icons)\nlocal discounts={}\nfor _,icon in ipairs(icons) do\ndiscounts[icon]=0\nend\nreturn discounts\nend","n70":"tagSystem={}\nfunction tagSystem:new(icons)\nlocal obj={}\nobj.tagCounts=createDefaultTagCounts(icons)\nreturn obj\nend\nfunction createDefaultTagCounts(icons)\nlocal tagCounts={}\nfor _,tag in ipairs(icons) do\ntagCounts[tag]=0\nend\nreturn tagCounts\nend\nfunction tagSystem_updatePlayerTag(params)\nlocal tmPlayer=getPlayerByColor(params.playerColor)\ntagSystem.updateTagCount(tmPlayer,params.tag,params.delta)\nend\nfunction tagSystem_updatePlayerTags(params)\nlocal tmPlayer=getPlayerByColor(params.playerColor)\nfor tag,delta in pairs(params.tagsAndDelta) do\ntagSystem.updateTagCount(tmPlayer,tag,delta)\nend\nend\ntagSystem.updateTagCount=function(tmPlayer,tag,delta)\nif tmPlayer.tagSystem.tagCounts[tag]==nil then\nlogging.broadcastToAll(\"Initializing a new tag: '\"..tag..\"'. This tag may not be fully supported or should be a different one. Check the last activated card description when in doubt.\",{1,1,1,1},loggingModes.detail)\ntmPlayer.tagSystem.tagCounts[tag]=0\nend\nlocal oldCount=tmPlayer.tagSystem.tagCounts[tag]\ntmPlayer.tagSystem.tagCounts[tag]=tmPlayer.tagSystem.tagCounts[tag] + delta\nif delta~=0 then\nlog(tmPlayer.color..\"'s tag count for '\"..tag..\"' changed: \"..oldCount..\" -> \"..tmPlayer.tagSystem.tagCounts[tag])\nend\nfor _,iconTableauGuid in pairs(tmPlayer.playerArea.iconTableaus) do\nlocal iconTableau=getObjectFromGUID(iconTableauGuid)\nif iconTableau~=nil then\niconTableau.call(\"updateTagCountsDisplay\",tmPlayer.tagSystem.tagCounts)\nend\nend\nend","n71":"objectActivationSystemConfig={}\nfunction objectActivationSystemConfig:new(rules)\nlocal obj={}\nobj.rules=rules\nobj.ignoreRequirements=false\nobj.lastActivationObjectGuid=\"\"\nobj.currentObjectGuid=\"\"\nreturn obj\nend","n72":"cardActivationRules={}\ncardActivationRules.rules={}\ncardActivationRules.rules.inActivationZoneRule=function(tmPlayer,card)\nif tmPlayer.playerArea.activationTableau==nil then\nreturn true\nend\nlocal tableauObjectState=getObjectFromGUID(tmPlayer.playerArea.activationTableau).getVar(\"objectState\")\nif tableauObjectState.lastEnteredObjectGuid~=card.getGUID() then\nlogging.printToColor(\"Cannot activate card \"..card.getName()..\". It is not in the Activate slot.\",tmPlayer.color,colors.messageColors.importantInfo,loggingModes.detail)\nreturn false\nend\nreturn true\nend\ncardActivationRules.rules.notInAnyHandZoneRule=function(tmPlayer,card)\nfor i,playerColor in ipairs(getSeatedPlayers()) do\nlocal player=Player[playerColor]\nfor j=1,player.getHandCount() do\nfor _,object in ipairs(player.getHandObjects(j)) do\nif (card==object) then\nlogging.printToColor(\"You cannot activate cards in a player's hand.\",tmPlayer.color,colors.messageColors.importantInfo,loggingModes.detail)\nreturn false\nend\nend\nend\nend\nreturn true\nend\ncardActivationRules.rules.isActivePlayerRule=function(tmPlayer,card)\nlocal isActivePlayer=true\nif (gameState.currentPlayer==-1) then\nisActivePlayer=false\nelse\nisActivePlayer=gameState.allPlayers[gameState.currentPlayer]==tmPlayer\nend\nif not isActivePlayer then\nlogging.printToColor(\"You cannot activate \"..card.getName()..\" as you are not the active player.\",tmPlayer.color,colors.messageColors.importantInfo,loggingModes.detail)\nend\nreturn isActivePlayer\nend\ncardActivationRules.rules.ignoreRequirements=function(tmPlayer,card)\ntmPlayer.objectActivationSystemConfig.ignoreRequirements=true\nreturn true\nend\ncardActivationRules.configurations={}\ncardActivationRules.configurations.allRules={\n\"inActivationZoneRule\",\n\"isActivePlayerRule\"\n}\ncardActivationRules.configurations.noRules={\n\"ignoreRequirements\"\n}\ncardActivationRules.configurations.permanentRules={\n\"notInAnyHandZoneRule\"\n}","n73":"playerActionFuncs={}\nplayerActionFuncs.playerHasPerformedAction=function(playerColor)\nif getPlayerIndexByColor(playerColor)~=gameState.currentPlayer then\nreturn\nend\nlog(\"Doing action\")\nlocal player=getPlayerByColor(playerColor)\nplayer.playerActions.actionsDone=player.playerActions.actionsDone + 1\nif player.playerActions.actionsDone < player.playerActions.actionsLimit or transientState.autoPassData.inProgress then\nreturn\nend\nplayerActionFuncs.decideOnEndTurn(player)\neventHandling_triggerEvent({\ntriggeredByColor=playerColor,\ntriggerType=eventData.triggerType.playerPerformedAction,\nmetadata={}\n})\nend\nplayerActionFuncs.decideOnEndTurn=function(player)\nif gameState.currentPhase~=phases.generationPhase then\nplayer.playerActions.actionsDone=0\nreturn\nend\nlocal activePlayers=0\nfor _,player in pairs(gameState.allPlayers) do\nif not player.hasPassedGeneration and not player.neutral then\nactivePlayers=activePlayers + 1\nend\nend\nif activePlayers < 2 then\nreturn\nend\nfor funcName,funcDef in pairs(playerActionFuncs.autoPassFunctions) do\nif funcDef.id==player.playerActions.onLimitReached then\nfunction autoPassCoroutine()\nlocal counter=5\ntransientState.autoPassData.inProgress=true\nwhile counter > 0 do\ncounter=counter - 1\nif dealingObjectInProgress then\ncounter=45\nend\ncoroutine.yield(0)\nend\nlocal doEndTurn=funcDef.func(player.color,Player[player.color].getHandObjects())\nif doEndTurn then\nendTurn()\ntransientState.autoPassData.watchdogActive=false\nend\ntransientState.autoPassData.inProgress=false\nreturn 1\nend\nstartLuaCoroutine(self,\"autoPassCoroutine\")\nreturn\nend\nend\nend\nplayerActionFuncs.autoPassFunctions={}\nplayerActionFuncs.autoPassFunctions.inactive={id=\"inactive\",\nprettyName=\"Auto End Turn:\\nInactive\",\nhelp=\"Automatic end turn after two actions is disabled.\",\nfunc=function(playerColor,handObjects)\ntransientState.autoPassData.watchdogActive=false\nreturn false\nend\n}\nplayerActionFuncs.autoPassFunctions.emptyHand={id=\"emptyHand\",\nprettyName=\"Auto End Turn:\\nIf Hand Empty\",\nhelp=\"Automatic end turn after two actions is enabled.\\n\\n\"..\n\"Pass automatically if you have no cards,tiles,delegates and tokens in hand.\"..\n\"Otherwise you will pass automatically as soon as you have placed all tiles,delegates,\"..\n\"used up any tokens and moved all cards from your main hand zone to another hand zone.\",\nfunc=function(playerColor,handObjects)\nreturn playerActionFuncs.autoPassFunctions.actionsFinalized.func(playerColor,handObjects) and #handObjects==0\nend\n}\nplayerActionFuncs.autoPassFunctions.actionsFinalized={id=\"actionsFinalized\",\nprettyName=\"Auto End Turn:\\nNo Important Objects In Hand\",\nhelp=\"Automatic end turn after two actions is enabled.\\n\\n\"..\n\"Pass automatically if you have no tiles,delegates and trade/action tokens in hand.\"..\n\"Otherwise you will pass automatically as soon as you have placed all tiles,delegates and \"..\n\"used up any trade or action tokens. Card resource tokens (e.g. Floaters) and cards in your main hand are ignored.\",\nfunc=function(playerColor,handObjects)\ntransientState.autoPassData.watchdogActive=true\nfor _,obj in pairs(handObjects) do\nif obj.getVar(\"activateObject\")~=nil then\nif transientState.autoPassData.tilesToPlace[obj.getGUID()]==nil then\ntransientState.autoPassData.tilesToPlace[obj.getGUID()]=1\nend\nend\nend\nlocal allTilesPlaced=true\nfor guid,value in pairs(transientState.autoPassData.tilesToPlace) do\nif value==1 then\nallTilesPlaced=false\nend\nend\nif allTilesPlaced then\ntransientState.autoPassData.tilesToPlace={}\nelse\nreturn false\nend\nlocal handObjects=Player[\"White\"].getHandObjects()\nfor _,obj in pairs(handObjects) do\nif obj.getDescription()==\"Cube\" then\nreturn false\nelseif obj.getDescription()==\"Delegate\" then\nreturn false\nelseif obj.getVar(\"initializeWithMetdata\")~=nil then\nreturn false\nend\nend\nreturn true\nend\n}\nplayerActionFuncs.playerHasPlacedTile=function(playerColor,tileObjectGuid)\nif transientState.autoPassData.tilesToPlace[tileObjectGuid]~=nil then\ntransientState.autoPassData.tilesToPlace[tileObjectGuid]=0\nplayerActionFuncs.decideOnEndTurn(getPlayerByColor(playerColor))\nend\nend\nplayerActionFuncs.playerHasTraded=function(playerColor)\nplayerActionFuncs.decideOnEndTurn(getPlayerByColor(playerColor))\nend\nplayerActionFuncs.playerHasMovedObjectFromHand=function(playerColor)\nplayerActionFuncs.decideOnEndTurn(getPlayerByColor(playerColor))\nend\nplayerActionFuncs.playerHasPlacedDelegate=function(playerColor)\nplayerActionFuncs.decideOnEndTurn(getPlayerByColor(playerColor))\nend\nfunction onObjectLeaveZone(zone,leave_object)\nif not transientState.autoPassData.watchdogActive then\nreturn\nend\nlocal playerColor=gameState.allPlayers[gameState.currentPlayer].color\nif #Player[playerColor].getHandObjects()==0 then\ntransientState.autoPassData.watchdogActive=false\nWait.condition(function()\nWait.frames(|| playerActionFuncs.decideOnEndTurn(getPlayerByColor(playerColor)),40)\nend,\nfunction () return leave_object.held_by_color~=playerColor end)\nend\nend\nfunction playerActionFuncs_toggleAutoPassOption(params)\nlocal player=getPlayerByColor(params.playerColor)\nlocal delta=params.delta\nlocal playerMat=getObjectFromGUID(player.playerArea.playerMat)\nlocal counter=1\nfor funcName,funcDef in pairs(playerActionFuncs.autoPassFunctions) do\nif funcDef.id==player.playerActions.onLimitReached then\nbreak\nend\ncounter=counter + 1\nend\ncounter=counter + delta\nif counter > tableHelpers.getCount(playerActionFuncs.autoPassFunctions) then\ncounter=1\nelseif counter < 1 then\ncounter=tableHelpers.getCount(playerActionFuncs.autoPassFunctions)\nend\nlocal i=1\nfor funcName,funcDef in pairs(playerActionFuncs.autoPassFunctions) do\nif i==counter then\nplayer.playerActions.onLimitReached=funcDef.id\nplayerMat.call(\"updateAutoPassOption\",{label=funcDef.prettyName,help=funcDef.help})\nreturn\nend\ni=i + 1\nend\nend\n\nTMPlayer={}\r\nfunction TMPlayer:new(color,tr,isNeutralPlayer)\r\nlocal obj={}\r\nobj.neutral=isNeutralPlayer or false\r\nobj.color=color\r\nobj.terraformingRating=tr\r\nobj.name=\"\"\r\nobj.hasDraftPassed=false\r\nobj.hasPassedGeneration=false\r\nobj.ownedObjects=createOwnableObjectsCollection()\r\nobj.paymentSystemConfig=paymentSystemConfig:new(tableHelpers.combineSingleValueTables({icons.baseIconNames,icons.specialIconNames,icons.anyTagNames}))\r\nobj.tagSystem=tagSystem:new(tableHelpers.combineSingleValueTables({icons.baseIconNames,icons.specialIconNames}))\r\nobj.objectActivationSystemConfig=objectActivationSystemConfig:new(cardActivationRules.configurations.noRules)\r\nobj.reqModifiers={permanent={},transient={}}\r\nobj.turmoilInfluence={baseInfluence=0,transientInfluence=0}\r\nobj.delegateIds={}\r\nobj.delegateBagId=nil\r\nobj.victoryPoints={simple=0,complex={}}\r\nobj.ownedCards={Blue={},Event={},Green={},Other={},Corp={},Prelude={},Infrastructure={}}\r\nobj.drafting={purchaseCardCost=3,extraDraftCardsDealt=0}\r\nobj.colonyTradingConfig={tradingCostModifier=0,tradingRewardModifier=0}\r\nobj.wasUpdated=true\r\nobj.playerActions={actionsDone=0,actionsLimit=2,onLimitReached=playerActionFuncs.autoPassFunctions.inactive.id}\r\nobj.playerArea={}\r\nreturn obj\r\nend\r\nfunction changePlayerBaseInfluence(params)\r\nlocal tmPlayer=getPlayerByColor(params.playerColor)\r\ntmPlayer.turmoilInfluence.baseInfluence=tmPlayer.turmoilInfluence.baseInfluence + params.delta\r\ntmPlayer.wasUpdated=true\r\nend\r\nfunction overrideDraftingConfig(params)\r\nlocal tmPlayer=getPlayerByColor(params.playerColor)\r\nfor key,value in pairs(params.overrides) do\r\nif tmPlayer.drafting[key]~=nil then\r\ntmPlayer.drafting[key]=value\r\nend\r\nend\r\ntmPlayer.wasUpdated=true\r\nend\r\nfunction changeOwnedObjectAmount(color,key,delta)\r\nlocal tmPlayer=getPlayerByColor(color)\r\nif tmPlayer==nil then\r\nreturn\r\nend\r\nif tmPlayer.ownedObjects[key]==nil then\r\ntmPlayer.ownedObjects[key]=0\r\nend\r\ntmPlayer.ownedObjects[key]=tmPlayer.ownedObjects[key] + delta\r\ntmPlayer.wasUpdated=true\r\nend\r\nfunction getOwnedObjectAmount(color,key)\r\nlocal tmPlayer=gameState.allPlayers[color]\r\nif tmPlayer.ownedObjects[key]==nil then\r\ntmPlayer.ownedObjects[key]=0\r\nend\r\nreturn tmPlayer.ownedObjects[key]\r\nend\r\nfunction createOrUpdatePlayerColors()\r\nif gameState.started then\r\nreturn\r\nend\r\nlog(\"Creating or Updating Player\")\r\nlocal playerIndicesToRemove={}\r\nfor i=0,gameState.numberOfPlayers - 1 do\r\nlocal playerUnderScrutiny= gameState.allPlayers[gameState.numberOfPlayers - i]\r\nif Player[playerUnderScrutiny.color]==nil or not Player[playerUnderScrutiny.color].seated then\r\ntable.insert(playerIndicesToRemove,gameState.numberOfPlayers - i)\r\nend\r\nend\r\nfor i=1,#playerIndicesToRemove do\r\nremovePlayerFromGame(playerIndicesToRemove[i])\r\nend\r\nlocal allSeatedPlayers=Player.getPlayers()\r\nfor _,player in pairs(allSeatedPlayers) do\r\nlocal player_color=player.color\r\nif isSupportedColor(player_color) then\r\nif not isColorPlaying(player_color) then\r\ncreatePlayerInGame(player_color)\r\nend\r\nend\r\nend\r\nend\r\nfunction removePlayerFromGame(playerIndex)\r\nlocal player=gameState.allPlayers[playerIndex]\r\nfunction removePlayerCoroutine()\r\nlog(\"Removing player - waiting...\")\r\nlocal wait=true\r\nlocal waitCounter=10\r\nwhile wait or waitCounter > 0 do\r\nwait=false\r\nif cloningOngoing or transientState.removingPlayer then\r\nwait=true\r\nelse\r\nfor _,isOngoing in pairs(cloningOngoingTable) do\r\nif isOngoing==true then\r\nwait=true\r\nend\r\nend\r\nend\r\nif wait==false then\r\nwaitCounter=waitCounter - 1\r\nelse\r\nwaitCounter=10\r\nend\r\ncoroutine.yield(0)\r\nend\r\ntransientState.removingPlayer=true\r\nlog(\"Removing player\")\r\ngameObjectHelpers.removeObjGracefully(player.playerArea.playerMat)\r\nif player.playerArea.iconTableaus then\r\nfor _,iconTableau in pairs(player.playerArea.iconTableaus) do\r\ngetObjectFromGUID(iconTableau).destruct()\r\nend\r\nend\r\ngameObjectHelpers.removeObjGracefully(player.playerArea.activationTableau)\r\ngameObjectHelpers.removeObjGracefully(player.playerArea.playerOrgHelpBoard)\r\ngameObjectHelpers.removeObjGracefully(player.playerArea.playerAntiLagBoard)\r\ngameObjectHelpers.removeObjGracefully(player.playerArea.trCube)\r\nlocal updatedPlayerIndex=getPlayerIndexByColor(player.color)\r\ntable.remove(gameState.allPlayers,updatedPlayerIndex)\r\ngameState.numberOfPlayers=gameState.numberOfPlayers - 1\r\ncoroutine.yield(0)\r\ntransientState.removingPlayer=false\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"removePlayerCoroutine\")\r\nend\r\nfunction createPlayerInGame(playerColor,isNeutralPlayer)\r\nfunction createPlayerInGameCoroutine()\r\nwhile transientState.creatingPlayer do coroutine.yield(0) end\r\ntransientState.creatingPlayer=true\r\nlocal waitCounter=0\r\nwhile waitCounter < 15 do\r\nwaitCounter=waitCounter + 1\r\nif transientState.removingPlayer then\r\nwaitCounter=0\r\nend\r\ncoroutine.yield(0)\r\nend\r\ngameStateFunctions.addPlayer(playerColor,isNeutralPlayer)\r\nlocal player=getPlayerByColor(playerColor)\r\ncreateMaterial(player)\r\ntransientState.creatingPlayer=false\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"createPlayerInGameCoroutine\")\r\nend\r\nfunction createMaterial(player)\r\nfunction createMaterialCoroutine()\r\nlocal waitCounter=0\r\nwhile waitCounter < 15 do\r\nwaitCounter=waitCounter + 1\r\nif transientState.removingPlayer then\r\nwaitCounter=0\r\nend\r\ncoroutine.yield(0)\r\nend\r\ncreatePlayerBoard(player)\r\ncreateTRCube(player)\r\nfor i=1,60 do coroutine.yield(0) end\r\ncreateActivationTableau(player)\r\ncoroutine.yield(0)\r\ncreateIconTableaus(player)\r\ntoggleOrg(player.color)\r\nfor i=1,10 do coroutine.yield(0) end\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"createMaterialCoroutine\")\r\nend\r\nfunction changeFirstPlayerRemotely(params)\r\nchangeFirstPlayer(params.playerColor)\r\nend\r\nfunction changeFirstPlayer(playerColor)\r\nlocal token=gameObjectHelpers.getObjectByName(\"firstPlayerToken\")\r\nlocal nextFirstPlayer=getPlayerIndexByColor(playerColor)\r\ngameState.firstPlayer=nextFirstPlayer\r\ngameState.currentPlayer=nextFirstPlayer\r\nlocal transform=tableHelpers.deepClone(getObjectFromGUID(getPlayerByColor(playerColor).playerArea.playerMat).call(\"getFirstPlayerMarkerTransform\"))\r\ntoken.setPositionSmooth(transform.pos)\r\ntoken.setRotationSmooth(transform.rot)\r\nlogging.broadcastToAll('First player is ' .. gameState.allPlayers[gameState.firstPlayer].name,playerColor,loggingModes.important)\r\ngameState.allPlayers[gameState.firstPlayer].wasUpdated=true\r\nnotifyCurrentPlayer()\r\nupdatePlayerUI()\r\nend\r\nfunction passFirstPlayer()\r\nlocal nextFirstPlayer=(gameState.firstPlayer + 1)\r\nif gameState.forcedNextFirstPlayer~=nil then\r\nnextFirstPlayer=gameState.forcedNextFirstPlayer\r\ngameState.forcedNextFirstPlayer=nil\r\nend\r\nif nextFirstPlayer > gameState.numberOfPlayers then\r\nnextFirstPlayer=nextFirstPlayer - gameState.numberOfPlayers\r\nend\r\nlocal exitCriteria=0\r\nwhile not Player[gameState.allPlayers[nextFirstPlayer].color].seated and exitCriteria < 10 do\r\nnextFirstPlayer=nextFirstPlayer + 1\r\nif nextFirstPlayer > gameState.numberOfPlayers then\r\nnextFirstPlayer=nextFirstPlayer - gameState.numberOfPlayers\r\nend\r\nexitCriteria=exitCriteria + 1\r\nend\r\nif not gameState.allPlayers[nextFirstPlayer].neutral then\r\nchangeFirstPlayer(gameState.allPlayers[nextFirstPlayer].color)\r\nelse\r\nchangeFirstPlayer(gameState.allPlayers[gameState.firstPlayer].color)\r\nend\r\nend\r\nfunction notifyCurrentPlayer()\r\nTurns.turn_color=gameState.allPlayers[gameState.currentPlayer].color\r\nTurns.enable=false\r\nend\r\nfunction sanitizeName(name)\r\nreturn (name:gsub(\"[<>]\",\"\"))\r\nend\r\nfunction updatePlayerUI()\r\nfor i=1,#uiNames.playerNames do\r\nUI.setAttribute(uiNames.playerNames[i],\"active\",false)\r\nend\r\nfor i=1,gameState.numberOfPlayers do\r\nif not Player[gameState.allPlayers[i].color].seated then\r\ngameState.allPlayers[i].name=\"Disconnected\"\r\nelse\r\ngameState.allPlayers[i].name=sanitizeName(Player[gameState.allPlayers[i].color].steam_name)\r\nend\r\nif gameState.started then\r\nif i==gameState.currentPlayer and gameState.currentPhase~=phases.gameStartPhase then\r\nUI.setAttribute(uiNames.activePlayerIndicator[i],\"active\",true)\r\nUI.setAttribute(uiNames.endTurnButtons[gameState.allPlayers[i].color],\"active\",true)\r\nelse\r\nUI.setAttribute(uiNames.activePlayerIndicator[i],\"active\",false)\r\nUI.setAttribute(uiNames.endTurnButtons[gameState.allPlayers[i].color],\"active\",false)\r\nend\r\nend\r\nupdatePlayerName(i)\r\nend\r\nif gameState.started and gameState.currentPhase==phases.gameStartPhase or gameState.currentPhase==phases.draftingPhase then\r\nUI.setAttribute(uiNames.genStart,\"active\",true)\r\nUI.setAttribute(uiNames.genStart,\"visibility\",gameState.allPlayers[gameState.firstPlayer].color)\r\nelse\r\nUI.setAttribute(uiNames.genStart,\"active\",false)\r\nend\r\nif gameState.started then\r\nif gameState.currentPlayer==-1 and not gameState.ended then\r\nUI.setAttribute(uiNames.solarPhase,\"active\",true)\r\nUI.setAttribute(uiNames.solarPhase,\"visibility\",gameState.allPlayers[gameState.firstPlayer].color)\r\nelse\r\nUI.setAttribute(uiNames.solarPhase,\"active\",false)\r\nend\r\nend\r\nend\r\nfunction updatePlayerName(playerIndex)\r\nlocal uiElement=UI.getValue(uiNames.playerNames[playerIndex])\r\nlocal player=gameState.allPlayers[playerIndex]\r\nif player.neutral then\r\nreturn\r\nend\r\nUI.setAttribute(uiNames.playerNames[playerIndex],\"active\",true)\r\nlocal mainUIName=player.name\r\nif gameState.activeExpansions.timer then\r\nlocal remainingTime=timerFunctions.getFormattedRemainingTimeForPlayer(gameState.allPlayers[playerIndex])\r\nmainUIName=mainUIName..\" \"..remainingTime\r\nend\r\nUI.setValue(uiNames.playerNames[playerIndex],mainUIName)\r\nif player.hasPassedGeneration then\r\nUI.setAttribute(uiNames.playerNames[playerIndex],\"color\",\"Gray\")\r\nelse\r\nUI.setAttribute(uiNames.playerNames[playerIndex],\"color\",player.color)\r\nend\r\nif string.len(mainUIName) >= 20 then\r\nUI.setAttribute(uiNames.playerNames[playerIndex],\"fontSize\",16)\r\nend\r\nlocal playerMat=getObjectFromGUID(player.playerArea.playerMat)\r\nif playerMat~=nil then\r\nplayerMat.call(\"setPlayerName\",player.name)\r\nend\r\nend\r\nfunction getPlayerIndexByColor(playerColor)\r\nfor i=1,gameState.numberOfPlayers do\r\nif gameState.allPlayers[i].color==playerColor then\r\nreturn i\r\nend\r\nend\r\nend\r\nfunction getPlayerByColor(playerColor)\r\nreturn gameState.allPlayers[getPlayerIndexByColor(playerColor)]\r\nend\r\nfunction updateOwnableObjects(params)\r\nlocal tmPlayer=getPlayerByColor(params.playerColor)\r\nlocal ownableObjectName=params.ownableObjectName\r\nlocal delta=params.delta\r\nif tmPlayer.ownedObjects[ownableObjectName]==nil then\r\ntmPlayer.ownedObjects[ownableObjectName]=0\r\nend\r\nif delta < 0 and tmPlayer.ownedObjects[ownableObjectName]==0 then\r\nlog(\"Invalid action detected. Trying to remove \"..ownableObjectName..\" from player's ownable objects collection \"..tmPlayer.color..\" even though he has nothing left.\")\r\nreturn\r\nend\r\ntmPlayer.ownedObjects[ownableObjectName]=tmPlayer.ownedObjects[ownableObjectName] + delta\r\nlocal triggerType=nil\r\nif delta > 0 then\r\nfor _,mapping in pairs(eventDataMappings.ownableObjectsToTriggerTypeMap) do\r\nif mapping.ownableObjectName==ownableObjectName then\r\ntriggerType=mapping.triggerTypeName\r\nend\r\nend\r\nif triggerType~=nil then\r\nfor i=1,delta do\r\neventHandling_triggerEvent({triggeredByColor=tmPlayer.color,triggerType=triggerType})\r\nend\r\nend\r\nend\r\ntmPlayer.wasUpdated=true\r\nend\r\nfunction placePlayerMarker(input)\r\nlocal markers=getObjectFromGUID(getPlayerByColor(input.playerColor).playerArea.playerMat).call(\"getPlayerMarkerSource\")\r\nif markers~=nil then\r\nlocal marker=markers.takeObject({position=input.position})\r\nlocal triggerType=\"\"\r\nfor _,mapping in pairs(eventDataMappings.ownableObjectsToTriggerTypeMap) do\r\nif mapping.ownableObjectName==input.objectName then\r\ntriggerType=mapping.triggerTypeName\r\nend\r\nend\r\neventHandling_triggerEvent({triggeredByColor=input.playerColor,triggerType=triggerType})\r\nreturn marker\r\nend\r\nend\r\nfunction placePlayerCityMarker(input)\r\nlocal markers=getObjectFromGUID(getPlayerByColor(input.playerColor).playerArea.playerMat).call(\"getPlayerCityMarkerSource\")\r\nif markers~=nil then\r\nlocal marker=markers.takeObject({position=input.position})\r\nlocal triggerType=nil\r\nif hexMapHelpers.isOnMars(gameMap,input.position) then\r\ntriggerType=eventData.triggerType.marsCityPlayed\r\nelse\r\ntriggerType=eventData.triggerType.spaceCityPlayed\r\nend\r\nchangeCityCount({delta=1,position=input.position,guid=input.objectGuid})\r\neventHandling_triggerEvent({triggeredByColor=input.playerColor,triggerType=triggerType})\r\nreturn marker\r\nend\r\nend\r\nfunction plantsToGreenery(playerColor)\r\nlocal tmPlayer=getPlayerByColor(playerColor)\r\nlocal playerMat=getObjectFromGUID(tmPlayer.playerArea.playerMat)\r\nlocal plantsStockpile=getPlayerResource({playerColor=playerColor,resourceType=\"plants\"})\r\nlocal plantsNeeded=tmPlayer.paymentSystemConfig.conversionRates[\"PlantsToGreenery\"]\r\nif plantsStockpile < plantsNeeded then\r\nlogging.printToColor(\"Not enough plants for a greenery.\",playerColor,colors.messageColors.importantInfo,loggingModes.essential)\r\nreturn\r\nend\r\nchangePlayerResource({playerColor=playerColor,resourceType=\"plants\",resourceAmount=-plantsNeeded})\r\ndealGreeneryTileToPlayer(getPlayerIndexByColor(playerColor))\r\nplayerActionFuncs.playerHasPerformedAction(playerColor)\r\nend\r\nfunction heatToTemp(playerColor)\r\nif gameState.temperatureDone then\r\nlogging.printToColor(\"Unable to convert heat into temperature. Temperature is at maximum.\",playerColor,colors.messageColors.importantInfo,loggingModes.essential)\r\nreturn\r\nend\r\nlocal tmPlayer=getPlayerByColor(playerColor)\r\nlocal playerMat=getObjectFromGUID(tmPlayer.playerArea.playerMat)\r\nlocal heatStockpile=getPlayerResource({playerColor=playerColor,resourceType=\"heat\"})\r\nlocal heatNeeded=tmPlayer.paymentSystemConfig.conversionRates[\"HeatToTemp\"]\r\nif heatStockpile < heatNeeded then\r\nlogging.printToColor(\"Not enough heat to increase temperature\",playerColor,colors.messageColors.importantInfo,loggingModes.essential)\r\nreturn\r\nend\r\nchangePlayerResource({playerColor=playerColor,resourceType=\"heat\",resourceAmount=-heatNeeded})\r\nincreaseTempButtonClick(nil,playerColor)\r\nplayerActionFuncs.playerHasPerformedAction(playerColor)\r\nend\r\nfunction increasePlayerTRByColor(playerColor,reason)\r\nincreasePlayerTerraforming(getPlayerIndexByColor(playerColor),reason)\r\neventHandling_triggerEvent({triggeredByColor=playerColor,triggerType=eventData.triggerType.terraformingGained})\r\ngetPlayerByColor(playerColor).wasUpdated=true\r\nend\r\nfunction decreasePlayerTRByColor(playerColor,reason)\r\ndecreasePlayerTerraforming(getPlayerIndexByColor(playerColor),reason)\r\ngetPlayerByColor(playerColor).wasUpdated=true\r\nend\r\nfunction updatePlayersPlayedTags(playerColor,updateTagsAndDelta,playedTags)\r\nlocal player=getPlayerByColor(playerColor)\r\ntagSystem.updateTags(updateTagsAndDelta,player)\r\ngameState.allPlayers[playerIndex].wasUpdated=true\r\nend\r\nfunction decreasePlayerTerraforming(playerIndex,reason)\r\nlocal playerColor=gameState.allPlayers[playerIndex].color\r\nif gameState.allPlayers[playerIndex].terraformingRating > 0 then\r\ngameState.allPlayers[playerIndex].terraformingRating=gameState.allPlayers[playerIndex].terraformingRating  - 1\r\nelse\r\nlogging.printToAll(\"Terraforming can't drop below 0 for player \"..playerColor,colors.messageColors.importantInfo,loggingModes.exception)\r\nend\r\nlocal message=gameState.allPlayers[playerIndex].name..\" decreased their TR by 1\"\r\nif reason~=nil then\r\nmessage=gameState.allPlayers[playerIndex].name..\" decreased their TR by 1 because of '\"..reason..\"'\"\r\nend\r\nlogging.printToAll(message,{1,0,0},loggingModes.important)\r\nupdateCubePositionsOnTerraformingBar()\r\ngameState.allPlayers[playerIndex].wasUpdated=true\r\nend\r\nfunction increasePlayerTerraforming(playerIndex,reason)\r\ngameState.allPlayers[playerIndex].terraformingRating=gameState.allPlayers[playerIndex].terraformingRating + 1\r\nlocal message=gameState.allPlayers[playerIndex].name..\" increased their TR by 1\"\r\nif reason~=nil then\r\nmessage=gameState.allPlayers[playerIndex].name..\" increased their TR by 1 because of '\"..reason..\"'\"\r\nend\r\nlogging.printToAll(message,{1,0,0},loggingModes.important)\r\nupdateCubePositionsOnTerraformingBar()\r\ngameState.allPlayers[playerIndex].wasUpdated=true\r\nend\r\nfunction tmPlayer_setPassGenState(params)\r\ngetPlayerByColor(params.playerColor).hasPassedGeneration=params.hasPassed\r\nend\r","n74":"dealingInProgress=false\nfunction dealProjectsToPlayer(playerIndex,amountToDeal,fromDiscardPile,targetHandIndex)\nfunction dealCoroutine()\nwhile dealingInProgress do\ncoroutine.yield(0)\nend\ndealingInProgress=true\ntargetHandIndex=targetHandIndex or 1\nlocal cardSource=nil\nif fromDiscardPile==nil or fromDiscardPile==false then\ncardSource=tryToFindProjectStack()\nif cardSource==nil then\nshuffleInDiscardPile()\nend\ncardSource=tryToFindProjectStack()\nlocal objectsRemainingInStack=cardSource.getQuantity()\nif (objectsRemainingInStack - amountToDeal) < 2 then\nshuffleInDiscardPile()\nend\ncardSource=tryToFindProjectStack()\nelse\ncardSource=tryToFindDiscardPile()\nend\nif cardSource~=nil then\nobjectsRemainingInStack=cardSource.getQuantity()\nif objectsRemainingInStack < amountToDeal then\nlog(\"Dealing remaining cards\")\ncardSource.deal(objectsRemainingInStack,gameState.allPlayers[playerIndex].color,targetHandIndex)\nelse\ncardSource.deal(amountToDeal,gameState.allPlayers[playerIndex].color,targetHandIndex)\nend\nelse\nlogging.printToAll(\"No cards in project OR discard pile. Cannot deal.\",gameState.allPlayers[playerIndex].color,loggingModes.important)\nend\ndealingInProgress=false\nreturn 1\nend\nstartLuaCoroutine(self,\"dealCoroutine\")\nend\nfunction discardProjectsFromPlayersHand(playerIndex,amountToDiscard)\nfunction discardCardsCoroutine()\nwhile dealingInProgress do\ncoroutine.yield(0)\nend\ndealingInProgress=true\nlocal handObjects=Player[gameState.allPlayers[playerIndex].color].getHandObjects(1)\nlocal cardsDiscarded=0\nfor _,object in pairs(handObjects) do\nif object.tag==\"Card\" then\nif object.call(\"isProjectCard\") then\nobject.setRotation({0,0,180})\nlocal wasSingleCard=putOnDiscardPile(object)\nlocal counter=1\nwhile counter < 12 and object~=nil and not wasSingleCard do\ncoroutine.yield(0)\ncounter=counter + 1\nend\nelse\nobject.setRotation({0.00,180.00,180.00})\nobject.setPosition( {-68.41,-7.00,-27.61},false,false )\nend\ncardsDiscarded=cardsDiscarded + 1\nend\nif cardsDiscarded >= amountToDiscard then\nbreak\nend\nend\ncoroutine.yield(0)\ndealingInProgress=false\nreturn 1\nend\nstartLuaCoroutine(self,\"discardCardsCoroutine\")\nend\nfunction putOnDiscardPileRemotely(params)\nputOnDiscardPile(getObjectFromGUID(params.cardGuid),true)\nend\nfunction putOnDiscardPile(card,smooth)\nlocal discardPile=tryToFindDiscardPile()\nif discardPile==nil or discardPile.name~=\"Deck\" then\ncard.setPosition(tablePositions.gameBoardAssets.discardPile.pos)\ncard.setRotation({0,180,180})\nreturn true\nend\nlocal cardsInDiscard=#discardPile.getObjects()\nif cardsInDiscard > 214 then\ncardsInDiscard=214\nend\nlocal yVector=vectorHelpers.scaleVector({0,0.0097806,0},cardsInDiscard)\nif smooth then\ncard.setPositionSmooth(vectorHelpers.addVectors(tablePositions.gameBoardAssets.discardPile.pos,yVector))\nelse\ncard.setPosition(vectorHelpers.addVectors(tablePositions.gameBoardAssets.discardPile.pos,yVector))\nend\ncard.setRotation(tablePositions.gameBoardAssets.discardPile.rot)\nreturn false\nend\nfunction tryToFindProjectStack()\nlocal projectDeck=gameObjectHelpers.getObjectByName(\"projectDeck\")\nif projectDeck~=nil then\nreturn projectDeck\nend\nlocal projectStackTile=gameObjectHelpers.getObjectByName(\"projectZone\")\nlocal projects=projectStackTile.getObjects()\nfor _,object in pairs(projects) do\nif object.tag==\"Deck\" or object.tag==\"Card\" then\nsetupGuids.projectDeck=object.getGUID()\nreturn object\nend\nend\nend\nfunction tryToFindDiscardPile()\nlocal discardStack=gameObjectHelpers.getObjectByName(\"discardStackTile\")\nlocal discardObjects=discardStack.getObjects()\nlocal discardCardLikeObjects={}\nfor _,object in pairs(discardObjects) do\nif object.tag==\"Deck\" or object.tag==\"Card\" then\ntable.insert(discardCardLikeObjects,object)\nend\nend\nif #discardCardLikeObjects==0 then\nprint(\"Discard pile is empty.\")\nreturn nil\nend\nlocal discardPile=nil\ndiscardPile=discardCardLikeObjects[1]\nreturn discardPile\nend\nfunction shuffleDiscardPile()\nlocal discardPile=tryToFindDiscardPile()\nif discardPile==nil then\nprint(\"Discard pile is empty,cannot shuffle it.\")\nreturn\nend\nif discardPile.tag==\"Deck\" then\ndiscardPile.shuffle()\nend\nend\nfunction shuffleInDiscardPile()\nlocal discardPile=tryToFindDiscardPile()\nif discardPile==nil then\nprint(\"Discard pile is empty,cannot shuffle it into projects\")\nreturn\nend\nif discardPile.tag==\"Deck\" then\ndiscardPile.shuffle()\nend\nlocal projectDeck=tryToFindProjectStack()\nif projectDeck~=nil then\nlocal rotation=projectDeck.getRotation()\nif projectDeck.tag==\"Card\" then\nsetupGuids.projectDeck=discardPile.getGUID()\nprojectDeck.setPosition(vectorHelpers.addVectors(gameObjectHelpers.getObjectByName(\"projectStackTile\").getPosition(),{0,3,0}))\ndiscardPile.setPosition(vectorHelpers.addVectors(gameObjectHelpers.getObjectByName(\"projectStackTile\").getPosition(),{0,0.5,0}))\nlocal oldId=projectDeck.getGUID()\nlocal timeout=200\nlocal counter=0\nwhile getObjectFromGUID(oldId)~=nil do\ncoroutine.yield(0)\nif counter > timeout then\nbreak\nelse\ncounter=counter + 1\nend\nend\nfor i=1,30 do\ncoroutine.yield(0)\nend\nelse\nrotation[2]=180\nprojectDeck.setRotation(rotation)\ndiscardPile.setRotation(rotation)\nprojectDeck=projectDeck.putObject(discardPile)\nrotation[2]=0\nprojectDeck.setRotation(rotation)\nend\nelse\nsetupGuids.projectDeck=discardPile.getGUID()\ndiscardPile.setPosition(vectorHelpers.addVectors(gameObjectHelpers.getObjectByName(\"projectStackTile\").getPosition(),{0,0.5,0}))\nend\nend\nfunction searchForCard(params)\nlocal tagsToSearchFor=params.tagsToSearchFor or {}\nlocal forbiddenTags=params.forbiddenTags or {}\nlocal counterType=params.counterType or nil\nlocal productionValues=params.productionValues or {}\nlocal resourceValues=params.resourceValues or {}\nlocal amountToSearchFor=params.amountToSearchFor or 1\nlocal playerColor=params.playerColor or \"Grey\"\nlocal callbackInfo=params.callbackInfo\nlocal onlyTopmost=params.onlyTopmost or false\nlocal criteria=params.criteria\nlocal shuffleBackAfterSearch=params.shuffleBackAfterSearch or gameState.shuffleBackAfterSearch\nfunction searchForCardCoroutine()\nwhile dealingInProgress do\ncoroutine.yield(0)\nend\ndealingInProgress=true\nlocal projectDeck=tryToFindProjectStack()\nlocal revealPileSize=0\nlocal cardsSearched=0\nsearchFunctions.printSearchCriteris(tagsToSearchFor,forbiddenTags)\nwhile amountToSearchFor > 0 do\nif projectDeck.getQuantity()==2 then\nshuffleInDiscardPile()\nfor i=1,120 do coroutine.yield(0) end\nend\nrevealPileSize=0\nlocal card=projectDeck.takeObject({\nposition=vectorHelpers.addVectors(tablePositions.gameBoardAssets.cardRevealTransform.pos,vectorHelpers.scaleVector({0,0.011,0},revealPileSize)),\nrotation=tablePositions.gameBoardAssets.cardRevealTransform.rot,\nsmooth=true,\n})\nfor i=1,20 do coroutine.yield(0) end\nlocal didFindCard=true\nif criteria~=nil then\ndidFindCard=false\nfor _,crit in pairs(criteria) do\ndidFindCard=didFindCard or searchFunctions.tagsMatch(crit.tagsToSearchFor,crit.forbiddenTags,card) and\nsearchFunctions.counterTypeMatches(crit.counterType,card) and\nsearchFunctions.resourceValuesMatch(crit.resourceValues,card) and\nsearchFunctions.productionValuesMatch(crit.productionValues,card) and\nsearchFunctions.effects(crit.effects,card) and\nsearchFunctions.specialHandling(crit.searchIds,card)\nend\nelse\ndidFindCard=searchFunctions.tagsMatch(tagsToSearchFor,forbiddenTags,card) and\nsearchFunctions.counterTypeMatches(counterType,card) and (\nsearchFunctions.resourceValuesMatch(resourceValues,card) or\nsearchFunctions.productionValuesMatch(productionValues,card))\nend\nfor i=1,5 do coroutine.yield(0) end\nif didFindCard then\nlogging.printToAll(\"Revealed \"..card.getName()..\" .. did match search criteria.\")\nelse\nlogging.printToAll(\"Revealed \"..card.getName()..\" .. no match.\")\nend\namountToSearchFor,revealPileSize=searchFunctions.handleCard(didFindCard,callbackInfo,playerColor,card,cardTags,amountToSearchFor,revealPileSize)\nif onlyTopmost then amountToSearchFor=0 end\ncardsSearched=cardsSearched + 1\nif cardsSearched >= 200 then\nlogging.broadcastToAll(\"Searched 200 cards. Stopping automatic search.\",{200,0,0},loggingModes.exception)\namountToSearchFor=0\nend\nif shuffleBackAfterSearch then\nfor i=1,10 do coroutine.yield(0) end\nlocal revealPile=getRevealPile()\nif revealPile~=nil then\nprojectDeck.putObject(revealPile)\nfor i=1,120 do coroutine.yield(0) end\nprojectDeck.shuffle()\nend\nend\nend\ndealingInProgress=false\nreturn 1\nend\nstartLuaCoroutine(self,\"searchForCardCoroutine\")\nend\nfunction getRevealPile()\nlocal revealZone=gameObjectHelpers.getObjectByName(\"revealZone\")\nlocal revealedProjects=revealZone.getObjects()\nfor _,object in pairs(revealedProjects) do\nif object.tag==\"Deck\" or object.tag==\"Card\" then\nreturn object\nend\nend\nreturn nil\nend\nfunction doesFulFillCriteria(criteria,card)\nlocal anyCriteriumFulfilled=false\nfor _,criterium in pairs(criteria) do\nlocal thisCriteriumFulfilled=searchFunctions.counterTypeMatches(criteria.counterType,card)\nend\nend\nsearchFunctions={}\nsearchFunctions.counterTypeMatches=function(counterTypeToMatch,card)\nif counterTypeToMatch~=nil and card.getVar(\"getMainCounterType\")~=nil then\nlocal mainCounterType=card.call(\"getMainCounterType\")\nfor i=1,5 do\ncoroutine.yield(0)\nend\nif mainCounterType==nil then\nmainCounterType=card.getVar(\"cardState\").customCounterType\nend\nreturn (string.lower(counterTypeToMatch)==string.lower(mainCounterType))\nelseif counterTypeToMatch~=nil then\nreturn false\nelse\nreturn true\nend\nend\nsearchFunctions.printSearchCriteris=function(tagsToSearchFor,forbiddenTags)\nlocal tagsAsPrintableString=\"\"\nfor _,tag in pairs(tagsToSearchFor) do\nif tagsAsPrintableString==\"\" then\ntagsAsPrintableString=\"'\"..tag..\"'\"\nelse\ntagsAsPrintableString=tagsAsPrintableString..\",'\"..tag..\"'\"\nend\nend\nfor _,tag in pairs(forbiddenTags) do\nif tagsAsPrintableString==\"\" then\ntagsAsPrintableString=\"NOT '\"..tag..\"'\"\nelse\ntagsAsPrintableString=tagsAsPrintableString..\",NOT '\"..tag..\"'\"\nend\nend\nlogging.printToAll(\"Searching/revealing card(s) with search criteria: \"..tagsAsPrintableString)\nend\nsearchFunctions.tagsMatch=function(tagsToSearchFor,forbiddenTags,card)\ntagsToSearchFor=tagsToSearchFor or {}\nforbiddenTags=forbiddenTags or {}\nlocal didFindCard=true\nlocal cardTags=card.call(\"getTags\")\nlocal tagSearchResult={}\nfor _,tag in pairs(tagsToSearchFor) do\ntagSearchResult[tag]=false\nend\nfor _,tag in pairs(forbiddenTags) do\ntagSearchResult[tag]=true\nend\nfor _,tag in pairs(tagsToSearchFor) do\nfor _,cardTag in pairs(cardTags) do\nif tag==cardTag then\ntagSearchResult[tag]=true\nbreak\nend\nend\nend\nfor _,tag in pairs(forbiddenTags) do\nfor _,cardTag in pairs(cardTags) do\nif tag==cardTag then\ntagSearchResult[tag]=false\nbreak\nend\nend\nend\nfor _,searchResult in pairs(tagSearchResult) do\ndidFindCard=didFindCard and searchResult\nend\nreturn didFindCard\nend\nsearchFunctions.productionValuesMatch=function(productionValues,card)\nif productionValues==nil then return true end\nlocal productionCriteriaMatched=true\nfor criteriumResourceType,signum in pairs(productionValues) do\nlocal wasMatched=false\nlocal productionValues=card.call(\"getProductionValues\")\nif productionValues==nil then\nproductionValues=descriptionInterpreter.getKeyValuePairsFromInput(card.getDescription(),\"Prod:\")\nend\nfor resourceType,value in pairs(productionValues) do\nif string.lower(resourceType)==string.lower(criteriumResourceType) and signum * value > 0 then\nwasMatched=true\nend\nend\nif not wasMatched then\nproductionCriteriaMatched=false\nend\nend\nreturn productionValuesMatch\nend\nsearchFunctions.resourceValuesMatch=function(resourceValues,card)\nif resourceValues==nil then return true end\nlocal resourceCriteriaMatched=true\nfor criteriumResourceType,signum in pairs(resourceValues) do\nlocal wasMatched=false\nlocal resourceValues=card.call(\"getResourceValues\")\nif resourceValues==nil then\nresourceValues=descriptionInterpreter.getKeyValuePairsFromInput(card.getDescription(),\"Resrc:\")\nend\nfor resourceType,value in pairs(resourceValues) do\nif string.lower(resourceType)==string.lower(criteriumResourceType) and signum * value > 0 then\nwasMatched=true\nend\nend\nif not wasMatched then\nresourceCriteriaMatched=false\nend\nend\nreturn resourceCriteriaMatched\nend\nsearchFunctions.effects=function(effects,card)\nif effects==nil then return true end\nlocal effectCriteriaMatched=true\nfor _,criteriumEffectType in pairs(effects) do\nlocal wasMatched=false\nlocal cardEffects=nil\nif card.getVar(\"getEffects\")~=nil then\ncardEffects=card.call(\"getEffects\")\nend\nif cardEffects==nil then\ncardEffects=descriptionInterpreter.getValuesFromInput(card.getDescription(),\"Effects:\")\nend\nfor _,cardEffect in pairs(cardEffects) do\nif string.lower(cardEffect)==string.lower(criteriumEffectType) then\nwasMatched=true\nend\nend\nif not wasMatched then\neffectCriteriaMatched=false\nend\nend\nreturn effectCriteriaMatched\nend\nsearchFunctions.specialHandling=function(searchIds,card)\nif searchIds==nil then return true end\nlocal searchIdsOnCard=card.descriptionInterpreter.getValuesFromInput(card.getDescription(),\"SearchIds:\")\nif searchIdsOnCard==nil then\nreturn true\nend\nfor _,idOnCard in pairs(searchIdsOnCard) do\nfor _,searchId in pairs(searchIds) do\nif idOnCard==serachId then\nreturn true\nend\nend\nend\nreturn false\nend\nsearchFunctions.handleCard=function(didFindCard,callbackInfo,playerColor,card,cardTags,amountToSearchFor,revealPileSize)\nif didFindCard then\namountToSearchFor=amountToSearchFor - 1\nif callbackInfo~=nil then\nlocal obj=getObjectFromGUID(callbackInfo.callbackObjGuid)\nif obj~=nil then\nobj.call(\ncallbackInfo.callbackFuncName,{\nplayerColor=playerColor,\ncardGuid=card.getGUID(),\ncardTags=tableHelpers.deepClone(cardTags),\nsearchIsDone=amountToSearchFor <= 0\n}\n)\nelseif callbackInfo.callbackFuncName~=nil then\nGlobal.call(\ncallbackInfo.callbackFuncName,{\nplayerColor=playerColor,\ncardGuid=card.getGUID(),\ncardTags=tableHelpers.deepClone(cardTags),\nsearchIsDone=amountToSearchFor <= 0\n}\n)\nelse\ncard.deal(1,playerColor)\nend\nif callbackInfo.discardCard~=false then\nputOnDiscardPile(card,true)\nend\nelse\ncard.deal(1,playerColor)\nend\nelseif shuffleBackAfterSearch then\ncard.setRotation({0,180,180})\nrevealPileSize=revealPileSize + 1\nelse\nputOnDiscardPile(card,true)\nend\nreturn amountToSearchFor,revealPileSize\nend","n75":"function dealOceanToPlayer(playerIndex)\r\nlocal source=gameObjectHelpers.getObjectByName(\"oceanBag\")\r\nif #source.getObjects()==0 then\r\nreturn\r\nend\r\ndealObjectToPlayer(playerIndex,source)\r\nend\r\nfunction dealCityTileToPlayer(playerIndex)\r\nlocal source=gameObjectHelpers.getObjectByName(\"genericCityBag\")\r\ndealObjectToPlayer(playerIndex,source,false)\r\nend\r\nfunction dealGreeneryTileToPlayer(playerIndex)\r\nlocal source=gameObjectHelpers.getObjectByName(\"genericGreeneryBag\")\r\ndealObjectToPlayer(playerIndex,source,false)\r\nend\r\nfunction dealAnimalTokenToPlayer(playerIndex)\r\nlocal source=gameObjectHelpers.getObjectByName(\"animalWildSource\")\r\ndealObjectToPlayer(playerIndex,source,false)\r\nend\r\nfunction dealMicrobeTokenToPlayer(playerIndex)\r\nlocal source=gameObjectHelpers.getObjectByName(\"microbeFloaterSource\")\r\ndealObjectToPlayer(playerIndex,source,false)\r\nend\r\nfunction dealFloaterTokenToPlayer(playerIndex)\r\nlocal source=gameObjectHelpers.getObjectByName(\"microbeFloaterSource\")\r\ndealObjectToPlayer(playerIndex,source,true)\r\nend\r\nfunction dealScienceTokenToPlayer(playerIndex)\r\nlocal source=gameObjectHelpers.getObjectByName(\"scienceFighterSource\")\r\ndealObjectToPlayer(playerIndex,source,false)\r\nend\r\nfunction dealFighterTokenToPlayer(playerIndex)\r\nlocal source=gameObjectHelpers.getObjectByName(\"scienceFighterSource\")\r\ndealObjectToPlayer(playerIndex,source,true)\r\nend\r\nfunction dealOreTokenToPlayer(playerIndex)\r\nlocal source=gameObjectHelpers.getObjectByName(\"oreSource\")\r\ndealObjectToPlayer(playerIndex,source,false)\r\nend\r\nfunction dealDataTokenToPlayer(playerIndex)\r\nlocal source=gameObjectHelpers.getObjectByName(\"dataAsteroidSource\")\r\ndealObjectToPlayer(playerIndex,source,false)\r\nend\r\nfunction dealAsteroidTokenToPlayer(playerIndex)\r\nlocal source=gameObjectHelpers.getObjectByName(\"dataAsteroidSource\")\r\ndealObjectToPlayer(playerIndex,source,true)\r\nend\r\nfunction dealWildCardTokenToPlayer(playerIndex)\r\nlocal source=gameObjectHelpers.getObjectByName(\"animalWildSource\")\r\ndealObjectToPlayer(playerIndex,source,true)\r\nend\r\nfunction dealResourceWildCardTokenToPlayer(playerIndex,metadata)\r\nlocal source=gameObjectHelpers.getObjectByName(\"resourceWildTokenSource\")\r\ndealObjectToPlayer(playerIndex,source,false,{metadata=metadata})\r\nend\r\nfunction dealProductionWildCardTokenToPlayer(playerIndex,metadata)\r\nlocal source=gameObjectHelpers.getObjectByName(\"resourceWildTokenSource\")\r\ndealObjectToPlayer(playerIndex,source,true,{metadata=metadata})\r\nend\r\nfunction dealProgramableActionToken(playerIndex,metadata)\r\nlocal source=gameObjectHelpers.getObjectByName(\"programableActionTokenSource\")\r\ndealObjectToPlayer(playerIndex,source,false,{metadata=metadata})\r\nend\r\nfunction dealPlayerMarkerToPlayer(playerIndex)\r\nlocal tmPlayer=gameState.allPlayers[playerIndex]\r\nlocal source=getObjectFromGUID(getPlayerByColor(tmPlayer.color).playerArea.playerMat).call(\"getPlayerMarkerSource\")\r\ndealObjectToPlayer(getPlayerIndexByColor(tmPlayer.color),source,true)\r\nend\r\nfunction dealFloatingArrayTileToPlayer(playerIndex)\r\nlocal source=gameObjectHelpers.getObjectByName(\"floatingArrayBag\")\r\ndealObjectToPlayer(playerIndex,source,false)\r\nend\r\nfunction dealGasMineTileToPlayer(playerIndex)\r\nlocal source=gameObjectHelpers.getObjectByName(\"gasMineBag\")\r\ndealObjectToPlayer(playerIndex,source,false)\r\nend\r\nfunction dealVenusHabitatTileToPlayer(playerIndex)\r\nlocal source=gameObjectHelpers.getObjectByName(\"venusHabitatBag\")\r\ndealObjectToPlayer(playerIndex,source,false)\r\nend\r\nfunction dealDelegateToPlayer(playerIndex)\r\nlocal player=gameState.allPlayers[playerIndex]\r\nlocal source=getObjectFromGUID(player.delegateBagId)\r\nif source~=nil and #source.getObjects() > 0 then\r\ndealObjectToPlayer(playerIndex,source,false)\r\nelse\r\nlogging.printToColor(\"You didn't get a delegate as there are no delegates in your reserve left.\",player.color,player.color,loggingModes.exception)\r\nend\r\nend\r\nfunction dealSpecialTileToPlayer(playerIndex,objectName)\r\nlocal container=gameObjectHelpers.getObjectByName(\"specialsBag\")\r\nlocal objectGuid=gameObjectHelpers.getGuidByName(objectName)\r\nfor i,obj in ipairs(container.getObjects()) do\r\nif objectGuid==obj[\"guid\"] then\r\ndealObjectToPlayer(playerIndex,container,false,{specificGuid=objectGuid})\r\nend\r\nend\r\nend\r\nfunction dealObjectToPlayer(playerIndex,source,flipObject,params)\r\nfunction dealCoroutine()\r\nwhile dealingObjectInProgress do\r\ncoroutine.yield(0)\r\nend\r\nif source.getQuantity()==0 then\r\nlogging.printToAll(\"Could not deal object to player \"..gameState.allPlayers[playerIndex].color..\". Container '\"..source.getName()..\"' is empty.\")\r\nreturn 1\r\nend\r\ndealingObjectInProgress=true\r\nlocal obj={}\r\nlocal specificGuid=nil\r\nlocal metadata=nil\r\nif params~=nil then\r\nspecificGuid=params.specificGuid\r\nmetadata=params.metadata\r\nend\r\nif specificGuid~=nil then\r\nobj=source.takeObject({guid=specificGuid})\r\nelse\r\nobj=source.takeObject()\r\nend\r\ncoroutine.yield(0)\r\nobj.setRotation(getObjectFromGUID(gameState.allPlayers[playerIndex].playerArea.playerMat).getRotation())\r\ncoroutine.yield(0)\r\ncoroutine.yield(0)\r\nobj.deal(1,gameState.allPlayers[playerIndex].color)\r\nif flipObject then\r\nobj.flip()\r\nend\r\nif obj.getVar(\"initializeWithMetdata\") and metadata~=nil then\r\nobj.call(\"initializeWithMetdata\",{metadata=metadata})\r\nend\r\ndealingObjectInProgress=false\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"dealCoroutine\")\r\nend\r","n76":"colonySystem={}\r\ncolonySystem.spawnFleet=function(playerColor)\r\nif gameState.coloniesGameData==nil then\r\ngameState.coloniesGameData={}\r\ngameState.wasUpdated=true\r\nend\r\nlocal data=gameState.coloniesGameData\r\nif data.fleetsInPlay==nil then\r\ndata.fleetsInPlay=0\r\nend\r\ndata.fleetsInPlay=data.fleetsInPlay + 1\r\nlocal stateColorMap={Red=1,Yellow=2,Green=3,Blue=4,White=5,Orange=6}\r\nlocal tradeShipBag=gameObjectHelpers.getObjectByName(\"coloniesShipBag\")\r\nlocal tradingTile=getObjectFromGUID(\"3e7af8\")\r\nobjectFromBag=tradeShipBag.takeObject({\r\nposition=vectorHelpers.addVectors(\r\ntradingTile.getPosition(),\r\nmatrixTwoDHelpers.totalOffsetFromPositionMatrixAnd1DIndex(data.fleetsInPlay,tablePositions.colonies.tradeShipPositionMatrix)\r\n),\r\nrotation={0,90,0},\r\ncallback_function=function(object)\r\nfor _,state in pairs(object.getStates()) do\r\nif state.id==stateColorMap[playerColor] then\r\nobject.setState(state.id)\r\nend\r\nend\r\nend\r\n})\r\nend\r\ncolonySystem.generateTradeTokenMetadata=function(playerColor)\r\nlocal tmPlayer=getPlayerByColor(playerColor)\r\nlocal tradeRewardModifier=tmPlayer.colonyTradingConfig.tradingRewardModifier\r\nlocal metadata={}\r\nmetadata.tokenTitle=\"Trade token. Drop on a colony tile to trade with that colony.\"\r\nmetadata.owner=playerColor\r\nmetadata.tokenContext={tokenType=programableActionTokenData.types.tradeToken,tradeModifier=tradeRewardModifier}\r\nmetadata.configuration={maxLimit=tmPlayer.colonyTradingConfig.tradingRewardModifier,\r\nminLimit=0,\r\nstartValue=tmPlayer.colonyTradingConfig.tradingRewardModifier}\r\nreturn metadata\r\nend\r\ncolonySystem.generateColonyTrackUpTokenMetadata=function(playerColor)\r\nlocal metadata={}\r\nmetadata.tokenTitle=\"Increase Colony Track. Drop on a colony tile to increase that colony's track marker.\"\r\nmetadata.owner=playerColor\r\nmetadata.tokenContext={tokenType=programableActionTokenData.types.colonyTrackUp}\r\nreturn metadata\r\nend\r\ncolonySystem.generateColonyTrackDownTokenMetadata=function(playerColor)\r\nlocal metadata={}\r\nmetadata.tokenTitle=\"Decrease Colony Track. Drop on a colony tile to decrease that colony's track marker.\"\r\nmetadata.owner=playerColor\r\nmetadata.tokenContext={tokenType=programableActionTokenData.types.colonyTrackDown}\r\nreturn metadata\r\nend\r\ngameState.colonyGuids={}\r\nfunction getPlayerColors()\r\nlocal colorTable={}\r\nfor _,player in pairs(gameState.allPlayers) do\r\ntable.insert(colorTable,player.color)\r\nend\r\nreturn colorTable\r\nend\r\nfunction registerColony(parameters)\r\nlocal index=tableHelpers.getIndexInTable(gameState.colonyGuids,parameters.guid)\r\nif index==nil then\r\ntable.insert(gameState.colonyGuids,parameters.guid)\r\ngameState.wasUpdated=true\r\nelse\r\nlog(\"registerColony attempted with existing colony \"..parameters.guid)\r\nend\r\nend\r\nfunction unregisterColony(parameters)\r\nlocal index=tableHelpers.getIndexInTable(gameState.colonyGuids,parameters.guid)\r\nif index~=nil then\r\ntable.remove(gameState.colonyGuids,index)\r\ngameState.wasUpdated=true\r\nend\r\nend\r\nfunction placeColonyMarkerAndInitialize(params)\r\nlocal colony=getObjectFromGUID(params.colonyGUID)\r\nlocal discardAllowed=gameState.isSoloGame==true\r\nlocal colonyMarkers=gameObjectHelpers.getObjectByName(\"coloniesMarkersBag\")\r\ncolonyMarkers.takeObject( {\r\nposition=vectorHelpers.addVectors(colony.getPosition(),tablePositions.colonies.tradeMarkerActiveOffset),\r\ncallback_function=function(obj) colony.call(\"initializeColony\",{marker=obj.getGUID(),discardAllowed=discardAllowed}) end,\r\nrotation={0,0,0}}\r\n)\r\nend\r\nfunction increaseColonyMarkers()\r\nfor _,guid in pairs(gameState.colonyGuids) do\r\nlocal colony=getObjectFromGUID(guid)\r\nif colony~=nil then\r\ncolony.call(\"increaseColonyMarker\")\r\nend\r\nend\r\nend\r\nfunction getPlayerColonyToPlace(params)\r\nlocal playerColor=params.player_color\r\nlocal colonyGuid=params.colonyGuid\r\nlog(\"Player \"..playerColor..\" trying to place colony on \"..colonyGuid)\r\nlocal handObjects=Player[playerColor].getHandObjects()\r\nfor _,object in pairs(handObjects) do\r\nif object.getName()==\"Cube\" and object.getDescription()==playerColor then\r\nlog(\"Player \"..playerColor..\" has colony in hand \"..colonyGuid)\r\nreturn object.getGUID()\r\nend\r\nend\r\nreturn nil\r\nend\r\nfunction resetTradingFleets()\r\nlocal index=1\r\nfor _,object in pairs(getAllObjects()) do\r\nif string.match(object.getName(),\".* Trade Fleet\")~=nil and object.getGUID()~=gameObjectHelpers.getGuidByName(\"coloniesShipBag\") then\r\nlocal totalOffset=matrixTwoDHelpers.totalOffsetFromPositionMatrixAnd1DIndex(index,tablePositions.colonies.tradeShipPositionMatrix)\r\nobject.setPositionSmooth(vectorHelpers.addVectors(tablePositions.colonies.tradingTile.pos,totalOffset,false,false))\r\nobject.setRotation({0,90,0})\r\nindex=index + 1\r\nend\r\nend\r\nend\r\nfunction tradeViaCredits(_,playerColor,_)\r\nlocal activationEffects={resourceValues={Credits=-9}}\r\npayUpForTrade(playerColor,activationEffects)\r\nend\r\nfunction tradeViaTitanium(_,playerColor,_)\r\nlocal activationEffects={resourceValues={Titanium=-3}}\r\npayUpForTrade(playerColor,activationEffects)\r\nend\r\nfunction tradeViaEnergy(_,playerColor,_)\r\nlocal activationEffects={resourceValues={Energy=-3}}\r\npayUpForTrade(playerColor,activationEffects)\r\nend\r\nfunction payUpForTrade(playerColor,activationEffects)\r\nif not canPlayerTrade(playerColor) then\r\nlogging.printToColor(\"Cannot trade. You do not have any free trade fleets.\",playerColor,playerColor,loggingModes.important)\r\nreturn\r\nend\r\nlocal tmPlayer=getPlayerByColor(playerColor)\r\nfor key,value in pairs(activationEffects.resourceValues) do\r\nactivationEffects.resourceValues[key]=value - tmPlayer.colonyTradingConfig.tradingCostModifier\nend\r\nactivationEffects.effects={\"TradeToken\"}\r\nlocal colonyTradingTile=gameObjectHelpers.getObjectByName(\"coloniesTradingTile\")\r\nobjectActivationSystem_doAction({playerColor=playerColor,sourceName=\"Trade Button\",object=colonyTradingTile,activationEffects=activationEffects})\r\nend\r\nfunction canPlayerTrade(player_color)\r\nfor _,object in pairs(getObjectFromGUID(gameState.static.coloniesGameData.fleetZone).getObjects()) do\r\nif string.find(object.getName(),\"Trade Fleet\")~=nil and string.find(object.getName(),player_color)~=nil then\r\nreturn true\r\nend\r\nend\r\nend\r\nfunction letPlayerTrade(params)\r\nlocal playerColor=params.player_color\r\nlocal target=params.colonyGuid\r\nfor _,object in pairs(getObjectFromGUID(gameState.static.coloniesGameData.fleetZone).getObjects()) do\r\nif string.find(object.getName(),\"Trade Fleet\")~=nil and string.find(object.getName(),playerColor)~=nil then\r\nobject.setPositionSmooth(vectorHelpers.addVectors(getObjectFromGUID(target).getPosition(),tablePositions.colonies.tradeShipTradedOffset),false,false)\r\nobject.setRotation({0,90,0})\r\nbreak\r\nend\r\nend\r\neventHandling_triggerEvent({triggeredByColor=playerColor,\r\ntriggerType=eventData.triggerType.colonyTraded,\r\neventSourceId=params.colonyGuid,\r\nmetadata={}})\r\nend\r\nfunction giveTradingRewards(rewardTable)\r\nfor color,rewards in pairs(rewardTable) do\r\nlocal receiver=gameState.allPlayers[getPlayerIndexByColor(color)]\r\nfor index,reward in pairs(rewards) do\r\ncolonyRewardFunctions[reward.type](receiver,reward.amount)\r\nlogging.printToAll(\"Player \"..receiver.color..\" received \"..reward.amount..\" \"..reward.type..\" from trading.\",{0,0.7,0.8,1},loggingModes.detail)\r\nend\r\nend\r\nend\r\nfunction updatePlayerColonyCount(params)\r\nlocal player_color=params.player_color\r\nlocal delta=params.delta\r\nlocal player=gameState.allPlayers[getPlayerIndexByColor(player_color)]\r\nplayer.ownedObjects[ownableObjects.colonies.objects.colony]=player.ownedObjects[ownableObjects.colonies.objects.colony] + delta\r\nlog(\"Player \"..player_color..\" has now \"..player.ownedObjects[ownableObjects.colonies.objects.colony]..\" colonies in play.\")\r\nend\r\nfunction givePlaceColonyRewards(params)\r\nlocal playerColor=params.player_color\r\nlocal type=params.type\r\nlocal amount=params.amount\r\nlocal receiver=gameState.allPlayers[getPlayerIndexByColor(playerColor)]\r\nlogging.printToAll(\"Player \"..playerColor..\" received \"..amount..\" \"..type..\" from placing a colony.\",{0,0.7,0.8,1},loggingModes.detail)\r\ncolonyRewardFunctions[type](receiver,amount)\r\nend\r\ncolonyRewardFunctions={}\r\ncolonyRewardFunctions.energy=function(receiver,amount)\r\nlocal playerMat=getObjectFromGUID(receiver.playerArea.playerMat)\r\nlocal paramTable={key=\"energy\",amount=amount}\r\nplayerMat.call(\"changeStockpile\",paramTable)\r\nend\r\ncolonyRewardFunctions.energyProduction=function(receiver,amount)\r\nlocal playerMat=getObjectFromGUID(receiver.playerArea.playerMat)\r\nlocal paramTable={key=\"energy\",amount=amount}\r\nplayerMat.call(\"changeProduction\",paramTable)\r\nend\r\ncolonyRewardFunctions.plantProduction=function(receiver,amount)\r\nlocal playerMat=getObjectFromGUID(receiver.playerArea.playerMat)\r\nlocal paramTable={key=\"plants\",amount=amount}\r\nplayerMat.call(\"changeProduction\",paramTable)\r\nend\r\ncolonyRewardFunctions.creditsProduction=function(receiver,amount)\r\nlocal playerMat=getObjectFromGUID(receiver.playerArea.playerMat)\r\nlocal paramTable={key=\"credits\",amount=amount}\r\nplayerMat.call(\"changeProduction\",paramTable)\r\nend\r\ncolonyRewardFunctions.steel=function(receiver,amount)\r\nlocal playerMat=getObjectFromGUID(receiver.playerArea.playerMat)\r\nlocal paramTable={key=\"steel\",amount=amount}\r\nplayerMat.call(\"changeStockpile\",paramTable)\r\nend\r\ncolonyRewardFunctions.steelProduction=function(receiver,amount)\r\nlocal playerMat=getObjectFromGUID(receiver.playerArea.playerMat)\r\nlocal paramTable={key=\"steel\",amount=amount}\r\nplayerMat.call(\"changeProduction\",paramTable)\r\nend\r\ncolonyRewardFunctions.titanium=function(receiver,amount)\r\nlocal playerMat=getObjectFromGUID(receiver.playerArea.playerMat)\r\nlocal paramTable={key=\"titanium\",amount=amount}\r\nplayerMat.call(\"changeStockpile\",paramTable)\r\nend\r\ncolonyRewardFunctions.heat=function(receiver,amount)\r\nlocal playerMat=getObjectFromGUID(receiver.playerArea.playerMat)\r\nlocal paramTable={key=\"heat\",amount=amount}\r\nplayerMat.call(\"changeStockpile\",paramTable)\r\nend\r\ncolonyRewardFunctions.heatProduction=function(receiver,amount)\r\nlocal playerMat=getObjectFromGUID(receiver.playerArea.playerMat)\r\nlocal paramTable={key=\"heat\",amount=amount}\r\nplayerMat.call(\"changeProduction\",paramTable)\r\nend\r\ncolonyRewardFunctions.credits=function(receiver,amount)\r\nlocal playerMat=getObjectFromGUID(receiver.playerArea.playerMat)\r\nlocal paramTable={key=\"credits\",amount=amount}\r\nplayerMat.call(\"changeStockpile\",paramTable)\r\nend\r\ncolonyRewardFunctions.plants=function(receiver,amount)\r\nlocal playerMat=getObjectFromGUID(receiver.playerArea.playerMat)\r\nlocal paramTable={key=\"plants\",amount=amount}\r\nplayerMat.call(\"changeStockpile\",paramTable)\r\nend\r\ncolonyRewardFunctions.animals=function(receiver,amount)\r\nlocal source=gameObjectHelpers.getObjectByName(\"animalWildSource\")\r\nsource.deal(amount,receiver.color)\r\nend\r\ncolonyRewardFunctions.microbes=function(receiver,amount)\r\nlocal source=gameObjectHelpers.getObjectByName(\"microbeFloaterSource\")\r\nsource.deal(amount,receiver.color)\r\nend\r\ncolonyRewardFunctions.data=function(receiver,amount)\r\nlocal source=gameObjectHelpers.getObjectByName(\"dataAsteroidSource\")\r\nsource.deal(amount,receiver.color)\r\nend\r\ncolonyRewardFunctions.floaters=function(receiver,amount)\r\nlocal source=gameObjectHelpers.getObjectByName(\"microbeFloaterSource\")\r\nfunction coroutineGetFloater()\r\nfor i=1,amount do\r\nlocal obj=source.takeObject()\r\ncoroutine.yield(0)\r\ncoroutine.yield(0)\r\ncoroutine.yield(0)\r\nobj.deal(1,receiver.color)\r\nobj.flip()\r\nend\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"coroutineGetFloater\")\r\nend\r\ncolonyRewardFunctions.cards=function(receiver,amount)\r\ndealProjectsToPlayer(getPlayerIndexByColor(receiver.color),amount)\r\nend\r\ncolonyRewardFunctions.oceans=function(receiver,amount)\r\ndealOceanToPlayer(getPlayerIndexByColor(receiver.color))\r\nend\r","n77":"function changeRulingParty(newRulingPartyId)\r\nfunction changeRulingPartyCoroutine()\r\nlocal previousRulingParty=getRulingParty()\r\nlocal newRulingParty=nil\r\nfor _,partyInfo in pairs(gameState.turmoilData.parties) do\r\nif partyInfo.partyId==newRulingPartyId then\r\npartyInfo.isRuling=true\r\nnewRulingParty=partyInfo\r\nelse\r\npartyInfo.isRuling=false\r\nend\r\nend\r\nlocal eventHandler={eventHandlerId=\"globalEventHandlerTurmoilPolicy\"}\r\neventHandler.triggerScope=eventData.triggerScope.anyPlayer\r\neventHandler.actionIndex=-1\r\neventHandler.callbackName=\"activatePolicy\"\r\neventHandler.objectPrettyName=\"Turmoil\"\r\nif previousRulingParty~=nil then\r\nif turmoilPartyData.parties[previousRulingParty.partyId].policyBonus.triggerTypes~=nil then\r\neventHandler.allowedPhases=turmoilPartyData.parties[previousRulingParty.partyId].policyBonus.allowedPhases\r\nfor _,triggerType in pairs(turmoilPartyData.parties[previousRulingParty.partyId].policyBonus.triggerTypes) do\r\nlocal tmpEventHandler=tableHelpers.deepClone(eventHandler)\r\ntmpEventHandler.triggerType=triggerType\r\neventHandling.unsubscribeHandler(tmpEventHandler)\r\nend\r\nend\r\nend\r\nfor i=1,4 do coroutine.yield(0) end\r\nif turmoilPartyData.parties[newRulingParty.partyId].policyBonus.triggerTypes~=nil then\r\neventHandler.allowedPhases=turmoilPartyData.parties[newRulingParty.partyId].policyBonus.allowedPhases\r\nfor _,triggerType in pairs(turmoilPartyData.parties[newRulingParty.partyId].policyBonus.triggerTypes) do\r\nlocal tmpEventHandler=tableHelpers.deepClone(eventHandler)\r\ntmpEventHandler.triggerType=triggerType\r\neventHandling.subscribeHandler(tmpEventHandler)\r\nend\r\nend\r\ngameState.turmoilData.oneTimeEffectTable={}\r\nif previousRulingParty~=nil then\r\nif turmoilPartyData.parties[previousRulingParty.partyId].onRulingPartyChanged~=nil then\r\nturmoilPartyData.parties[previousRulingParty.partyId].onRulingPartyChanged(newRulingParty,gameState.allPlayers)\r\nend\r\nend\r\nif turmoilPartyData.parties[newRulingParty.partyId].onRulingPartyChanged~=nil then\r\nturmoilPartyData.parties[newRulingParty.partyId].onRulingPartyChanged(newRulingParty,gameState.allPlayers)\r\nend\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"changeRulingPartyCoroutine\")\r\nend\r\nfunction getRulingParty()\r\nfor _,partyInfo in pairs(gameState.turmoilData.parties) do\r\nif partyInfo.isRuling then\r\nreturn partyInfo\r\nend\r\nend\r\nreturn nil\r\nend\r\nfunction onObjectSpawn(obj)\r\nif obj.getDescription()~=\"PartyTile\" then\r\nreturn\r\nend\r\nfor _,partyPlateGuid in pairs(turmoilPartyPlates) do\r\nif obj.guid==partyPlateGuid then\r\nlocal stateId=obj.getStateId()\r\nchangeRulingParty(marsSenate.partiesById[stateId])\r\nend\r\nend\r\nend\r\nfunction createDelegatesForBag(bag,amount,description,callback)\r\nlocal amountDone=0\r\nlocal delegateIds={}\r\nlocal callbackFunction=function(clonedObjectGuid)\r\nlocal object=getObjectFromGUID(clonedObjectGuid)\r\nobject.setName(\"Delegate\")\r\nobject.setDescription(description)\r\nobject.setColorTint(bag.getColorTint())\r\ntable.insert(delegateIds,clonedObjectGuid)\r\namountDone=amountDone + 1\r\nobject.setLock(false)\r\nbag.putObject(object)\r\nif amountDone==amount then\r\nif type(callback)==\"function\" then\r\ncallback(delegateIds)\r\nend\r\nend\r\nend\r\nlocal genericDelegate=gameObjectHelpers.getObjectByName(\"turmoilGenericDelegate\")\r\nfor i=1,amount do\r\ncreateClonableObject(genericDelegate,vectorHelpers.addVectors(bag.getPosition(),{0,1 + i,0}),{0,0,0},callbackFunction)\r\nend\r\nend\r\nfunction extractPartiesFromDescription(description)\r\nlocal distantMatch=\"Distant Party: (%a+)\"\r\nlocal currentMatch=\"Current Party: (%a+)\"\r\nreturn {\r\ndistantParty=string.match(description,distantMatch),\r\ncurrentParty=string.match(description,currentMatch)\r\n}\r\nend\r\nfunction zoneContainsDelegate(zoneGuid)\r\nlocal zone=getObjectFromGUID(zoneGuid)\r\nif zone.getObjects()~=nil then\r\nfor _,obj in pairs(zone.getObjects()) do\r\nif obj.getName()==\"Delegate\" then\r\nreturn true\r\nend\r\nend\r\nend\r\nreturn false\r\nend\r\nfunction getDelegateFromZone(zoneGuid)\r\nlocal zone=getObjectFromGUID(zoneGuid)\r\nif zone.getObjects()~=nil then\r\nfor _,obj in pairs(zone.getObjects()) do\r\nif obj.getName()==\"Delegate\" then\r\nreturn obj\r\nend\r\nend\r\nend\r\nreturn nil\r\nend\r\nfunction findNextFreePartyPosition(partyInfo)\r\nif not zoneContainsDelegate(partyInfo.partyLead.zoneGuid) then\r\nreturn partyInfo.partyLead.pos\r\nend\r\nfor _,delegate in pairs(partyInfo.delegates) do\r\nif not zoneContainsDelegate(delegate.zone) then\r\nreturn delegate.pos\r\nend\r\nend\r\nreturn nil\r\nend\r\nfunction placeDelegateInPartyRemotely(params)\r\nplaceDelegateInParty(params.playerColor,params.partyId,true)\r\nend\r\nfunction placeDelegateInParty(playerColor,partyId,remotelyTriggered)\r\nfor _,obj in pairs(Player[playerColor].getHandObjects(1)) do\r\nif obj.tag==\"Figurine\" and obj.getName()==\"Delegate\" then\r\nplaceDelegate(obj,partyId)\r\nreturn\r\nend\r\nend\r\nfor _,info in pairs(gameState.turmoilData.lobbyZones) do\r\nlocal delegate=getDelegateFromZone(info.zone)\r\nif delegate~=nil and delegate.getDescription()==playerColor then\r\nplaceDelegate(delegate,partyId)\r\nplayerActionFuncs.playerHasPerformedAction(playerColor)\r\nreturn\r\nend\r\nend\r\nlocal tmPlayer=getPlayerByColor(playerColor)\r\nlocal delegateBag=getObjectFromGUID(tmPlayer.delegateBagId)\r\nif delegateBag.getObjects()==nil or #delegateBag.getObjects()==0 then\r\nlogging.printToColor(\"All your delegates are already occupied.\",playerColor)\r\nreturn\r\nend\r\nlocal activationEffects={resourceValues={Credits=-5}}\r\nlocal isAllowed=objectActivationSystem_doAction({\r\nplayerColor=playerColor,\r\nobject=delegateBag,\r\nsourceName=\"placing a delegate from their reserve.\",\r\nactivationEffects=activationEffects\r\n})\r\nif isAllowed then\r\nplaceDelegateFromBagInParty(delegateBag,partyId)\r\nend\r\nend\r\nfunction placeDelegateFromBagInParty(delegateBag,partyId)\r\nif delegateBag.getObjects()==nil or #delegateBag.getObjects()==0 then\r\nreturn false\r\nend\r\nlocal delegate=delegateBag.takeObject()\r\nplaceDelegate(delegate,partyId)\r\nreturn true\r\nend\r\nfunction placeDelegate(delegate,partyId)\r\nfunction placeDelegateCoroutine()\r\nwhile transientState.delegatePlacingOngoing==true do\r\ncoroutine.yield(0)\r\nend\r\ntransientState.delegatePlacingOngoing=true\r\nfor _,partyInfo in pairs(gameState.turmoilData.parties) do\r\nif partyId==partyInfo.partyId then\r\nlocal nextFreePosition=findNextFreePartyPosition(partyInfo)\r\nif nextFreePosition==nil then\r\nlogging.broadcastToAll(\"Party \"..partyInfo.partyId..\" has no free slots left,unable to place a delegate.\")\r\nbreak\r\nend\r\nlocal delegateRotation=partyInfo.delegateRotation\r\ndelegate.setPosition(nextFreePosition,false,false)\r\ndelegate.setRotation(delegateRotation)\r\nfor i=1,15 do\r\ncoroutine.yield(0)\r\nend\r\nwhile not delegate.resting do\r\ncoroutine.yield(0)\r\nend\r\nrecalculateDominance()\r\nrecalculatePartyLeads()\r\nbreak\r\nend\r\nend\r\ntransientState.delegatePlacingOngoing=false\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"placeDelegateCoroutine\")\r\nend\r\nfunction countAllDelegates(zoneGuid)\r\nlocal count=0\r\nfor _,object in pairs(getObjectFromGUID(zoneGuid).getObjects()) do\r\nif object.getName()==\"Delegate\" and object.resting then\r\ncount=count + 1\r\nend\r\nend\r\nreturn count\r\nend\r\nfunction recalculateDominance()\r\nlocal partiesToConsider={}\r\nlocal highestDelegateCount=0\r\nlocal dominantPartyIndex=0\r\nfor i,partyInfo in pairs(gameState.turmoilData.parties) do\r\nlocal delegateCount=countAllDelegates(partyInfo.mainPartyZone)\r\nif delegateCount > highestDelegateCount then\r\npartiesToConsider={i}\r\nhighestDelegateCount=delegateCount\r\nelseif delegateCount==highestDelegateCount then\r\ntable.insert(partiesToConsider,i)\r\nend\r\nif partyInfo.isDominant then\r\ndominantPartyIndex=i\r\npartyInfo.isDominant=false\r\nend\r\nend\r\nlocal newIndex=findClosestClockwiseIndex(#gameState.turmoilData.parties,dominantPartyIndex,partiesToConsider)\r\nlocal newDominatingParty=gameState.turmoilData.parties[newIndex]\r\nnewDominatingParty.isDominant=true\r\nmoveDominanceMarkerToParty(newDominatingParty)\r\nend\r\nfunction findClosestClockwiseIndex(roundSize,referenceIndex,inputIndicesTable)\r\nfor i=referenceIndex,referenceIndex-roundSize+1,-1 do\r\nlocal normalizedIndex=i\r\nif normalizedIndex < 1 then\r\nnormalizedIndex=normalizedIndex + roundSize\r\nend\r\nfor _,index in pairs(inputIndicesTable) do\r\nif normalizedIndex==index then\r\nreturn index\r\nend\r\nend\r\nend\r\nend\r\nfunction moveDominanceMarkerToParty(partyInfo)\r\nlocal dominanceMarker=gameObjectHelpers.getObjectByName(\"turmoilDominanceMarker\")\r\ndominanceMarker.setPositionSmooth(partyInfo.dominancePosition)\r\nend\r\nfunction countDelegatesInPartyAndSortByColor(partyName)\r\nfor i,partyInfo in pairs(gameState.turmoilData.parties) do\r\nif partyInfo.partyId==partyName then\r\nreturn countDelegatesAndSortByColor(partyInfo.mainPartyZone)\r\nend\r\nend\r\nlog(\"Unknown party ... (compared to partyId)\"..partyName)\r\nlog(\"Valid parties: \"..gameState.turmoilData.parties)\r\nreturn nil\r\nend\r\nfunction countDelegatesAndSortByColor(zoneGuid)\r\nlocal counts={}\r\nfor _,object in pairs(getObjectFromGUID(zoneGuid).getObjects()) do\r\nif object.getName()==\"Delegate\" and object.resting then\r\nif counts[object.getDescription()]==nil then\r\ncounts[object.getDescription()]=1\r\nelse\r\ncounts[object.getDescription()]=counts[object.getDescription()] + 1\r\nend\r\nend\r\nend\r\nreturn counts\r\nend\r\nfunction recalculatePartyLeads()\r\nfunction recalculatePartyLeadsCoroutine()\r\nwhile transientState.computingPartyLead do\r\ncoroutine.yield(0)\r\nend\r\ntransientState.computingPartyLead=true\r\nfor i,partyInfo in pairs(gameState.turmoilData.parties) do\r\nlocal counts=countDelegatesAndSortByColor(partyInfo.mainPartyZone)\r\nlocal partyLeadObject=getFirstDelegateInZone(partyInfo.partyLead.zoneGuid)\r\nlocal newPartyLeadColor=nil\r\nlocal maxCount=0\r\nif partyLeadObject~=nil then\r\nlocal partyLeadColor=partyLeadObject.getDescription()\r\nfor color,count in pairs(counts) do\r\nif count > maxCount then\r\nnewPartyLeadColor=color\r\nmaxCount=count\r\nelseif count==maxCount and color==partyLeadColor then\r\nnewPartyLeadColor=color\r\nend\r\nend\r\nif partyLeadColor~=newPartyLeadColor then\r\nlocal delegate=getFirstDelegateInZone(partyInfo.mainPartyZone,newPartyLeadColor)\r\nswitchObjectPositions(partyLeadObject,delegate)\r\nfor i=1,10 do coroutine.yield(0) end\r\nwhile not delegate.resting do coroutine.yield(0) end\r\nend\r\nelseif next(counts)~=nil then\r\nfor color,count in pairs(counts) do\r\nif count > maxCount then\r\nnewPartyLeadColor=color\r\nmaxCount=count\r\nend\r\nend\r\nlocal delegate=getFirstDelegateInZone(partyInfo.mainPartyZone,newPartyLeadColor)\r\ndelegate.setPositionSmooth(partyInfo.partyLead.pos)\r\nfor i=1,10 do coroutine.yield(0) end\r\nwhile not delegate.resting do coroutine.yield(0) end\r\nend\r\nend\r\ntransientState.computingPartyLead=false\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"recalculatePartyLeadsCoroutine\")\r\nend\r\nfunction switchObjectPositions(objectA,objectB)\r\nlocal positionA=objectA.getPosition()\r\nobjectA.setPositionSmooth(objectB.getPosition())\r\nobjectB.setPositionSmooth(positionA)\r\nend\r\nfunction getDominatingParty()\r\nfor _,partyInfo in pairs(gameState.turmoilData.parties) do\r\nif partyInfo.isDominant then\r\nreturn partyInfo\r\nend\r\nend\r\nreturn nil\r\nend\r\nfunction getFirstDelegateInZone(zoneGuid,color)\r\nlocal zone=getObjectFromGUID(zoneGuid)\r\nfor _,obj in pairs(zone.getObjects()) do\r\nif obj.getName()==\"Delegate\" and obj.resting then\r\nif color==nil then\r\nreturn obj\r\nelse\r\nif obj.getDescription()==color then\r\nreturn obj\r\nend\r\nend\r\nend\r\nend\r\nreturn nil\r\nend\r\nfunction getChairman()\r\nreturn getFirstDelegateInZone(gameState.turmoilData.chairman.zoneGuid)\r\nend\r\nfunction getPartyLeadColor(partyInfo)\r\nlocal delegate=getFirstDelegateInZone(partyInfo.partyLead.zoneGuid)\r\nif delegate==nil then\r\nreturn nil\r\nelse\r\nreturn delegate.getDescription()\r\nend\r\nend\r\nfunction calculateInfluence()\r\nlocal chairman=getChairman()\r\nlocal dominatingParty=getDominatingParty()\r\nlocal allDelegateCounts=countDelegatesAndSortByColor(dominatingParty.mainPartyZone)\r\nif dominatingParty==nil or getFirstDelegateInZone(dominatingParty.partyLead.zoneGuid)==nil then\r\nWait.time(|| broadcastToAll(\"Warning: There's currently no valid dominating party.\",{1,0,0.35}),1)\r\nWait.time(|| broadcastToAll(\"This may happen if the global event is processed while the 'new government' turmoil effect is handled.\",{1,0,0.35}),3)\r\nWait.time(|| broadcastToAll(\"Influence counting for dominating party and chairman was skipped. Please apply influence based effects manually.\",{1,0,0.35}),5)\r\nreturn\r\nend\r\nlocal leadingDelegate=getFirstDelegateInZone(dominatingParty.partyLead.zoneGuid)\r\nfor _,player in pairs(gameState.allPlayers) do\r\nlocal transientInfluence=0\r\nlocal hasLeadingDelegate=false\r\nif leadingDelegate.getDescription()==player.color then\r\ntransientInfluence=transientInfluence + 1\r\nhasLeadingDelegate=true\r\nend\r\nlocal delegateCount=allDelegateCounts[player.color]\r\nif delegateCount~=nil then\r\nif hasLeadingDelegate and delegateCount > 1 then\r\ntransientInfluence=transientInfluence + 1\r\nelseif delegateCount > 0 then\r\ntransientInfluence=transientInfluence + 1\r\nend\r\nend\r\nif chairman==nil then\r\nif not player.neutral then\r\nWait.time(|| broadcastToColor(\"Warning: Chairman influence is skipped as there is currently no chairman.\",player.color,{1,0,0.35,1}),1)\r\nWait.time(|| broadcastToColor(\"Please check the turmoil board if the chairman is positioned correctly.\",player.color,{1,0,0.35,1}),3)\r\nWait.time(|| broadcastToColor(\"This may also happen if the global event is processed while the 'new government' turmoil effect is handled.\",player.color,{1,0,0.35,1}),5)\r\nWait.time(|| broadcastToColor(\"Please also check influence based effects from the current global event,errors are very likely.\",player.color,{1,0,0.35,1}),7)\r\nend\r\nelseif chairman.getDescription()==player.color then\r\ntransientInfluence=transientInfluence + 1\r\nend\r\nif player.turmoilInfluence==nil then\r\nplayer.turmoilInfluence={}\r\nend\r\nplayer.turmoilInfluence.transientInfluence=transientInfluence\r\nplayer.wasUpdated=true\r\nlogging.broadcastToColor(\"Player \"..player.color..\" has \"..player.turmoilInfluence.transientInfluence..\" influence from parties.\",player.color,player.color,loggingModes.detail)\r\nif player.turmoilInfluence.baseInfluence~=0 then\r\nlogging.broadcastToColor(\"Player \"..player.color..\" has \"..player.turmoilInfluence.baseInfluence..\" base influence.\",player.color,player.color,loggingModes.detail)\r\nend\r\nend\r\nend\r\nfunction refreshLobby()\r\nlocal playerIndex=1\r\nfor _,player in pairs(gameState.allPlayers) do\r\nif not player.neutral then\r\nlocal delegateBag=getObjectFromGUID(player.delegateBagId)\r\nif #delegateBag.getObjects() > 0 then\r\ndelegateBag.takeObject({\r\nposition=gameState.turmoilData.lobbyPositions[playerIndex],\r\nsmooth=true,\r\n})\r\nend\r\nplayerIndex=playerIndex + 1\r\nend\r\nend\r\nend\r\nfunction cleanUpDelegate(delegate)\r\nlocal playerColor=delegate.getDescription()\r\nlocal bag=nil\r\nif playerColor==\"Neutral\" then\r\nbag=getObjectFromGUID(gameState.turmoilData.neutralBagId)\r\nelse\r\nlocal player=getPlayerByColor(playerColor)\r\nbag=getObjectFromGUID(player.delegateBagId)\r\nend\r\nbag.putObject(delegate)\r\nend\r\nfunction changePartyPlateToParty(partyInfo)\r\nfor name,guid in pairs(turmoilPartyPlates) do\r\nif getObjectFromGUID(guid)~=nil then\r\nlocal currentParty=name\r\nif currentParty==partyInfo.partyId then\r\nreturn\r\nelse\r\nlocal states=getObjectFromGUID(guid).getStates()\r\nfor _,stateInfo in pairs(states) do\r\nif stateInfo.guid==turmoilPartyPlates[partyInfo.partyId] then\r\ngetObjectFromGUID(guid).setState(stateInfo.id)\r\nreturn\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nfunction playersPartyDelegateCount(playerColor,partyNameInput)\r\nlocal delegates=countDelegatesInPartyAndSortByColor(partyNameInput)\r\nif delegates[playerColor]==nil then\r\nreturn 0\r\nelse\r\nreturn delegates[playerColor]\r\nend\r\nend\r","n78":"function turmoilReduceTR()\r\nif isDoubleClick(\"turmoilReduceTR\") then\r\nreturn\r\nend\r\nfunction turmoilReduceTRCoroutine()\r\ntransientState.turmoilActions.trRevisionInProgress=true\r\nfor i,player in pairs(gameState.allPlayers) do\r\nif not player.neutral then\r\ndecreasePlayerTerraforming(i,\"TR Revision\")\r\nend\r\nend\r\ntransientState.turmoilActions.trRevisionInProgress=false\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"turmoilReduceTRCoroutine\")\r\nend\r\nfunction turmoilGlobalEvent(_,playerColor,altClick)\r\nif isDoubleClick(\"turmoilGlobalEvent\") then\r\nreturn\r\nend\r\nfunction turmoilGlobalEventCoroutine()\r\nwhile transientState.turmoilActions.trRevisionInProgress do\r\ncoroutine.yield(0)\r\nend\r\ntransientState.turmoilActions.globalEventInProgress=true\r\ncalculateInfluence()\r\nlocal globalEventZone=getObjectFromGUID(gameState.turmoilData.globalEvents.currentZone)\r\nfor _,object in pairs(globalEventZone.getObjects()) do\r\nif object.tag==\"Card\" and not object.is_face_down then\r\nif object.getVar(\"activateGlobalEvent\")~=nil then\r\nobject.call(\"activateGlobalEvent\",{allPlayers=gameState.allPlayers,triggeredByColor=playerColor})\r\nif object.getVar(\"resolveGlobalEvent\")~=nil then\r\nobject.call(\"resolveGlobalEvent\",{allPlayers=gameState.allPlayers,triggeredByColor=playerColor})\r\nend\r\nfor i=1,120 do\r\ncoroutine.yield(0)\r\nend\r\nobject.flip()\r\ntransientState.turmoilActions.globalEventInProgress=false\r\nreturn 1\r\nelse\r\nlogging.broadcastToAll(\"Global Event not implemented yet. Please do it manually!\",{1,0,0},loggingModes.exception)\r\ntransientState.turmoilActions.globalEventInProgress=false\r\nreturn 1\r\nend\r\nend\r\nend\r\nlocal turmoilCardDeckExists=false\r\nfor _,object in pairs(globalEventZone.getObjects()) do\r\nif object.tag==\"Deck\" then\r\nturmoilCardDeckExists=true\r\nend\r\nend\r\nif turmoilCardDeckExists then\r\nlogging.broadcastToAll(\"Global event cards are stacked face up. This breaks the global event handling during solar phase.\",{1,0,0},loggingModes.exception)\r\nend\r\ntransientState.turmoilActions.globalEventInProgress=false\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"turmoilGlobalEventCoroutine\")\r\nend\r\nfunction turmoilNewGovernment(_,playerColor,_)\r\nif isDoubleClick(\"turmoilNewGovernment\") then\r\nreturn\r\nend\r\nfunction turmoilNewGovernmentCoroutine()\r\nwhile transientState.turmoilActions.globalEventInProgress or\r\ntransientState.turmoilActions.trRevisionInProgress do\r\ncoroutine.yield(0)\r\nend\r\ntransientState.turmoilActions.newGovInProgress=true\r\nlocal cleanupChairman=function()\r\nlocal currentChairman=getChairman()\r\nif currentChairman~=nil then\r\ncleanUpDelegate(currentChairman)\r\nend\r\nend\r\nlocal placeNewChairman=function(partyInfo)\r\nlocal delegate=getFirstDelegateInZone(partyInfo.partyLead.zoneGuid)\r\nif delegate==nil then\r\nreturn\r\nend\r\nlocal delegateColor=delegate.getDescription()\r\ndelegate.setPositionSmooth(gameState.turmoilData.chairman.transform.pos)\r\nif delegateColor~=\"Neutral\" then\r\nlocal leadingPlayer=getPlayerByColor(delegateColor)\r\nlogging.broadcastToAll(\"New chairman of the commitee is \"..leadingPlayer.name,leadingPlayer.color,loggingModes.essential)\r\nincreasePlayerTerraforming(getPlayerIndexByColor(delegateColor),\"player puts up the new chairman.\")\r\nelse\r\nlogging.broadcastToAll(\"New chairman of the commitee is unaffiliated\",\"Grey\",loggingModes.essential)\r\nend\r\nend\r\nlocal changeGoverningParty=function(partyInfo)\r\nfor _,data in pairs(turmoilPartyData.parties) do\r\nif data.id==partyInfo.partyId then\r\ndata.onFactionTakesOver(gameState.allPlayers)\r\ngameState.turmoilData.rulingPartyId=data.id\r\nbreak\r\nend\r\nend\r\nplaceNewChairman(partyInfo)\r\nchangePartyPlateToParty(partyInfo)\r\nend\r\nlocal cleanupDominatingPartyDelegates=function(partyInfo)\r\nfor _,object in pairs(getObjectFromGUID(partyInfo.mainPartyZone).getObjects()) do\r\nif object.getName()==\"Delegate\" then\r\ncleanUpDelegate(object)\r\nend\r\nend\r\nend\r\nrecalculateDominance()\r\nrecalculatePartyLeads()\r\ncleanupChairman()\r\nlocal dominatingParty=getDominatingParty()\r\nfor i=1,45 do coroutine.yield(0) end\r\nchangeGoverningParty(dominatingParty)\r\nfor i=1,45 do coroutine.yield(0) end\r\ncleanupDominatingPartyDelegates(dominatingParty)\r\nfor i=1,30 do coroutine.yield(0) end\r\nrefreshLobby()\r\nfor i=1,40 do coroutine.yield(0) end\r\nrecalculateDominance()\r\nfor i=1,40 do coroutine.yield(0) end\r\ntransientState.turmoilActions.newGovInProgress=false\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"turmoilNewGovernmentCoroutine\")\r\nend\r\nfunction turmoilChangingTimes()\r\nif isDoubleClick(\"turmoilChangingTimes\") then\r\nreturn\r\nend\r\nfunction moveComingEventAndPlaceCurrentNeutralDelegate(comingZone,neutralDelegateBag)\r\nfor _,object in pairs(comingZone.getObjects()) do\r\nif object.tag==\"Card\" then\r\nplaceDelegateFromBagInParty(neutralDelegateBag,extractPartiesFromDescription(object.getDescription()).currentParty)\r\nlocal newPosition=vectorHelpers.addVectors(gameState.turmoilData.globalEvents.positions.current,{0,0.5,0})\r\nobject.setPositionSmooth(newPosition)\r\nend\r\nend\r\nend\r\nfunction moveDistantEvent()\r\nlocal turmoilDeck=gameObjectHelpers.getObjectByName(\"turmoilDeck\")\r\nif turmoilDeck==nil then\r\nreturn\r\nend\r\nlocal newPosition=vectorHelpers.addVectors(gameState.turmoilData.globalEvents.positions.coming,{0,0.5,0})\r\nturmoilDeck.takeObject({\r\nposition=newPosition\r\n})\r\nend\r\nfunction placeDistantDelegate(neutralDelegateBag)\r\nlocal turmoilDeck=gameObjectHelpers.getObjectByName(\"turmoilDeck\")\r\nif turmoilDeck==nil then\r\nreturn\r\nend\r\nlocal remainingCards=turmoilDeck.getObjects()\r\nlocal object=remainingCards[#remainingCards]\r\nplaceDelegateFromBagInParty(neutralDelegateBag,extractPartiesFromDescription(object.description).distantParty)\r\nend\r\nfunction changingTimesCoroutine()\r\nlog(transientState.turmoilActions)\r\nwhile transientState.turmoilActions.newGovInProgress or\r\ntransientState.turmoilActions.trRevisionInProgress or\r\ntransientState.turmoilActions.globalEventInProgress do\r\ncoroutine.yield(0)\r\nend\r\ntransientState.turmoilActions.changingTimesInProgress=true\r\nrecalculateDominance()\r\nlocal neutralDelegateBag=getObjectFromGUID(gameState.turmoilData.neutralBagId)\r\nlocal comingZone=getObjectFromGUID(gameState.turmoilData.globalEvents.comingZone)\r\nmoveComingEventAndPlaceCurrentNeutralDelegate(comingZone,neutralDelegateBag)\r\nfor i=1,30 do coroutine.yield(0) end\r\nrecalculateDominance()\r\nfor i=1,50 do coroutine.yield(0) end\r\nmoveDistantEvent()\r\nfor i=1,40 do coroutine.yield(0) end\r\nplaceDistantDelegate(neutralDelegateBag)\r\nfor i=1,20 do coroutine.yield(0) end\r\nrecalculateDominance()\r\nfor i=1,20 do coroutine.yield(0) end\r\nrecalculatePartyLeads()\r\nfor i=1,20 do coroutine.yield(0) end\r\ntransientState.turmoilActions.changingTimesInProgress=false\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"changingTimesCoroutine\")\r\nend\r\nfunction activatePolicy(playerColor)\r\nlocal partyInfo=getRulingParty()\r\nlocal policyBonus=turmoilPartyData.parties[partyInfo.partyId].policyBonus\r\nif policyBonus.oneTimeEffect then\r\nfor _,color in pairs(gameState.turmoilData.oneTimeEffectTable) do\r\nif color==playerColor then\r\nreturn\r\nend\r\nend\r\nend\r\nlocal turmoilTile=gameObjectHelpers.getObjectByName(\"turmoilTile\")\r\nlocal isSuccess=objectActivationSystem_doAction({\r\nplayerColor=playerColor,\r\nsourceName=policyBonus.friendlyName,\r\nobject=turmoilTile,\r\nactivationEffects=policyBonus.actionProperties\r\n})\r\nif policyBonus.oneTimeEffect and isSuccess then\r\ntable.insert(gameState.turmoilData.oneTimeEffectTable,playerColor)\r\nend\r\nif not isSuccess and turmoilPartyData.parties[partyInfo.partyId].onPolicyActionNotAllowed~=nil then\r\nturmoilPartyData.parties[partyInfo.partyId].onPolicyActionNotAllowed(getPlayerByColor(playerColor))\r\nend\r\nend\r","n79":"function turmoilSetup()\r\nlocal turmoilTile=gameObjectHelpers.getObjectByName(\"turmoilTile\")\r\nturmoilTile.setPositionSmooth(tablePositions.turmoil.turmoilTile.position)\r\nturmoilTile.setRotation(tablePositions.turmoil.turmoilTile.rotation)\r\nturmoilTile.interactable=false\r\nturmoilTile.setLock(true)\r\nWait.frames(function()\r\nWait.condition(\r\nfunction()\r\nWait.time(|| setupTurmoilTile(),1)\r\nWait.time(|| initializeTurmoil(),2)\r\nend,\r\nfunction() return turmoilTile.resting end\r\n)\r\nend,15)\r\nend\r\nfunction setupTurmoilTile()\r\nlocal turmoilTile=getObjectFromGUID(expansions.turmoilTile)\r\ngameState.turmoilData.parties={}\r\nturmoilTile.setSnapPoints({})\r\nlocal turmoilTransforms=tableHelpers.deepClone(turmoilTile.call(\"getTurmoilTransforms\"))\r\nlocal allPartyTransforms=turmoilTransforms.parties\r\nsetupDominanceMarker(turmoilTile,allPartyTransforms[1].dominance)\r\nfor i,partyId in pairs(turmoilPartyData.defaultConfig.parties) do\r\nfor _,partyInfo in pairs(turmoilPartyData.parties) do\r\nif partyInfo.id==partyId then\r\nsetupTurmoilParty(turmoilTile,allPartyTransforms,partyInfo,i)\r\nend\r\nend\r\nend\r\nchangeRulingParty(turmoilPartyData.defaultConfig.startingPartyId)\r\ngameState.turmoilData.parties[1].isDominant=true\r\nsetupReserve(turmoilTile,turmoilTransforms.reserveSlots,turmoilTransforms.neutralReserve)\r\nsetupGovernmentArea(turmoilTile,turmoilTransforms.chairman,turmoilTransforms.policyTile)\r\nsetupLobbyArea(turmoilTile,turmoilTransforms.lobbySlots)\r\nsetupGlobalEventArea(turmoilTile,turmoilTransforms.globalEventTransforms)\r\nend\r\nfunction initializeTurmoil()\r\nfunction areAllDelegatesCreated()\r\nfor _,player in pairs(gameState.allPlayers) do\r\nif not player.neutral then\r\nlocal delegateBag=getObjectFromGUID(player.delegateBagId)\r\nif delegateBag==nil then\r\nreturn false\r\nend\r\nif #delegateBag.getObjects() < 7 then\r\nreturn false\r\nend\r\nend\r\nend\r\nreturn true\r\nend\r\nfunction initializeTurmoilCoroutine()\r\nwhile not areAllDelegatesCreated() do\r\nfor i=1,10 do\r\ncoroutine.yield(0)\r\nend\r\nend\r\nlocal turmoilTile=getObjectFromGUID(expansions.turmoilTile)\r\nturmoilTile.call(\"initialize\")\r\nlocal neutralDelegateBag=getObjectFromGUID(gameState.turmoilData.neutralBagId)\r\nneutralDelegateBag.takeObject({\r\nposition=gameState.turmoilData.chairman.transform.pos,\r\nrotation=gameState.turmoilData.chairman.transform.rot,\r\n})\r\ninitialNeutralDelegatePlacing(neutralDelegateBag)\r\nWait.time(|| refreshLobby(),6)\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"initializeTurmoilCoroutine\")\r\nend\r\nfunction initialNeutralDelegatePlacing(neutralDelegateBag)\r\nlocal neutralDelegateBag=getObjectFromGUID(gameState.turmoilData.neutralBagId)\r\nlocal turmoilDeck=gameObjectHelpers.getObjectByName(\"turmoilDeck\")\r\nlocal remainingCards=turmoilDeck.getObjects()\r\nplaceDelegateFromBagInParty(neutralDelegateBag,extractPartiesFromDescription(remainingCards[#remainingCards].description).distantParty)\r\nWait.time(turmoilChangingTimes,2)\r\nend\r\nfunction setupDominanceMarker(turmoilTile,targetTransform)\r\nlocal dominanceMarker=gameObjectHelpers.getObjectByName(\"turmoilDominanceMarker\")\r\ndominanceMarker.setPosition(vectorHelpers.fromLocalToWorld(turmoilTile,targetTransform.pos))\r\nend\r\nfunction createSingleSnapPoint(turmoilTile,inputData)\r\nsnapPointHelpers.createSingleSnapPoint(turmoilTile,inputData)\r\nend\r\nfunction createGridSnapPoints(turmoilTile,inputData)\r\nlocal snapPoints=turmoilTile.getSnapPoints()\r\nlocal snapGrid=matrixTwoDHelpers.createSnapGrid(turmoilTile,\r\ninputData.pos,\r\ninputData.size2D,\r\ninputData.gridVectors,\r\ninputData.rot[2],\r\ntrue,\r\ninputData.rot)\r\nfor i,sp in pairs(snapGrid) do\r\nlocal isException=false\r\nif inputData.exceptions~=nil then\r\nfor _,exception in pairs(inputData.exceptions) do\r\nlocal exceptionIndex=(exception[2]-1)*inputData.size2D[1] + exception[1]\r\nif exceptionIndex==i then\r\nisException=true\r\nend\r\nend\r\nend\r\nif not isException then\r\ntable.insert(snapPoints,sp)\r\nend\r\nend\r\nturmoilTile.setSnapPoints(snapPoints)\r\nend\r\nfunction createPartyZone(turmoilTile,grid,partyData,partyId)\r\nlocal operationId=partyId..\"PartyZone\"\r\nzoneHelpers.createScriptingZoneFromGrid(turmoilTile,grid,operationId,{0.5,1.3})\r\nWait.condition(\r\nfunction()\r\npartyData.mainPartyZone=volatileData.operations[operationId].result\r\nvolatileData.operations[operationId]=nil\r\nend,\r\nfunction() return volatileData.operations[operationId].isDone end\r\n)\r\nend\r\nfunction createDelegateData(turmoilTile,grid,partyData,partyId)\r\nlocal operationId=partyId..\"PartyGridZones\"\r\npartyData.delegates={}\r\nzoneHelpers.createScriptingZoneForEachGridPoint(turmoilTile,grid,operationId,3)\r\nWait.condition(\r\nfunction()\r\nfor i=1,#grid do\r\ntable.insert(partyData.delegates,{zone=volatileData.operations[operationId].result[i],pos=vectorHelpers.fromLocalToWorld(turmoilTile,grid[i])})\r\nend\r\nvolatileData.operations[operationId]=nil\r\nend,\r\nfunction() return volatileData.operations[operationId].isDone end\r\n)\r\nend\r\nfunction createPartyLeadData(turmoilTile,partyTransforms,partyData,partyId)\r\nlocal operationId=partyId..\"PartyLead\"\r\nzoneHelpers.createScriptingZoneFromTransform(turmoilTile,partyTransforms.partyLead,operationId,3)\r\nWait.condition(\r\nfunction()\r\nlocal partyLeadPos=vectorHelpers.fromLocalToWorld(turmoilTile,partyTransforms.partyLead.pos)\r\npartyData.partyLead={pos=partyLeadPos,zoneGuid=volatileData.operations[operationId].result}\r\nvolatileData.operations[operationId]=nil\r\nend,\r\nfunction() return volatileData.operations[operationId].isDone end\r\n)\r\nend\r\nfunction spawnPartyTile(turmoilTile,partyInfo,transform)\r\nlocal partyDefaultTile=gameObjectHelpers.getObjectByName(\"turmoilPartyTile\")\r\nlocal scale=partyDefaultTile.getScale()\r\nlocal cloneCallback=function(clonedGuid)\r\nlocal clonedTile=getObjectFromGUID(clonedGuid)\r\nclonedTile.setLock(false)\r\nWait.time(function()\r\nclonedTile.setLock(true)\r\nclonedTile.setScale(scale)\r\nclonedTile.interactable=false\r\nlocal customization={}\r\ncustomization.image=partyInfo.tileImageUrl\r\nclonedTile.setCustomObject(customization)\r\nlocal reloadedTile=clonedTile.reload()\r\nWait.frames(|| reloadedTile.call(\"initialize\",{partyId=partyInfo.id}),5)\r\nend,2)\r\nend\r\nlocal nextSpawnPositionWorld=vectorHelpers.fromLocalToWorld(turmoilTile,transform.pos)\r\ncreateClonableObject(partyDefaultTile,nextSpawnPositionWorld,vectorHelpers.addVectors(transform.rot,turmoilTile.getRotation()),cloneCallback,true)\r\nend\r\nfunction setupTurmoilParty(turmoilTile,allPartyTransforms,partyInfo,partyIndex)\r\nlocal partyTransforms=allPartyTransforms[partyIndex]\r\nlocal partyId=partyInfo.id\r\ncreateGridSnapPoints(turmoilTile,partyTransforms.delegates)\r\ncreateSingleSnapPoint(turmoilTile,partyTransforms.partyLead)\r\ncreateSingleSnapPoint(turmoilTile,partyTransforms.tile)\r\ncreateSingleSnapPoint(turmoilTile,partyTransforms.dominance)\r\nlocal partyData={}\r\nlocal grid=matrixTwoDHelpers.createGridWithExceptions(\r\npartyTransforms.delegates.pos,\r\npartyTransforms.delegates.size2D,\r\npartyTransforms.delegates.gridVectors,\r\npartyTransforms.delegates.rot[2],\r\npartyTransforms.delegates.exceptions\r\n)\r\ncreatePartyZone(turmoilTile,grid,partyData,partyId)\r\ncreateDelegateData(turmoilTile,grid,partyData,partyId)\r\ncreatePartyLeadData(turmoilTile,partyTransforms,partyData,partyId)\r\nspawnPartyTile(turmoilTile,partyInfo,partyTransforms.tile)\r\npartyData.partyTile={id=partyId,pos=vectorHelpers.fromLocalToWorld(turmoilTile,partyTransforms.tile.pos)}\r\npartyData.dominancePosition=vectorHelpers.fromLocalToWorld(turmoilTile,partyTransforms.dominance.pos)\r\nif gameState.turmoilData.parties==nil then\r\ngameState.turmoilData.parties={}\r\nend\r\npartyData.partyIndex=partyIndex\r\npartyData.partyId=partyId\r\npartyData.isDominant=false\r\npartyData.delegateRotation=vectorHelpers.addVectors(turmoilTile.getRotation(),partyTransforms.delegates.rot)\r\ntable.insert(gameState.turmoilData.parties,partyData)\r\nend\r\nfunction createNeutralDelegates(turmoilTile,genericBag,neutralReserveTransform)\r\nlocal bagPosition=vectorHelpers.fromLocalToWorld(turmoilTile,neutralReserveTransform.pos)\r\nlocal bagRotation=neutralReserveTransform.rot\r\ncreateClonableObject(genericBag,bagPosition,bagRotation,function(clonedObjectGuid)\r\ngameState.turmoilData.neutralBagId=clonedObjectGuid\r\nlocal neutralBag=getObjectFromGUID(clonedObjectGuid)\r\nneutralBag.setColorTint({89/255,89/255,89/255})\r\nneutralBag.setName(\"Neutral Delegates\")\r\nlocal neutralDelegateCreatedCallback=function(neutralDelegateIds)\r\nbagProtector.addBagToProtectedList(neutralBag.getGUID())\r\ngameState.turmoilData.neutralDelegateIds=neutralDelegateIds\r\nfor _,guid in pairs(neutralDelegateIds) do\r\nbagProtector.addToAllowList(neutralBag.getGUID(),guid)\r\nend\r\nend\r\ncreateDelegatesForBag(neutralBag,14,\"Neutral\",neutralDelegateCreatedCallback)\r\ngameState.wasUpdated=true\r\nend)\r\nend\r\nfunction createPlayerDelegates(turmoilTile,genericBag,player,localPosition,rotation)\r\nif player.neutral then\r\nreturn\r\nend\r\nlocal bagPosition=vectorHelpers.fromLocalToWorld(turmoilTile,localPosition)\r\nlocal bagRotation=rotation\r\ncreateClonableObject(\r\ngenericBag,\r\nbagPosition,\r\nbagRotation,\r\nfunction(clonedObjectGuid)\r\nplayer.delegateBagId=clonedObjectGuid\r\nlocal playerBag=getObjectFromGUID(clonedObjectGuid)\r\nplayerBag.setColorTint(stringColorToRGB(player.color))\r\nplayerBag.setName(player.color..\" Delegates\")\r\nlocal playerDelegateCreatedCallback=function(playerDelegateIds)\r\nplayer.delegateIds=playerDelegateIds\r\nbagProtector.addBagToProtectedList(playerBag.getGUID())\r\nfor _,guid in pairs(playerDelegateIds) do\r\nbagProtector.addToAllowList(playerBag.getGUID(),guid)\r\nend\r\nend\r\ncreateDelegatesForBag(playerBag,7,player.color,playerDelegateCreatedCallback)\r\nend\r\n)\r\nend\r\nfunction setupReserve(turmoilTile,playerReserveTransform,neutralReserveTransform)\r\ncreateGridSnapPoints(turmoilTile,playerReserveTransform)\r\ncreateSingleSnapPoint(turmoilTile,neutralReserveTransform)\r\nlocal grid=matrixTwoDHelpers.createGrid(\r\nplayerReserveTransform.pos,\r\nplayerReserveTransform.size2D,\r\nplayerReserveTransform.gridVectors,\r\nplayerReserveTransform.rot[2]\r\n)\r\nlocal genericBag=gameObjectHelpers.getObjectByName(\"genericDelegateBag\")\r\ncreateNeutralDelegates(turmoilTile,genericBag,neutralReserveTransform)\r\nlocal playerIndex=1\r\nfor _,player in pairs(gameState.allPlayers) do\r\nif not player.neutral then\r\ncreatePlayerDelegates(turmoilTile,genericBag,player,grid[playerIndex],playerReserveTransform.rot)\r\nplayerIndex=playerIndex + 1\r\nend\r\nend\r\nend\r\nfunction setupLobbyArea(turmoilTile,lobbyTransform)\r\ncreateGridSnapPoints(turmoilTile,lobbyTransform)\r\nlocal grid=matrixTwoDHelpers.createGrid(\r\nlobbyTransform.pos,\r\nlobbyTransform.size2D,\r\nlobbyTransform.gridVectors,\r\nlobbyTransform.rot[2]\r\n)\r\ncreateLobbyZones(turmoilTile,grid)\r\ngameState.turmoilData.lobbyPositions=matrixTwoDHelpers.fromLocalToWorld(turmoilTile,grid)\r\nend\r\nfunction createLobbyZones(turmoilTile,grid)\r\nlocal operationId=\"LobbyZones\"\r\nlocal lobbyZones={}\r\nlocal zoneHeight=3\r\nzoneHelpers.createScriptingZoneForEachGridPoint(turmoilTile,grid,operationId,zoneHeight)\r\nWait.condition(\r\nfunction()\r\nfor i=1,#grid do\r\ntable.insert(lobbyZones,{zone=volatileData.operations[operationId].result[i],pos=vectorHelpers.fromLocalToWorld(turmoilTile,grid[i])})\r\nend\r\ngameState.turmoilData.lobbyZones=lobbyZones\r\nvolatileData.operations[operationId]=nil\r\nend,\r\nfunction() return volatileData.operations[operationId].isDone end\r\n)\r\nend\r\nfunction createGlobalEventZone(turmoilTile,transform,id,dataTable)\r\nlocal operationId=id..\"GlobalEventZone\"\r\nzoneHelpers.createScriptingZoneFromTransform(turmoilTile,transform,operationId,1,{3.0,1,4.1})\r\nWait.condition(\r\nfunction()\r\ndataTable[id]=volatileData.operations[operationId].result\r\nvolatileData.operations[operationId]=nil\r\nend,\r\nfunction() return volatileData.operations[operationId].isDone end\r\n)\r\nend\r\nfunction setupGlobalEventArea(turmoilTile,globalEventTransforms)\r\ncreateSingleSnapPoint(turmoilTile,globalEventTransforms.distant)\r\ncreateSingleSnapPoint(turmoilTile,globalEventTransforms.coming)\r\ncreateSingleSnapPoint(turmoilTile,globalEventTransforms.current)\r\ngameState.turmoilData.globalEvents={}\r\ngameState.turmoilData.globalEvents.positions={\r\ndistant=vectorHelpers.fromLocalToWorld(turmoilTile,globalEventTransforms.distant.pos),\r\ncoming=vectorHelpers.fromLocalToWorld(turmoilTile,globalEventTransforms.coming.pos),\r\ncurrent=vectorHelpers.fromLocalToWorld(turmoilTile,globalEventTransforms.current.pos)\r\n}\r\ncreateGlobalEventZone(turmoilTile,globalEventTransforms.coming,\"comingZone\",gameState.turmoilData.globalEvents)\r\ncreateGlobalEventZone(turmoilTile,globalEventTransforms.current,\"currentZone\",gameState.turmoilData.globalEvents)\r\nlocal globalEventDeck=gameObjectHelpers.getObjectByName(\"turmoilGlobalEventDeck\")\r\nglobalEventDeck.setPosition(gameState.turmoilData.globalEvents.positions.distant)\r\nglobalEventDeck.setRotation(turmoilTile.getRotation())\r\nend\r\nfunction setupGovernmentArea(turmoilTile,chairmanTransform,policyTileTransform,defaultParty)\r\ncreateSingleSnapPoint(turmoilTile,chairmanTransform)\r\ncreateSingleSnapPoint(turmoilTile,policyTileTransform)\r\ngameState.turmoilData.chairman={}\r\ngameState.turmoilData.chairman.transform={\r\npos=vectorHelpers.fromLocalToWorld(turmoilTile,chairmanTransform.pos),\r\nrot=vectorHelpers.addVectors(turmoilTile.getRotation(),chairmanTransform.rot)\r\n}\r\nlocal operationId=\"chairmanSetup\"\r\nzoneHelpers.createScriptingZoneFromTransform(turmoilTile,chairmanTransform,operationId,3)\r\nWait.condition(\r\nfunction()\r\ngameState.turmoilData.chairman.zoneGuid=volatileData.operations[operationId].result\r\nvolatileData.operations[operationId]=nil\r\nend,\r\nfunction() return volatileData.operations[operationId].isDone end\r\n)\r\nlocal partyPlate=gameObjectHelpers.getObjectByName(\"turmoilBasePartyPlate\")\r\npartyPlate.setPosition(vectorHelpers.fromLocalToWorld(turmoilTile,policyTileTransform.pos))\r\npartyPlate.setRotation(vectorHelpers.addVectors(turmoilTile.getRotation(),policyTileTransform.rot))\r\nend\r\n--\r\n-- probe.setPosition(vectorHelpers.fromLocalToWorld(turmoilTile,{-1.584223,0.05263865,-0.603043}))\r","n80":"\n\nfunction extendPlayerActivationTableau(params)\r\nlocal tmPlayer=getPlayerByColor(params.playerColor)\r\npaymentSystem.extendByResource(tmPlayer,params.resourceType,params.defaultConversionRate,params.conversionAllowedTags,params.isConstantConversionRate)\r\nend\r\nfunction getPlayerResource(params)\r\nlocal playerColor=params.playerColor\r\nlocal resourceType=string.lower(params.resourceType)\r\nlocal player=getPlayerByColor(playerColor)\r\nlocal playerMat=getObjectFromGUID(player.playerArea.playerMat)\r\nlocal resources=playerMat.call(\"getResourceStockpile\")\r\nreturn resources[resourceType]\r\nend\r\nfunction getPlayerProduction(params)\r\nlocal playerColor=params.playerColor\r\nlocal resourceType=string.lower(params.resourceType)\r\nlocal player=getPlayerByColor(playerColor)\r\nlocal playerMat=getObjectFromGUID(player.playerArea.playerMat)\r\nlocal resources=playerMat.call(\"getResourceProduction\")\r\nreturn resources[resourceType]\r\nend\r\nfunction changePlayerResource(params)\r\nlocal playerColor=params.playerColor\r\nlocal resourceType=string.lower(params.resourceType)\r\nlocal player=getPlayerByColor(playerColor)\r\nlocal playerMat=getObjectFromGUID(player.playerArea.playerMat)\r\nlocal currentAmount=playerMat.call(\"getResourceStockpile\")[resourceType]\r\nlocal delta=0\r\nif params.resourceAmount < -currentAmount then\r\ndelta=-currentAmount\r\nelse\r\ndelta=params.resourceAmount\r\nend\r\nplayerMat.call(\"changeStockpile\",{key=resourceType,amount=delta})\r\nlocal resourceValues={}\r\nresourceValues[resourceType]=delta\r\neventHandling_triggerEvent({\r\ntriggeredByColor=playerColor,\r\ntriggerType=eventData.triggerType.storageChanged,\r\nmetadata={resourceValues=resourceValues}\r\n})\r\nend\r\nfunction changePlayerProduction(params)\r\nlocal playerColor=params.playerColor\r\nlocal resourceType=string.lower(params.resourceType)\r\nlocal player=getPlayerByColor(playerColor)\r\nlocal playerMat=getObjectFromGUID(player.playerArea.playerMat)\r\nlocal currentProduction=playerMat.call(\"getResourceProduction\")[resourceType]\r\nlocal delta=params.resourceAmount\r\nif delta < 0 then\r\nif string.lower(resourceType)==\"credits\" and -delta > currentProduction + 5 then\r\ndelta=-(currentProduction + 5)\r\nelseif string.lower(resourceType)~=\"credits\" and -delta > currentProduction then\r\ndelta=-currentProduction\r\nend\r\nend\r\nplayerMat.call(\"changeProduction\",{key=resourceType,amount=delta})\r\nend\r\nfunction giveCardsToPlayer(params)\r\nlocal playerColor=params.playerColor\r\nlocal amount=params.amount\r\nlocal fromDiscardPile=params.fromDiscardPile\r\ndealProjectsToPlayer(getPlayerIndexByColor(playerColor),amount,fromDiscardPile)\r\nend\r\nfunction discardPlayerCards(params)\r\nlocal playerColor=params.playerColor\r\nlocal amount=params.amount\r\ndiscardProjectsFromPlayersHand(getPlayerIndexByColor(playerColor),amount)\r\nend\r\nfunction getOwnableObjectCount(params)\r\nlocal who=params.who or \"playerThemself\"\r\nif who==\"playerThemself\" then\r\nlocal player=getPlayerByColor(params.playerColor)\r\nreturn player.ownedObjects[params.ownableObjectName]\r\nend\r\nif who==\"allPlayers\" then\r\nlocal amount=0\r\nfor _,player in pairs(gameState.allPlayers) do\r\namount=amount + player.ownedObjects[params.ownableObjectName]\r\nend\r\nreturn amount\r\nend\r\nend\r\nfunction giveCardsToOtherPlayers(params)\r\nlocal currentPlayerColor=params.playerColor\r\nlocal amount=params.amount\r\nfor _,player in ipairs(gameState.allPlayers) do\r\nif player.color~=currentPlayerColor then\r\ndealProjectsToPlayer(getPlayerIndexByColor(player.color),amount)\r\nend\r\nend\r\nend\r\nfunction getExtendedScriptingState()\r\nreturn gameState.extendedScriptingEnabled\r\nend\r\nfunction giveObjectToPlayer(params)\r\nlocal playerColor=params.playerColor\r\nlocal objectName=params.objectName\r\nlocal isSpecialTile=params.isSpecialTile\r\nlocal metadata=params.metadata\r\nif objectName==\"city\" then\r\ndealCityTileToPlayer(getPlayerIndexByColor(playerColor))\r\nelseif objectName==\"greenery\" then\r\ndealGreeneryTileToPlayer(getPlayerIndexByColor(playerColor))\r\nelseif objectName==\"ocean\" then\r\ndealOceanToPlayer(getPlayerIndexByColor(playerColor))\r\nelseif objectName==\"animal\" then\r\ndealAnimalTokenToPlayer(getPlayerIndexByColor(playerColor))\r\nelseif objectName==\"science\" then\r\ndealScienceTokenToPlayer(getPlayerIndexByColor(playerColor))\r\nelseif objectName==\"fighter\" then\r\ndealFighterTokenToPlayer(getPlayerIndexByColor(playerColor))\r\nelseif objectName==\"ore\" then\r\ndealOreTokenToPlayer(getPlayerIndexByColor(playerColor))\r\nelseif objectName==\"microbe\" then\r\ndealMicrobeTokenToPlayer(getPlayerIndexByColor(playerColor))\r\nelseif objectName==\"floater\" then\r\ndealFloaterTokenToPlayer(getPlayerIndexByColor(playerColor))\r\nelseif objectName==\"data\" then\r\ndealDataTokenToPlayer(getPlayerIndexByColor(playerColor))\r\nelseif objectName==\"asteroid\" then\r\ndealAsteroidTokenToPlayer(getPlayerIndexByColor(playerColor))\r\nelseif objectName==\"wildCardToken\" then\r\ndealWildCardTokenToPlayer(getPlayerIndexByColor(playerColor))\r\nelseif objectName==\"resourceWildCardToken\" then\r\ndealResourceWildCardTokenToPlayer(getPlayerIndexByColor(playerColor),metadata)\r\nelseif objectName==\"productionWildCardToken\" then\r\ndealProductionWildCardTokenToPlayer(getPlayerIndexByColor(playerColor),metadata)\r\nelseif objectName==\"programableActionToken\" then\r\ndealProgramableActionToken(getPlayerIndexByColor(playerColor),metadata)\r\nelseif objectName==\"colonyMarker\" or objectName==\"playerMarker\" then\r\ndealPlayerMarkerToPlayer(getPlayerIndexByColor(playerColor))\r\nelseif objectName==\"delegate\" then\r\ndealDelegateToPlayer(getPlayerIndexByColor(playerColor))\r\nelseif objectName==\"floatingArray\" then\r\ndealFloatingArrayTileToPlayer(getPlayerIndexByColor(playerColor))\r\nelseif objectName==\"gasMine\" then\r\ndealGasMineTileToPlayer(getPlayerIndexByColor(playerColor))\r\nelseif objectName==\"venusHabitat\" then\r\ndealVenusHabitatTileToPlayer(getPlayerIndexByColor(playerColor))\r\nelseif isSpecialTile~=nil and isSpecialTile then\r\ndealSpecialTileToPlayer(getPlayerIndexByColor(playerColor),objectName)\r\nend\r\nend\r\nfunction decreaseGlobalParameter(params)\r\nlocal playerColor=params.playerColor\r\nlocal parameter=params.parameterType\r\nlocal sourceName=params.sourceName\r\nlocal reason=nil\r\nif sourceName~=nil then\r\nreason=\"player (de)activated \"..sourceName\r\nend\r\nif parameter==\"tr\" then\r\ndecreasePlayerTRByColor(playerColor,reason)\r\nelseif parameter==\"ocean\" then\r\ndecreaseOcean(playerColor)\r\nelseif parameter==\"o2\" then\r\ndecreaseO2ButtonClick(nil,playerColor)\r\nelseif parameter==\"venus\" then\r\ndecreaseVenusButtonClick(nil,playerColor)\r\nelseif parameter==\"temp\" then\r\ndecreaseTempButtonClick(nil,playerColor)\r\nend\r\nend\r\nfunction increaseGlobalParameter(params)\r\nlocal playerColor=params.playerColor\r\nlocal parameter=params.parameterType\r\nlocal sourceName=params.sourceName\r\nlocal reason=nil\r\nif sourceName~=nil then\r\nreason=\"player (de)activated \"..sourceName\r\nend\r\nif getPlayerByColor(playerColor).neutral then\r\nreturn\r\nend\r\nif parameter==\"tr\" then\r\nincreasePlayerTRByColor(playerColor,reason)\r\nelseif parameter==\"o2\" then\r\nincreaseO2ButtonClick(nil,playerColor)\r\nelseif parameter==\"temp\" then\r\nincreaseTempButtonClick(nil,playerColor)\r\nelseif parameter==\"venus\" then\r\nincreaseVenusButtonClick(nil,playerColor)\r\nelseif parameter==\"ocean\" then\r\nlogging.printToAll(getPlayerByColor(playerColor).name..\" has placed an ocean\",{1,1,1},loggingModes.essential)\r\nincreaseOcean(playerColor)\r\nend\r\nend\r\nfunction getCitiesOnMars()\r\nreturn gameState.citiesOnMars\r\nend\r\nfunction getCitiesInPlay()\r\nreturn gameState.citiesOnMars + gameState.citiesInSpace\r\nend\r\nfunction getOceansInPlay()\r\nreturn globalParameterSystem.values.ocean.value + globalParameterSystem.values.ocean.extra\r\nend\r\nfunction cardSupportFunctions_updatePlayerTags(params)\r\nlocal playedTags=params.tags\r\nlocal updateTagsAndCount={}\r\nlocal allWild=true\r\nfor i,tag in ipairs(playedTags) do\r\nif not (tag==\"WildCard\") then\r\nallWild=false\r\nbreak\r\nend\r\nend\r\nif allWild then\r\nupdateTagsAndCount[\"None\"]=1\r\nend\r\nfor i,tag in ipairs(playedTags) do\r\nif tag==\"Event\" then\r\nupdateTagsAndCount={}\r\nupdateTagsAndCount[tag]=1\r\nbreak\r\nend\r\nif updateTagsAndCount[tag]~=nil then\r\nupdateTagsAndCount[tag]=updateTagsAndCount[tag] + 1\r\nelse\r\nupdateTagsAndCount[tag]=1\r\nend\r\nend\r\ntagSystem_updatePlayerTags({playerColor=params.playerColor,tagsAndDelta=updateTagsAndCount})\r\nend\r\nfunction getPlayerTags(params)\r\nlocal tmPlayer=getPlayerByColor(params.playerColor)\r\nreturn tmPlayer.tagSystem.tagCounts[params.tagName] or 0\r\nend\r\nfunction getAllOtherPlayersTags(params)\r\nlocal tagName=params.tagName\r\nlocal currentPlayerColor=params.playerColor\r\nlocal allPlayers=gameState.allPlayers\r\nlocal totalTagCount=0\r\nfor _,tmPlayer in ipairs(allPlayers) do\r\nif tmPlayer.color~=currentPlayerColor then\r\ntotalTagCount=totalTagCount + tmPlayer.tagSystem.tagCounts[tagName]\r\nend\r\nend\r\nreturn totalTagCount\r\nend\r","n81":"function updatePlayerTagsViaObject(params)\nlocal playerColor=params.playerColor\nlocal tagsAndDelta=params.tagsAndDelta\nupdatePlayersPlayedTags(playerColor,tagsAndDelta,{tagsAndDelta.tag})\nend\nfunction updatePlayersOwnedObjects(params)\nlocal playerColor=params.playerColor\nlocal delta=params.delta\nlocal objectName=params.objectName\nchangeOwnedObjectAmount(playerColor,objectName,delta)\nif ownableObjects.specialTileMappings.aliases[objectName]~=nil then\nfor _,alias in pairs(ownableObjects.specialTileMappings.aliases[objectName]) do\nchangeOwnedObjectAmount(playerColor,alias,delta)\nend\nend\nend","n82":"researchPhaseFunctions={}\nresearchPhaseFunctions.drafting={}\nfunction researchPhaseFunctions_updatePlayerDraft(params)\nlocal player=getPlayerByColor(params.playerColor)\nplayer.hasDraftPassed=params.draftPass\nif params.draftPass then\nresearchPhaseFunctions.drafting.performDraftStep(draftingData.researchPhase.defaultRule)\nend\nif player.hasDraftPassed and gameState.drafting.done then\ngetObjectFromGUID(player.playerArea.playerMat).call(\"resetDraft\")\nif gameState.drafting.done then\nlogging.printToAll(\"Drafting is considered done. Nothing else to do.\")\nend\nend\nend\nfunction researchPhaseFunctions_changeDraftingDirection(params)\nresearchPhaseFunctions.drafting.switchDraftingDirection(params.direction)\nend\nresearchPhaseFunctions.beginResearchPhase=function(draftingRule)\ngameState.currentPhase=phases.draftingPhase\nresearchPhaseFunctions.drafting.switchDraftingDirection(-gameState.drafting.draftingDirection)\ngameState.drafting.currentStep=1\ngameState.drafting.currentSubStep=1\ngameState.drafting.done=false\ngameState.drafting.currentDraftingRule=draftingRule\nif not draftingRule.freeDraft then\nif draftingRule.draftingSteps[gameState.drafting.currentStep].directionOverride then\nresearchPhaseFunctions.drafting.switchDraftingDirection(draftingRule.draftingSteps[gameState.drafting.currentStep].directionOverride)\nend\nend\nresearchPhaseFunctions.dealCards()\nend\nresearchPhaseFunctions.drafting.performDraftStep=function()\nif gameState.drafting.done then return end\nlocal draftingRule=gameState.drafting.currentDraftingRule\nlocal exit=false\nfor index,player in pairs(gameState.allPlayers) do\nif not player.neutral then\nif not player.hasDraftPassed or not researchPhaseFunctions.drafting.passCardsAllowed(player.color,draftingRule) then\nexit=true\nend\nend\nend\nif exit and not gameState.drafting.ignoreRules then return end\nlocal currentDraftingSteps=draftingRule.draftingSteps[gameState.drafting.currentStep]\nlocal direction=gameState.drafting.draftingDirection\nresearchPhaseFunctions.drafting.passCards(direction)\nif draftingRule.freeDraft then return end\ngameState.drafting.currentSubStep=gameState.drafting.currentSubStep + 1\nif currentDraftingSteps.subSteps[gameState.drafting.currentSubStep]==nil then\ngameState.drafting.currentSubStep=1\ngameState.drafting.currentStep=gameState.drafting.currentStep + 1\nif draftingRule.draftingSteps[gameState.drafting.currentStep]==nil then\ngameState.drafting.done=true\nreturn\nend\nif draftingRule.draftingSteps[gameState.drafting.currentStep].directionOverride then\nresearchPhaseFunctions.drafting.switchDraftingDirection(draftingRule.draftingSteps[gameState.drafting.currentStep].directionOverride)\nend\nWait.frames(|| researchPhaseFunctions.dealCards(),5)\nend\nend\nresearchPhaseFunctions.drafting.passCards=function(direction)\nlocal cardsToMove={}\nfor index,player in pairs(gameState.allPlayers) do\ncardsToMove[index]=Player[player.color].getHandObjects()\nend\nlocal updatedCardGuidsInDraft={}\nfor index,player in pairs(gameState.allPlayers) do\nif not player.neutral then\nlocal moveToIndex=index + direction\nif not gameState.isSoloGame then\nif moveToIndex > #gameState.allPlayers then\nmoveToIndex=1\nelseif moveToIndex < 1 then\nmoveToIndex=#gameState.allPlayers\nend\nelse\nmoveToIndex=1\nend\nupdatedCardGuidsInDraft[moveToIndex]={}\nfor _,card in pairs(cardsToMove[index]) do\nlocal nextPlayer=gameState.allPlayers[moveToIndex]\ntable.insert(updatedCardGuidsInDraft[moveToIndex],card.getGUID())\ncard.setRotation(getObjectFromGUID(nextPlayer.playerArea.playerMat).getRotation())\nWait.frames(function() card.setPosition(Player[nextPlayer.color].getHandTransform().position) end,1)\nend\ngetObjectFromGUID(player.playerArea.playerMat).call(\"resetDraft\")\nplayer.hasDraftPassed=false\nend\nend\ngameState.drafting.cardsInDraft=updatedCardGuidsInDraft\nend\nresearchPhaseFunctions.drafting.switchDraftingDirection=function(direction)\nif direction==nil or direction==0 then\ngameState.drafting.draftingDirection=-gameState.drafting.draftingDirection\nelse\ngameState.drafting.draftingDirection=direction\nend\nfor _,player in pairs(gameState.allPlayers) do\nlocal playerMat=getObjectFromGUID(player.playerArea.playerMat)\nplayerMat.call(\"updateDraftingArrowDirection\",{direction=gameState.drafting.draftingDirection})\nend\nend\nresearchPhaseFunctions.drafting.passCardsAllowed=function(playerColor,draftingRule)\nif draftingRule.freeDraft then return true end\nlocal currentDraftingSteps=draftingRule.draftingSteps[gameState.drafting.currentStep]\nif currentDraftingSteps==nil then return false end\nlocal draftingCardRule=currentDraftingSteps.subSteps[gameState.drafting.currentSubStep]\nif draftingCardRule==nil then return false end\nlocal cardGuids={}\nlocal cardsToHandOver=0\nif type(draftingCardRule)==\"table\" then\nfor key,amount in pairs(draftingCardRule) do\ncardsToHandOver=cardsToHandOver + amount\nif key==\"preludes\" then\ncardGuids=tableHelpers.combineSingleValueTables({cardGuids,researchPhaseFunctions.drafting.getSpecificCardsInHand(playerColor,{\"%(P%)\"})})\nelseif key==\"corps\" then\ncardGuids=tableHelpers.combineSingleValueTables({cardGuids,researchPhaseFunctions.drafting.getSpecificCardsInHand(playerColor,{\"%(C%)\"})})\nelse\ncardGuids=tableHelpers.combineSingleValueTables({cardGuids,researchPhaseFunctions.drafting.getSpecificCardsInHand(playerColor,{\"%(G%)\",\"%(E%)\",\"%(B%)\"})})\nend\nend\nelse\ncardGuids=researchPhaseFunctions.drafting.getSpecificCardsInHand(playerColor,{\"%(G%)\",\"%(E%)\",\"%(B%)\"})\ncardsToHandOver=draftingCardRule\nend\nlocal counter=0\nfor _,cardGuid in pairs(cardGuids) do\nif tableHelpers.contains(gameState.drafting.cardsInDraft[getPlayerIndexByColor(playerColor)],cardGuid) then\ncounter=counter + 1\nend\nend\nif counter < cardsToHandOver then\nlogging.printToAll(\"Player tried to pass,but can only keep \"..(cardsToHandOver-#cardGuids)..\" of the following cards\")\nfor i,guid in pairs(gameState.drafting.cardsInDraft[getPlayerIndexByColor(playerColor)]) do\nif not tableHelpers.contains(cardGuids,guid) then\nlogging.printToAll(getObjectFromGUID(guid).getName())\nend\nend\nreturn false\nelseif cardsToHandOver~=#cardGuids or counter > cardsToHandOver then\nreturn false\nend\nreturn true\nend\nresearchPhaseFunctions.drafting.getSpecificCardsInHand=function(playerColor,filterTable)\nlocal cardGuids={}\nfor _,object in pairs(Player[playerColor].getHandObjects()) do\nif object.tag==\"Card\" then\nfor _,pattern in pairs(filterTable) do\nif string.match(object.getName(),pattern) then\ntable.insert(cardGuids,object.getGUID())\nbreak\nend\nend\nend\nend\nreturn cardGuids\nend\nresearchPhaseFunctions.dealCards=function()\nfunction researchPhaseFunctions_dealCardsCoroutine()\nlocal waitCounter=0\nwhile waitCounter < 15 do\nwaitCounter=waitCounter + 1\nif transientState.creatingPlayer or transientState.removingPlayer then\nwaitCounter=0\nend\ncoroutine.yield(0)\nend\ngameState.drafting.cardsInDraft={}\nlocal draftingRule=gameState.drafting.currentDraftingRule\nlocal draftingStep=draftingRule.draftingSteps[gameState.drafting.currentStep]\nfor playerIndex,player in pairs(gameState.allPlayers) do\nif not player.neutral then\ngameState.drafting.cardsInDraft[playerIndex]={}\nlocal blockedHands={}\nfor type,amountAndTargetIndex in pairs(draftingStep.cardsToDeal) do\ntable.insert(blockedHands,amountAndTargetIndex.targetHandIndex)\nend\nfor _,blockedIndex in pairs(blockedHands) do\nlocal nonBlockedHandIndex=blockedIndex\nwhile tableHelpers.contains(blockedHands,nonBlockedHandIndex) do\nnonBlockedHandIndex=nonBlockedHandIndex + 1\ncoroutine.yield(0)\nend\nfor _,object in pairs(Player[player.color].getHandObjects(blockedIndex)) do\nobject.setPosition(Player[player.color].getHandTransform(nonBlockedHandIndex).position)\nend\nend\nfor i=1,3 do coroutine.yield(0) end\nfor type,amountAndTargetIndex in pairs(draftingStep.cardsToDeal) do\nlocal wereCardsDealt=false\nif type==\"projects\" then\nfor i=1,amountAndTargetIndex.amount + player.drafting.extraDraftCardsDealt do\ndealProjectsToPlayer(playerIndex,1,false,amountAndTargetIndex.targetHandIndex)\nend\nelseif type==\"preludes\" and gameState.activeExpansions.prelude then\nfor i=1,amountAndTargetIndex.amount do\nlocal preludeDeck=gameObjectHelpers.getObjectByName(\"preludeDeck\")\npreludeDeck.deal(1,player.color,amountAndTargetIndex.targetHandIndex)\nend\nelseif type==\"corps\" then\nfor i=1,amountAndTargetIndex.amount do\nlocal corpDeck=gameObjectHelpers.getObjectByName(\"corpDeck\")\ncorpDeck.deal(1,player.color,amountAndTargetIndex.targetHandIndex)\nend\nend\nend\nend\nend\nfor playerIndex,player in pairs(gameState.allPlayers) do\nfor type,amountAndTargetIndex in pairs(draftingStep.cardsToDeal) do\nif type~=\"preludes\" or gameState.activeExpansions.prelude then\nlocal counter=25\nwhile counter > 1 do\ncounter=counter - 1\nif dealingInProgress or #Player[player.color].getHandObjects(amountAndTargetIndex.targetHandIndex)==0 then counter=25 end\ncoroutine.yield(0)\nend\nfor _,object in pairs(Player[player.color].getHandObjects(amountAndTargetIndex.targetHandIndex)) do\nif not tableHelpers.contains(gameState.drafting.cardsInDraft[playerIndex],object.getGUID()) then\ntable.insert(gameState.drafting.cardsInDraft[playerIndex],object.getGUID())\nelse\nlog(\"Something broke...\")\nend\nend\nend\nend\nend\nreturn 1\nend\nstartLuaCoroutine(self,\"researchPhaseFunctions_dealCardsCoroutine\")\nend","n83":"gameMap=hexMapHelpers.makeMapComputeFriendly(predefinedMaps.baseMap)\nvenusMap=nil\nfunction hexMap_applyPlacementBonuses(params)\nlocal position=params.position\nlocal playerColor=params.playerColor\nlocal tmPlayer=getPlayerByColor(playerColor)\nlocal tileObject=params.tileObject\nlocal object=params.object\nlocal ignorePlacementEffects=params.ignorePlacementEffects\nlocal ignoreSpecificEffects=params.ignoreEffects or {}\nlocal mapInfos=getMapInfos(position)\nif mapInfos==nil then\nreturn true\nend\nlocal isAllowed=true\nif playerColor==nil then\nregisterObjectOnTile(mapInfos,position,tileObject)\nelse\nif object~=nil then\nlocal tmPlayer=getPlayerByColor(playerColor)\nif not cardActivationRules.rules.notInAnyHandZoneRule(tmPlayer,object) then\nreturn false\nend\nend\nlocal placementProperties={}\nlocal adjacenyPlacementProperties={}\nif not tmPlayer.neutral and gameState.extendedScriptingEnabled and gameState.currentPhase~=phases.solarPhase then\nlocal returnValues=applyTileEffects(mapInfos,position,playerColor,tileObject,ignorePlacementEffects,ignoreSpecificEffects)\nisAllowed=returnValues.isAllowed\nallPlacementProperties=returnValues.placementProperties\nadjacenyPlacementProperties=returnValues.adjacenyPlacementProperties\nend\nif isAllowed then\nregisterObjectOnTile(mapInfos,position,tileObject)\neventHandling_triggerEvent({triggeredByColor=playerColor,\ntriggerType=mapInfos.triggerType,\nmetadata={placementProperties=allPlacementProperties,\nadjacenyPlacementProperties=adjacenyPlacementProperties,\ntileObject=tileObject,\nposition=position}} )\nend\nend\ngameMap.metadata.wasUpdated=true\nreturn isAllowed\nend\nfunction getMapInfos(position)\nlocal marsTileMap=gameObjectHelpers.getObjectByName(\"gameMap\")\nlocal venusMapTile=gameObjectHelpers.getObjectByName(\"venusMapTile\")\nif gameMap~=nil and hexMapHelpers.isOnMapTile(gameMap,position,marsTileMap)==true then\nreturn {map=gameMap,mapTile=marsTileMap,triggerType=eventData.triggerType.marsTilePlaced}\nelseif venusMap~=nil and hexMapHelpers.isOnMapTile(venusMap,position,venusMapTile)==true then\nreturn {map=venusMap,mapTile=venusMapTile,triggerType=eventData.triggerType.venusTilePlaced}\nelse\nreturn nil\nend\nend\nfunction hexMap_removeTileObject(params)\nlocal position=params.position\nlocal playerColor=params.playerColor\nlocal tileObject=params.tileObject\nlocal mapInfos=getMapInfos(position)\nif mapInfos==nil then\nreturn true\nend\nlocal isAllowed=true\nif gameState.extendedScriptingEnabled and gameState.currentPhase~=phases.solarPhase and not params.ignorePlacementEffects then\nisAllowed=undoTileEffects(mapInfos,position,playerColor)\nend\nif isAllowed then\nunregisterObjectOnTile(mapInfos,position,tileObject)\nend\ngameMap.metadata.wasUpdated=true\nreturn isAllowed\nend\nfunction hexMap_getNeighbours(params)\nreturn hexMapHelpers.getNeighboursFromIndices(gameMap,params.indices)\nend\nfunction hexMap_getTiles(params)\nif params~=nil then\nif params.mapName==\"marsMap\" then\nreturn gameMap.tiles\nelseif params.mapName==\"venusMap\" then\nreturn venusMap.tiles\nend\nend\nreturn gameMap.tiles\nend\nfunction undoTileEffects(mapInfos,position,playerColor)\nlocal map=mapInfos.map\nlocal mapTile=mapInfos.mapTile\nlocal tile=hexMapHelpers.getTileFromWorldCoordinates(map,position,mapTile)\nlocal placementProperties={}\nif tile~=nil and #tile.tileObjects==1 then\nplacementProperties=tableHelpers.deepCloneTable(tile.placementProperties)\nend\nif placementProperties.resourceValues==nil then\nplacementProperties.resourceValues={}\nend\nif placementProperties.productionValues==nil then\nplacementProperties.productionValues={}\nend\nlocal adjacenyEffects=getAdjacencyEffects(map,position,mapTile)\nplacementProperties=combinePlacementEffects(placementProperties,adjacenyEffects)\nplacementProperties.effects={}\nfor key,value in pairs(placementProperties.resourceValues) do\nplacementProperties.resourceValues[key]=-value\nend\nfor key,value in pairs(placementProperties.productionValues) do\nplacementProperties.productionValues[key]=-value\nend\nlocal isAllowed=Global.call(\"objectActivationSystem_doAction\",{activationEffects=placementProperties,sourceName=\"tile placement\",playerColor=playerColor,object=nil})\nreturn isAllowed\nend\nfunction applyTileEffects(mapInfos,position,playerColor,tileObject,ignorePlacementEffects,ignoreSpecificEffects)\nlocal map=mapInfos.map\nlocal mapTile=mapInfos.mapTile\nlocal tile=hexMapHelpers.getTileFromWorldCoordinates(map,position,mapTile)\nlog(tile)\nlocal placementProperties={}\nif not ignorePlacementEffects then\nif tile~=nil and (tile.tileObjects==nil or #tile.tileObjects==0 ) then\nplacementProperties=tableHelpers.deepCloneTable(tile.placementProperties)\nend\nend\nif placementProperties.resourceValues==nil then\nplacementProperties.resourceValues={}\nend\nif placementProperties.productionValues==nil then\nplacementProperties.productionValues={}\nend\nif placementProperties.effects==nil then\nplacementProperties.effects={}\nend\nlocal adjacenyEffects=getAdjacencyEffects(map,position,mapTile,ignoreSpecificEffects)\nplacementProperties=combinePlacementEffects(placementProperties,adjacenyEffects)\nif #ignoreSpecificEffects > 0 then\nlocal cleanedUpEffects={}\nfor _,effect in pairs(placementProperties.effects) do\nlocal ignore=false\nfor _,ignoredEffect in pairs(ignoreSpecificEffects) do\nif effect==ignoredEffect then\nignore=true\nend\nend\nif not ignore then\ntable.insert(cleanedUpEffects,effect)\nend\nend\nplacementProperties.effects=cleanedUpEffects\nend\nif not handleHazardTiles(map,position,mapTile,playerColor) then\nreturn {isAllowed=false,placementProperties=placementProperties,adjacenyPlacementProperties=adjacenyEffects}\nend\nlocal isAllowed=Global.call(\"objectActivationSystem_doAction\",{activationEffects=placementProperties,sourceName=\"tile placement\",playerColor=playerColor,object=nil})\nreturn {isAllowed=isAllowed,placementProperties=placementProperties,adjacenyPlacementProperties=adjacenyEffects}\nend\nfunction handleHazardTiles(map,position,mapTile,playerColor)\nlocal tile=hexMapHelpers.getTileFromWorldCoordinates(map,position,mapTile,playerColor)\nif tile~=nil and tile.tileObjects~=nil  then\nfor _,tileObject in pairs(tile.tileObjects) do\nif tileObject.objectName==\"Duststorm\" or tileObject.objectName==\"Erosion\" then\nlocal result=getObjectFromGUID(tileObject.guid).call(\"deactivateObjectRemotely\",{playerColor=playerColor})\nreturn result\nend\nend\nend\nreturn true\nend\nfunction getAdjacencyEffects(map,position,mapTile,ignoreSpecificEffects)\nlocal adjacenyEffects={}\nfor _,neighbourTile in pairs(hexMapHelpers.getNeighboursFromWorldCoordinates(map,position,mapTile)) do\nif neighbourTile.tileObjects~=nil and next(neighbourTile.tileObjects)~=nil then\nfor _,tileObject in pairs(neighbourTile.tileObjects) do\nfor effectType,keyValuePairs in pairs(tableHelpers.deepClone(tileObject.adjacenyEffects)) do\naddAdjacencyEffect(adjacenyEffects,effectType,keyValuePairs,tileObject.objectName)\nend\nend\nelseif neighbourTile.adjacenyEffects~=nil then\nfor effectType,keyValuePairs in pairs(tableHelpers.deepClone(neighbourTile.adjacenyEffects)) do\naddAdjacencyEffect(adjacenyEffects,effectType,keyValuePairs,\"tile\")\nend\nend\nend\nreturn adjacenyEffects\nend\nfunction addAdjacencyEffect(adjacenyEffects,effectType,keyValuePairs,sourceName)\nif adjacenyEffects[sourceName]~=nil then\nfor key,value in pairs(keyValuePairs) do\nif tonumber(key)~=nil then\nif adjacenyEffects[sourceName][\"effects\"]==nil then\nadjacenyEffects[sourceName][\"effects\"]={}\nend\ntable.insert(adjacenyEffects[sourceName][\"effects\"],value)\nelse\nif adjacenyEffects[sourceName][effectType]==nil then\nadjacenyEffects[sourceName][effectType]={}\nend\nif adjacenyEffects[sourceName][effectType][key]~=nil then\nadjacenyEffects[sourceName][effectType][key]=adjacenyEffects[sourceName][effectType][key] + value\nelse\nadjacenyEffects[sourceName][effectType][key]=value\nend\nend\nend\nelse\nadjacenyEffects[sourceName]={}\nadjacenyEffects[sourceName][effectType]=keyValuePairs\nend\nend\nfunction combinePlacementEffects(placementProperties,adjacenyEffects)\nlocal combinedProperties=placementProperties\nfor tileObjectName,effects in pairs(adjacenyEffects) do\nfor effectType,keyValuePairs in pairs(effects) do\nif combinedProperties[effectType]~=nil then\nfor key,value in pairs(keyValuePairs) do\nif tonumber(key)~=nil then\ntable.insert(combinedProperties[\"effects\"],value)\nelse\nif combinedProperties[effectType][key]~=nil then\ncombinedProperties[effectType][key]=combinedProperties[effectType][key] + value\nelse\ncombinedProperties[effectType][key]=value\nend\nend\nend\nelse\ncombinedProperties[effectType]=keyValuePairs\nend\nend\nend\nreturn combinedProperties\nend\nfunction registerObjectOnTile(mapInfos,position,tileObject)\nlocal map=mapInfos.map\nlocal mapTile=mapInfos.mapTile\nlocal tile=hexMapHelpers.getTileFromWorldCoordinates(map,position,mapTile)\nif tile==nil then\nreturn\nend\nif tile.tileObjects==nil then\ntile.tileObjects={}\nend\ntable.insert(tile.tileObjects,tileObject)\nmap.metadata.wasUpdated=true\nend\nfunction unregisterObjectOnTile(mapInfos,position,tileObject,mapTile)\nlocal map=mapInfos.map\nlocal mapTile=mapInfos.mapTile\nlocal tile=hexMapHelpers.getTileFromWorldCoordinates(map,position,mapTile)\nif tile==nil then\nreturn\nend\nfor index,obj in pairs(tile.tileObjects) do\nif obj.guid==tileObject.guid then\ntable.remove(tile.tileObjects,index)\nend\nend\nend","n84":"mapGeneratorFunctions={}\n--   choose between custom map or predefined map\n--   if predefined:\n--\n--     - titanium (tileEffect - value between 0 and 100,sum is 100)\n--     - energy (tileEffect - value between 0 and 100,sum is 100)\n--     - regular tiles (tile - value between 0 and 100,sum is 100 - e.g. only one effect like card draw,plants,etc.)\n--     - number of initial erosions (min 0,max 5) if ares\n--\n--     - number of oxygen steps\n--   global parameter bonus configuration:\n--         --> bonuses need to be at least 2 steps apart (a practical limitation)\n--              (select resourceType and amount,can be negative),can be done several times --> needs custom token with description/tooltip","n85":"\nscriptVersion=1\r\nlastClonedSelfGuid=nil\r\nloadCallback=nil\r\nsaveCallback=nil\r\ndefaultObjectState={wasUpdated=true}\r\nfunction onLoad(save_state)\r\nif save_state~=nil and save_state~=\"\" then\r\nlocal loaded_data=JSON.decode(save_state)\r\nif loaded_data.scriptVersion~=scriptVersion then\r\nsave_sate=nil\r\nend\r\nend\r\nif save_state~=nil and save_state~=\"\" then\r\nlocal loaded_data=JSON.decode(save_state)\r\nobjectState=loaded_data.objectState\r\nif type(loadCallback)==\"function\" then\r\nloadCallback(true)\r\nend\r\nelse\r\nobjectState=defaultObjectState\r\nif type(loadCallback)==\"function\" then\r\nloadCallback(false)\r\nend\r\nend\r\nend\r\nfunction onSave()\r\nif not objectState.wasUpdated then\r\nreturn\r\nend\r\nif type(saveCallback)==\"function\" then\r\nsaveCallback()\r\nend\r\nobjectState.wasUpdated=false\r\nreturn JSON.encode({objectState=objectState,scriptVersion=scriptVersion})\r\nend\r","n86":"\ntimerButtons={}\ntimerButtons.buttonInfos={\n{\nclick_function='timerButtons_pauseUnpauseTimer',\nlabel='Pause timer',\nfunction_owner=Global,\nposition={0.00,0.15,-0.3},\nrotation={0,0,0},\nwidth=2500,\nheight=500,\nfont_size=200,\nscale={0.2,1,0.2},\ncolor={1,155/255,25/255},\nid=\"isPaused\"},\n{\nclick_function='timerButtons_changeSecondsPlusPerGeneration',\nlabel='End Generation: 120s',\nbaseLabel=\"End Generation: \",\nfunction_owner=Global,\nposition={-1.4,0.15,0.00},\nrotation={0,0,0},\nwidth=2500,\nheight=500,\nfont_size=200,\nscale={0.2,1,0.2},\ncolor={1,155/255,25/255},\nid=\"secondsPlusPerGeneration\"},\n{\nclick_function='timerButtons_changeSecondsPerEndTurn',\nlabel='End Turn: 15s',\nbaseLabel=\"End Turn: \",\nfunction_owner=Global,\nposition={0,0.15,0.00},\nrotation={0,0,0},\nwidth=2500,\nheight=500,\nfont_size=200,\nscale={0.2,1,0.2},\ncolor={1,155/255,25/255},\nid=\"secondsPlusPerEndTurn\"},\n{\nclick_function='timerButtons_changeSecondsInitial',\nlabel='Starting Time: 1200s',\nbaseLabel=\"Starting Time: \",\nfunction_owner=Global,\nposition={1.4,0.15,0.00},\nrotation={0,0,0},\nwidth=2500,\nheight=500,\nfont_size=200,\nscale={0.2,1,0.2},\ncolor={1,155/255,25/255},\nid=\"secondsInitial\"},\n{\nclick_function='timerButtons_changeNegativeVpThreshold',\nlabel='',\ntooltip=\"Only has an effect with timeout action 'Negative VPs'\",\nfunction_owner=Global,\nposition={1.4,0.15,0.30},\nrotation={0,0,0},\nwidth=2500,\nheight=500,\nfont_size=200,\nscale={0.2,1,0.2},\ncolor={1,155/255,25/255},\ndynamicLabel={prefix=\"Negative VP Threshold:\\n\",\nvalue={\"transientState.timerConfiguration.negativeVpThreshold\",\"gameConfig.timerConfiguration.negativeVpThreshold\"},\nsuffix=\"s\"}},\n{\nclick_function='timerButtons_changeSecondsPerNegativeVp',\nlabel='',\ntooltip=\"Only has an effect with timeout action 'Negative VPs'\",\nfunction_owner=Global,\nposition={0.00,0.15,0.30},\nrotation={0,0,0},\nwidth=2500,\nheight=500,\nfont_size=200,\nscale={0.2,1,0.2},\ncolor={1,155/255,25/255},\ndynamicLabel={prefix=\"Seconds Per Negative VP:\\n\",\nvalue={\"transientState.timerConfiguration.secondsPerNegativeVp\",\"gameConfig.timerConfiguration.secondsPerNegativeVp\"},\nsuffix=\"s\"}},\n{\nclick_function='timerButtons_changeTimeoutAction',\nlabel='On Time Elapsed: Do nothing',\nfunction_owner=Global,\nposition={1.4,0.15,-0.3},\nrotation={0,0,0},\nwidth=2500,\nheight=500,\nfont_size=175,\nscale={0.2,1,0.2},\ncolor={1,155/255,25/255},\nid=\"timeoutAction\"},\n{\nclick_function='timerButtons_changeFactor',\nlabel='1',\nbaseLabel=\"\",\ntooltip=\"Amount of seconds added/subtracted when modifying timer values.\",\nfunction_owner=Global,\nposition={-1.6,0.15,-0.75},\nrotation={0,0,0},\nwidth=850,\nheight=500,\nfont_size=300,\nscale={0.2,1,0.2},\ncolor={1,155/255,25/255},\nid=\"delta\"},\n{\nclick_function='timerButtons_togglePauseOnDraft',\nlabel='Pause on draft',\nbaseLabel=\"\",\ntooltip=\"\",\nfunction_owner=Global,\nposition={-1.4,0.15,-0.3},\nrotation={0,0,0},\nwidth=2500,\nheight=500,\nfont_size=200,\nscale={0.2,1,0.2},\ncolor={1,155/255,25/255},\nonIndex=\"gameState.timerConfiguration.pauseOnDraft\"},\n{\nclick_function=\"noOperation\",\nlabel=\"i\",\ntooltip=\"Remarks about the timer settings:\\n\"..\n\"- Sum of 'End Generation' seconds and six times 'End Turn' seconds must add up to at least 120 seconds.\\n\"..\n\"    This shall avoid situations where players are completely knocked out of the game.\\n\"..\n\"- Timer starts counting for the first player as soon as 'Start Nth generation' is pressed.\\n\"..\n\"- After the game has started changes to the timer configuration will only apply with the start of the next generation.\\n\"..\n\"    This shall avoid abuse of the timer settings tile.\",\nfunction_owner=Global,\nposition={-2.1,0.15,-0.75},\nrotation={0,0,0},\nwidth=500,\nheight=500,\nfont_size=420,\nscale={0.2,1,0.2},\ncolor={1,155/255,25/255},\n}\n}\ntimerButtons.updateButtons=function()\nlocal timerTile=gameObjectHelpers.getObjectByName(\"timerConfigTile\")\nlocal fromScratch=timerTile.getButtons()==nil\nlocal buttonAmount=0\nlocal timerConfiguration=timerFunctions.getTimerConfiguration()\nfor i,buttonInfo in pairs(timerButtons.buttonInfos) do\nbuttonInfo.index=buttonAmount\nif buttonInfo.id==\"timeoutAction\" then\nif timerConfiguration.timeoutAction==\"doNothing\" then\nbuttonInfo.label=\"Timeout Action: Do Nothing\"\nbuttonInfo.tooltip=\"Nothing will happen if time runs out for a player.\\n\"..\n\"Time will continue ticking away into negative.\"\nelseif timerConfiguration.timeoutAction==\"endTurn\" then\nbuttonInfo.label=\"Timeout Action: End Turn\"\nbuttonInfo.tooltip=\"If time runs out a player automatically ends their turn.\\n\"..\n\"If added time from 'End Turn' is 0 then that player will pass for the remaining generation.\\n\"\nelseif timerConfiguration.timeoutAction==\"giveNegativeVPs\" then\nbuttonInfo.label=\"Timeout Action: Negative VPs\"\nbuttonInfo.tooltip=\"Get negative VPs at the end of the game if your timer is below the threshold.\\n\"\nend\nelseif buttonInfo.id==\"isPaused\" then\nif timerConfiguration.isPaused then\nbuttonInfo.label=\"Timer is currently paused\"\nelse\nbuttonInfo.label=\"Click to pause the timer\"\nend\nelse\nfor settingName,value in pairs(timerConfiguration) do\nif settingName==buttonInfo.id then\nbuttonInfo.label=buttonInfo.baseLabel..value..\"s\"\nend\nend\nend\nif fromScratch then\ntimerTile.createButton(buttonInfo)\nelse\ntimerTile.editButton(buttonInfo)\nend\nbuttonAmount=buttonAmount + 1\nend\nbuttonFunctions.createButtons(timerTile,timerButtons.buttonInfos)\nend\nfunction timerButtons_pauseUnpauseTimer(obj,playerColor,altClick)\ntimerFunctions.pauseUnpauseTimer()\ntimerButtons.updateButtons()\nend\nfunction timerButtons_changeSecondsPlusPerGeneration(obj,playerColor,altClick)\nlocal sign=altClick and -1 or 1\ntimerFunctions.changeConfigValue(\"secondsPlusPerGeneration\",sign,0,3600)\ntimerButtons.updateButtons()\nend\nfunction timerButtons_changeSecondsPerEndTurn(obj,playerColor,altClick)\nlocal sign=altClick and -1 or 1\ntimerFunctions.changeConfigValue(\"secondsPlusPerEndTurn\",sign,0,300)\ntimerButtons.updateButtons()\nend\nfunction timerButtons_changeSecondsInitial(obj,playerColor,altClick)\nlocal sign=altClick and -1 or 1\ntimerFunctions.changeConfigValue(\"secondsInitial\",sign,120,36000)\ntimerButtons.updateButtons()\nend\nfunction timerButtons_changeFactor(obj,playerColor,altClick)\ntimerFunctions.changeFactor(altClick)\ntimerButtons.updateButtons()\nend\nfunction timerButtons_changeTimeoutAction(obj,playerColor,altClick)\nlocal sign=altClick and -1 or 1\ntimerFunctions.toggleTimeoutAction(sign)\ntimerButtons.updateButtons()\nend\nfunction timerButtons_togglePauseOnDraft(_,_,_)\nlocal timerConfiguration=timerFunctions.getTimerConfiguration()\ntimerConfiguration.pauseOnDraft=not timerConfiguration.pauseOnDraft\nif gameState.timerConfiguration==nil then\ngameState.timerConfiguration={}\nend\ngameState.timerConfiguration.pauseOnDraft=timerConfiguration.pauseOnDraft\ntimerButtons.updateButtons()\nend\nfunction timerButtons_changeSecondsPerNegativeVp(_,_,altClick)\nlocal sign=altClick and -1 or 1\ntimerFunctions.changeConfigValue(\"secondsPerNegativeVp\",sign,10,600)\ntimerButtons.updateButtons()\nend\nfunction timerButtons_changeNegativeVpThreshold(_,_,altClick)\nlocal sign=altClick and -1 or 1\ntimerFunctions.changeConfigValue(\"negativeVpThreshold\",sign,-3600,0)\ntimerButtons.updateButtons()\nend","n87":"timerFunctions={}\ntimerFunctions.setupTimer=function()\nlocal timerConfigTile=gameObjectHelpers.getObjectByName(\"timerConfigTile\")\ntimerConfigTile.setPositionSmooth(tablePositions.gameBoardAssets.timerTile.pos)\ntimerConfigTile.setRotation(tablePositions.gameBoardAssets.timerTile.rot)\ntimerButtons.updateButtons()\nend\ntimerFunctions.initializeTimer=function(inputConfig)\ngameState.timerConfiguration=tableHelpers.deepClone(inputConfig)\ntransientState.timerConfiguration=tableHelpers.deepClone(inputConfig)\nfor _,player in pairs(gameState.allPlayers) do\nplayer.timer={time=gameConfig.timerConfiguration.secondsInitial,isRunning=false}\nend\ngameState.allPlayers[gameState.firstPlayer].timer.isRunning=true\ntimerFunctions.startTimer()\nend\ntimerFunctions.getFormattedRemainingTimeForPlayer=function(player)\nif player.neutral then\nreturn\nend\nlocal remainingTime=player.timer.time\nlocal prefix=\"\"\nif remainingTime < 0 then\nremainingTime=remainingTime * -1\nprefix=\"-\"\nend\nlocal remainingMinutes=tostring(math.floor(remainingTime/60))\nlocal remainingSeconds=tostring(remainingTime % 60)\nreturn string.format(prefix..\"%02d:\",remainingMinutes)..string.format(\"%02d\",remainingSeconds)\nend\ntimerFunctions.startTimer=function()\nfunction runTimerCoroutine()\nlocal oldTime=Time.time\nwhile true do\nfor i=1,10 do\ncoroutine.yield(0)\nend\nlocal newTime=Time.time\nif not gameState.timerConfiguration.isPaused then\nif gameState.currentPhase==phases.generationPhase then\nfor i,player in pairs(gameState.allPlayers) do\nif not player.neutral and player.timer.isRunning then\nplayer.timer.time=player.timer.time - (newTime - oldTime)\nupdatePlayerName(i)\nif player.timer.time < 0 then\ntimerFunctions.onTimerRunsOut(player)\nend\nend\nend\nelseif gameState.currentPhase==phases.draftingPhase and not gameState.timerConfiguration.pauseOnDraft then\nfor i,player in pairs(gameState.allPlayers) do\nif not player.neutral and not player.hasDraftPassed then\nplayer.timer.time=player.timer.time - (newTime - oldTime)\nupdatePlayerName(i)\nend\nend\nend\nend\noldTime=Time.time\nif gameState.currentPhase==phases.gameEndPhase then\nreturn 1\nend\nend\nend\nstartLuaCoroutine(self,\"runTimerCoroutine\")\nend\ntimerFunctions.getTimerConfiguration=function()\nif gameState.started then\nif transientState.timerConfiguration==nil then\ntransientState.timerConfiguration=tableHelpers.deepClone(gameState.timerConfiguration)\nend\nreturn transientState.timerConfiguration\nelse\nreturn gameConfig.timerConfiguration\nend\nend\ntimerFunctions.pauseUnpauseTimer=function()\nif gameState.started then\ngameState.timerConfiguration.isPaused=not gameState.timerConfiguration.isPaused\ntransientState.timerConfiguration.isPaused=gameState.timerConfiguration.isPaused\nend\nend\ntimerFunctions.changeConfigValue=function(configName,signum,min,max)\nmin=min or 0\nmax=max or 36000\nlocal timerConfiguration=timerFunctions.getTimerConfiguration()\nlocal oldValue=timerConfiguration[configName]\ntimerConfiguration[configName]=timerConfiguration[configName] + timerConfiguration.delta * signum\nif timerConfiguration[configName] > max then\ntimerConfiguration[configName]=max\nelseif timerConfiguration[configName] < min then\ntimerConfiguration[configName]=min\nend\nif not timerFunctions.checkIfTimerIsReasonable() and signum==-1 then\ntimerConfiguration[configName]=oldValue\nend\nend\ntimerFunctions.changeFactor=function(altClick)\nlocal factor=10\nif altClick then factor=1/10 end\nlocal timerConfiguration=timerFunctions.getTimerConfiguration()\nlocal newValue=timerConfiguration.delta * factor\nif newValue > 1000 then\nnewValue=1000\nelseif newValue < 1 then\nnewValue=1\nend\ntimerConfiguration.delta=newValue\nend\ntimerFunctions.checkIfTimerIsReasonable=function()\nlocal timerConfiguration=timerFunctions.getTimerConfiguration()\nlocal time=timerConfiguration.secondsPlusPerGeneration + timerConfiguration.secondsPlusPerEndTurn * 6\nif time >= 120 then\nreturn true\nelse\nlogging.broadcastToAll(\"Cannot change timer values.\")\nlogging.broadcastToAll(\"Sum of gained seconds per generation and 6 times gained seconds per end turn have to be at least 120 seconds.\")\nend\nend\ntimerFunctions.onEndGeneration=function()\nfor i,player in pairs(gameState.allPlayers) do\nif not player.neutral then\nplayer.timer.time=player.timer.time +\ngameState.timerConfiguration.secondsPlusPerGeneration +\ngameState.timerConfiguration.secondsPlusPerEndTurn\nif i==gameState.firstPlayer then\nplayer.timer.isRunning=true\nend\nend\nend\nif transientState.timerConfiguration~=nil then\ngameState.timerConfiguration=tableHelpers.deepClone(transientState.timerConfiguration)\nend\nend\ntimerFunctions.onPlayerTurnEnd=function(playerIndex)\nlocal player=gameState.allPlayers[playerIndex]\nplayer.timer.isRunning=false\nplayer.timer.time=player.timer.time + gameState.timerConfiguration.secondsPlusPerEndTurn\nend\ntimerFunctions.onTimerRunsOut=function(player)\nif gameState.timerConfiguration.timeoutAction==\"doNothing\" then\nreturn\nelseif gameState.timerConfiguration.timeoutAction==\"endTurn\" then\nplayer.timer.time=0\nendTurn()\nelseif gameState.timerConfiguration.timeoutAction==\"giveNegativeVPs\" then\nreturn\nend\nend\ntimerFunctions.toggleTimeoutAction=function(delta)\nlocal timerConfiguration=timerFunctions.getTimerConfiguration()\nfor i,actionName in pairs(timerData.timeoutActions) do\nif actionName==timerConfiguration.timeoutAction then\nlocal newSelection=i + delta\nif newSelection > #timerData.timeoutActions then\nnewSelection=1\nelseif newSelection < 1 then\nnewSelection=#timerData.timeoutActions\nend\ntimerConfiguration.timeoutAction=timerData.timeoutActions[newSelection]\nreturn\nend\nend\nend","n88":"logging={\ncurrentModeName=loggingRules[5].name,\ncurrentMode=loggingRules[5].modes,\nfallbackToSystemLog=true,\n}\nfunction changeLoggingMode(params)\nlogging.currentModeName=params.newModeName\nlogging.currentMode=params.newMode\nend\nfunction toggleFallbackToSystemLog(params)\nif logging.fallbackToSystemLog and params.newState==2 then\nlogging.fallbackToSystemLog=not logging.fallbackToSystemLog\nelseif not logging.fallbackToSystemLog and params.newState==1 then\nlogging.fallbackToSystemLog=not logging.fallbackToSystemLog\nend\nend\nfunction logging_printToAll(params)\nlogging.printToAll(params.message,params.messageColor,params.loggingMode)\nend\nfunction logging_printToColor(params)\nlogging.printToColor(params.message,params.playerColor,params.messageColor,params.loggingMode)\nend\nfunction logging_broadcastToAll(params)\nlogging.broadcastToAll(params.message,params.messageColor,params.loggingMode)\nend\nfunction logging_broadcastToColor(params)\nlogging.broadcastToColor(params.message,params.playerColor,params.messageColor,params.loggingMode)\nend\nlogging.printToAll=function(message,messageColor,loggingMode)\nif not isLoggingModeActive(loggingMode) then\nif logging.fallbackToSystemLog then\nlog(message)\nend\nreturn\nend\nprintToAll(message,messageColor)\nend\nlogging.printToColor=function(message,playerColor,messageColor,loggingMode)\nif not isLoggingModeActive(loggingMode) or not Player[playerColor].seated then\nif logging.fallbackToSystemLog then\nlog(message)\nend\nreturn\nend\nprintToColor(message,playerColor,messageColor)\nend\nlogging.broadcastToAll=function(message,messageColor,loggingMode)\nif not isLoggingModeActive(loggingMode) then\nif logging.fallbackToSystemLog then\nlog(message)\nend\nreturn\nend\nbroadcastToAll(message,messageColor)\nend\nlogging.broadcastToColor=function(message,playerColor,messageColor,loggingMode)\nif not isLoggingModeActive(loggingMode) or not Player[playerColor].seated then\nif logging.fallbackToSystemLog then\nlog(message)\nend\nreturn\nend\nbroadcastToColor(message,playerColor,messageColor)\nend\nfunction isLoggingModeActive(loggingMode)\nif loggingMode==nil then\nloggingMode=loggingModes.unimportant\nend\nfor _,checkValue in pairs(logging.currentMode) do\nif loggingMode==checkValue then\nreturn true\nend\nend\nreturn false\nend","n89":"\nobjectActivationEffects={}\nobjectActivationEffects={}\nobjectActivationEffects.drawCardFunction=function(amount)\nreturn function(playerColor,sourceName)\nlogging.printToAll(playerColor..\" got \"..amount..\" card(s) from \"..sourceName,playerColor,loggingModes.detail)\nGlobal.call(\"giveCardsToPlayer\",{playerColor=playerColor,amount=amount})\nend\nend\nobjectActivationEffects.drawCardFromDiscard=function(amount)\nreturn function(playerColor,sourceName)\nlogging.printToAll(playerColor..\" got \"..amount..\" discarded card(s) from \"..sourceName,playerColor,loggingModes.detail)\nGlobal.call(\"giveCardsToPlayer\",{playerColor=playerColor,amount=amount,fromDiscardPile=true})\nend\nend\nobjectActivationEffects.shuffleDiscardPile=function()\nreturn function(playerColor,sourceName)\nlogging.printToAll(playerColor..\" shuffled the discard pile because of an effect from \"..sourceName,playerColor,loggingModes.detail)\nshuffleDiscardPile()\nend\nend\nobjectActivationEffects.discardCardFunction=function(amount)\nreturn function(playerColor,sourceName)\nlogging.printToAll(playerColor..\" discarded \"..amount..\" card(s) for \"..sourceName,playerColor,loggingModes.detail)\nGlobal.call(\"discardPlayerCards\",{playerColor=playerColor,amount=amount})\nend\nend\nobjectActivationEffects.othersDrawCardFunction=function(amount)\nreturn function(playerColor,sourceName)\nfor i,player in ipairs(gameState.allPlayers) do\nif player.color~=playerColor then\nlogging.printToAll(player.color..\" got \"..amount..\" cards from \"..sourceName,player.color,loggingModes.detail)\nGlobal.call(\"giveCardsToPlayer\",{playerColor=player.color,amount=amount})\nend\nend\nend\nend\nobjectActivationEffects.increaseGlobalParameterFunction=function(parameterType)\nreturn function(playerColor,source)\nGlobal.call(\"increaseGlobalParameter\",{parameterType=parameterType,playerColor=playerColor,sourceName=source})\nreturn true\nend\nend\nobjectActivationEffects.decreaseGlobalParameterFunction=function(parameterType)\nreturn function(playerColor,source)\nGlobal.call(\"decreaseGlobalParameter\",{parameterType=parameterType,playerColor=playerColor,sourceName=source})\nreturn true\nend\nend\nobjectActivationEffects.drawObjectFunction=function(objectName,isSpecialTile)\nreturn function(playerColor,sourceName,metadata)\nlogging.printToAll(playerColor..\" got a(n) \"..objectName..\" from \"..sourceName,playerColor,loggingModes.detail)\nGlobal.call(\"giveObjectToPlayer\",{playerColor=playerColor,objectName=objectName,isSpecialTile=isSpecialTile,metadata=metadata})\nreturn true\nend\nend\nobjectActivationEffects.spawnNewFleet=function()\nreturn function(playerColor,sourceName)\nlogging.printToAll(playerColor..\" got a new fleet from \"..sourceName,playerColor,loggingModes.detail)\ncolonySystem.spawnFleet(playerColor)\nend\nend\nobjectActivationEffects.payCard=function()\nreturn function(playerColor,sourceName)\nlogging.printToColor(playerColor..\" bought a card\",playerColor,playerColor,loggingModes.unimportant)\nend\nend\nobjectActivationEffects.increasePathfinderTrackEvent=function(trackName)\nreturn function(playerColor)\nlocal triggerType=nil\nif trackName==\"venus\" then\ntriggerType=eventData.triggerType.increasePathfinderVenus\nelseif trackName==\"earth\" then\ntriggerType=eventData.triggerType.increasePathfinderEarth\nelseif trackName==\"mars\" then\ntriggerType=eventData.triggerType.increasePathfinderMars\nelseif trackName==\"jovian\" then\ntriggerType=eventData.triggerType.increasePathfinderJovian\nelse\nreturn\nend\nGlobal.call(\"eventHandling_triggerEvent\",{triggeredByColor=playerColor,triggerType=triggerType})\nend\nend\nobjectActivationEffects.modifyColonyTradingConfig=function(modType,delta)\nreturn function(playerColor)\nlocal tmPlayer=getPlayerByColor(playerColor)\ntmPlayer.colonyTradingConfig[modType]=tmPlayer.colonyTradingConfig[modType] + delta\nend\nend\nobjectActivationEffects.defineAndGiveTradeToken=function()\nreturn function(playerColor,sourceName)\nlogging.printToAll(playerColor..\" got a Trade Token from \"..sourceName,playerColor,loggingModes.detail)\nlocal metadata=colonySystem.generateTradeTokenMetadata(playerColor)\nGlobal.call(\"giveObjectToPlayer\",{playerColor=playerColor,objectName=\"programableActionToken\",isSpecialTile=false,metadata=metadata})\nreturn true\nend\nend\nobjectActivationEffects.defineAndGiveDecreaseColonyTrackToken=function()\nreturn function(playerColor,sourceName)\nlogging.printToAll(playerColor..\" got a Decrease Colony Track Token from \"..sourceName,playerColor,loggingModes.detail)\nlocal metadata=colonySystem.generateColonyTrackDownTokenMetadata(playerColor)\nGlobal.call(\"giveObjectToPlayer\",{playerColor=playerColor,objectName=\"programableActionToken\",isSpecialTile=false,metadata=metadata})\nreturn true\nend\nend\nobjectActivationEffects.defineAndGiveIncreaseColonyTrackToken=function()\nreturn function(playerColor,sourceName)\nlogging.printToAll(playerColor..\" got a Increase Colony Track Token from \"..sourceName,playerColor,loggingModes.detail)\nlocal metadata=colonySystem.generateColonyTrackUpTokenMetadata(playerColor)\nGlobal.call(\"giveObjectToPlayer\",{playerColor=playerColor,objectName=\"programableActionToken\",isSpecialTile=false,metadata=metadata})\nreturn true\nend\nend\nobjectActivationEffects.defineAndGiveProductionMalusToken=function(effectStrength)\nreturn function(playerColor,sourceName)\nlogging.printToAll(playerColor..\" got a Production Malus Token from \"..sourceName,playerColor,loggingModes.detail)\nlocal metadata=aresFunctions.generateProductionMalusMetadata(playerColor,effectStrength)\nGlobal.call(\"giveObjectToPlayer\",{playerColor=playerColor,objectName=\"programableActionToken\",isSpecialTile=false,metadata=metadata})\nreturn true\nend\nend\nobjectActivationEffects.setNextFirstPlayer=function()\nreturn function(playerColor,sourceName)\nlogging.printToAll(playerColor..\" will be first player next generation.\",playerColor,loggingModes.important)\nfor index,player in pairs(gameState.allPlayers) do\nif playerColor==player.color then\ngameState.forcedNextFirstPlayer=index\nbreak\nend\nend\nend\nend\nobjectActivationEffects.placeSpaceTile=function(tileId,objectName,tileSourceName)\nreturn function(playerColor,sourceName)\nif gameState.automaticSpaceTilePlacement then\nlocal source=gameObjectHelpers.getObjectByName(tileSourceName)\nfor _,spaceTileTable in pairs(tablePositions.reservedTiles.spaceTiles) do\nfor entryName,entry in pairs(spaceTileTable) do\nif entryName==tileId then\nlocal tileObj=source.takeObject({position=entry.pos,rotation=entry.rot})\nWait.frames(\nfunction() Wait.condition(\nfunction() tileObj.call(\"activateObjectRemotely\",{playerColor=playerColor}) end,\nfunction() return tileObj.resting end )\nend,20)\nreturn true\nend\nend\nend\nelse\nlogging.printToAll(playerColor..\" got a(n) \"..objectName..\" from \"..sourceName,playerColor,loggingModes.detail)\nGlobal.call(\"giveObjectToPlayer\",{playerColor=playerColor,objectName=objectName,isSpecialTile=false,metadata=nil})\nend\nreturn true\nend\nend\nobjectActivationEffects.effectMapping={}\nobjectActivationEffects.effectMapping[\"DrawCard\"]=objectActivationEffects.drawCardFunction(1)\nobjectActivationEffects.effectMapping[\"DiscardCard\"]=objectActivationEffects.discardCardFunction(1)\nobjectActivationEffects.effectMapping[\"OthersDrawCard\"]=objectActivationEffects.othersDrawCardFunction(1)\nobjectActivationEffects.effectMapping[\"Temp\"]=objectActivationEffects.increaseGlobalParameterFunction(\"temp\")\nobjectActivationEffects.effectMapping[\"O2\"]=objectActivationEffects.increaseGlobalParameterFunction(\"o2\")\nobjectActivationEffects.effectMapping[\"TFVenus\"]=objectActivationEffects.increaseGlobalParameterFunction(\"venus\")\nobjectActivationEffects.effectMapping[\"TR\"]=objectActivationEffects.increaseGlobalParameterFunction(\"tr\")\nobjectActivationEffects.effectMapping[\"TRReduce\"]=objectActivationEffects.decreaseGlobalParameterFunction(\"tr\")\nobjectActivationEffects.effectMapping[\"Ocean\"]=objectActivationEffects.drawObjectFunction(\"ocean\",false)\nobjectActivationEffects.effectMapping[\"Greenery\"]=objectActivationEffects.drawObjectFunction(\"greenery\",false)\nobjectActivationEffects.effectMapping[\"City\"]=objectActivationEffects.drawObjectFunction(\"city\",false)\nobjectActivationEffects.effectMapping[\"Microbe\"]=objectActivationEffects.drawObjectFunction(\"microbe\",false)\nobjectActivationEffects.effectMapping[\"Science\"]=objectActivationEffects.drawObjectFunction(\"science\",false)\nobjectActivationEffects.effectMapping[\"Animal\"]=objectActivationEffects.drawObjectFunction(\"animal\",false)\nobjectActivationEffects.effectMapping[\"Fighter\"]=objectActivationEffects.drawObjectFunction(\"fighter\",false)\nobjectActivationEffects.effectMapping[\"WildCardToken\"]=objectActivationEffects.drawObjectFunction(\"wildCardToken\",false)\nobjectActivationEffects.effectMapping[\"Floater\"]=objectActivationEffects.drawObjectFunction(\"floater\",false)\nobjectActivationEffects.effectMapping[\"Asteroid\"]=objectActivationEffects.drawObjectFunction(\"asteroid\",false)\nobjectActivationEffects.effectMapping[\"Colony\"]=objectActivationEffects.drawObjectFunction(\"colonyMarker\",false)\nobjectActivationEffects.effectMapping[\"PlayerMarker\"]=objectActivationEffects.drawObjectFunction(\"playerMarker\",false)\nobjectActivationEffects.effectMapping[\"Delegate\"]=objectActivationEffects.drawObjectFunction(\"delegate\",false)\nobjectActivationEffects.effectMapping[\"PreserveTile\"]=objectActivationEffects.drawObjectFunction(\"preserve\",true)\nobjectActivationEffects.effectMapping[\"NuclearZone\"]=objectActivationEffects.drawObjectFunction(\"nuclear\",true)\nobjectActivationEffects.effectMapping[\"RestrictedArea\"]=objectActivationEffects.drawObjectFunction(\"restricted\",true)\nobjectActivationEffects.effectMapping[\"Capital\"]=objectActivationEffects.drawObjectFunction(\"capital\",true)\nobjectActivationEffects.effectMapping[\"LavaFlows\"]=objectActivationEffects.drawObjectFunction(\"lavaFlows\",true)\nobjectActivationEffects.effectMapping[\"EcologicalZone\"]=objectActivationEffects.drawObjectFunction(\"ecologicalZone\",true)\nobjectActivationEffects.effectMapping[\"MiningRights\"]=objectActivationEffects.drawObjectFunction(\"miningRights\",true)\nobjectActivationEffects.effectMapping[\"MiningArea\"]=objectActivationEffects.drawObjectFunction(\"miningArea\",true)\nobjectActivationEffects.effectMapping[\"IndustrialCenter\"]=objectActivationEffects.drawObjectFunction(\"industrial\",true)\nobjectActivationEffects.effectMapping[\"MoholeArea\"]=objectActivationEffects.drawObjectFunction(\"mohole\",true)\nobjectActivationEffects.effectMapping[\"CommercialDistrict\"]=objectActivationEffects.drawObjectFunction(\"commercial\",true)\nobjectActivationEffects.effectMapping[\"Ore\"]=objectActivationEffects.drawObjectFunction(\"ore\",false)\nobjectActivationEffects.effectMapping[\"Data\"]=objectActivationEffects.drawObjectFunction(\"data\",false)\nobjectActivationEffects.effectMapping[\"CrashSite\"]=objectActivationEffects.drawObjectFunction(\"crashSite\",true)\nobjectActivationEffects.effectMapping[\"NewVenice\"]=objectActivationEffects.drawObjectFunction(\"newVenice\",true)\nobjectActivationEffects.effectMapping[\"Wetlands\"]=objectActivationEffects.drawObjectFunction(\"wetlands\",true)\nobjectActivationEffects.effectMapping[\"RedCity\"]=objectActivationEffects.drawObjectFunction(\"redCity\",true)\nobjectActivationEffects.effectMapping[\"VenusPFTrack\"]=objectActivationEffects.increasePathfinderTrackEvent(\"venus\")\nobjectActivationEffects.effectMapping[\"EarthPFTrack\"]=objectActivationEffects.increasePathfinderTrackEvent(\"earth\")\nobjectActivationEffects.effectMapping[\"MarsPFTrack\"]=objectActivationEffects.increasePathfinderTrackEvent(\"mars\")\nobjectActivationEffects.effectMapping[\"JovianPFTrack\"]=objectActivationEffects.increasePathfinderTrackEvent(\"jovian\")\nobjectActivationEffects.effectMapping[\"ResourceWildCardToken\"]=objectActivationEffects.drawObjectFunction(\"resourceWildCardToken\")\nobjectActivationEffects.effectMapping[\"ProductionWildCardToken\"]=objectActivationEffects.drawObjectFunction(\"productionWildCardToken\")\nobjectActivationEffects.effectMapping[\"ProgramableActionToken\"]=objectActivationEffects.drawObjectFunction(\"programableActionToken\")\nobjectActivationEffects.effectMapping[\"IncreaseTradingReward\"]=objectActivationEffects.modifyColonyTradingConfig(\"tradingRewardModifier\",1)\nobjectActivationEffects.effectMapping[\"DecreaseTradingCost\"]=objectActivationEffects.modifyColonyTradingConfig(\"tradingCostModifier\",-1)\nobjectActivationEffects.effectMapping[\"GanymedeColony\"]=objectActivationEffects.placeSpaceTile(\"ganymedeColony\",\"city\",\"genericCityBag\")\nobjectActivationEffects.effectMapping[\"PhobosSpacePort\"]=objectActivationEffects.placeSpaceTile(\"phobosSpacePort\",\"city\",\"genericCityBag\")\nobjectActivationEffects.effectMapping[\"StanfordTorus\"]=objectActivationEffects.placeSpaceTile(\"stanfordTorus\",\"city\",\"genericCityBag\")\nobjectActivationEffects.effectMapping[\"DawnCity\"]=objectActivationEffects.placeSpaceTile(\"dawnCity\",\"city\",\"genericCityBag\")\nobjectActivationEffects.effectMapping[\"LunaMetropolis\"]=objectActivationEffects.placeSpaceTile(\"lunaMetropolis\",\"city\",\"genericCityBag\")\nobjectActivationEffects.effectMapping[\"GatewayStation\"]=objectActivationEffects.placeSpaceTile(\"gatewayStation\",\"city\",\"genericCityBag\")\nobjectActivationEffects.effectMapping[\"MartianTranshipmentStation\"]=objectActivationEffects.placeSpaceTile(\"martianTranshipmentStation\",\"city\",\"genericCityBag\")\nobjectActivationEffects.effectMapping[\"VeneraBase\"]=objectActivationEffects.placeSpaceTile(\"veneraBase\",\"city\",\"genericCityBag\")\nobjectActivationEffects.effectMapping[\"DysonScreens\"]=objectActivationEffects.placeSpaceTile(\"dysonScreens\",\"city\",\"genericCityBag\")\nobjectActivationEffects.effectMapping[\"CeresSpaceport\"]=objectActivationEffects.placeSpaceTile(\"ceresSpaceport\",\"city\",\"genericCityBag\")\nobjectActivationEffects.effectMapping[\"LunarEmbassy\"]=objectActivationEffects.placeSpaceTile(\"lunarEmbassy\",\"city\",\"genericCityBag\")\nobjectActivationEffects.effectMapping[\"PayCard\"]=objectActivationEffects.payCard()\nobjectActivationEffects.effectMapping[\"Fleet\"]=objectActivationEffects.spawnNewFleet()\nobjectActivationEffects.effectMapping[\"TradeToken\"]=objectActivationEffects.defineAndGiveTradeToken()\nobjectActivationEffects.effectMapping[\"ProductionMalus\"]=objectActivationEffects.defineAndGiveProductionMalusToken(1)\nobjectActivationEffects.effectMapping[\"BigProductionMalus\"]=objectActivationEffects.defineAndGiveProductionMalusToken(2)\nobjectActivationEffects.effectMapping[\"DecreaseColonyTrackToken\"]=objectActivationEffects.defineAndGiveDecreaseColonyTrackToken()\nobjectActivationEffects.effectMapping[\"IncreaseColonyTrackToken\"]=objectActivationEffects.defineAndGiveIncreaseColonyTrackToken()\nobjectActivationEffects.effectMapping[\"ShuffleDiscard\"]=objectActivationEffects.shuffleDiscardPile()\nobjectActivationEffects.effectMapping[\"DrawCardFromDiscard\"]=objectActivationEffects.drawCardFromDiscard(1)\nobjectActivationEffects.effectMapping[\"NextFirstPlayer\"]=objectActivationEffects.setNextFirstPlayer()\nobjectActivationEffects.effectMapping[\"VenusHabitat\"]=objectActivationEffects.drawObjectFunction(\"venusHabitat\",false)\nobjectActivationEffects.effectMapping[\"FloatingArray\"]=objectActivationEffects.drawObjectFunction(\"floatingArray\",false)\nobjectActivationEffects.effectMapping[\"GasMine\"]=objectActivationEffects.drawObjectFunction(\"gasMine\",false)\nobjectActivationEffects.effectMapping[\"MenagerieTile\"]=objectActivationEffects.drawObjectFunction(\"MenagerieTile\",true)\nobjectActivationEffects.effectMapping[\"AresCapital\"]=objectActivationEffects.drawObjectFunction(\"AresCapital\",true)\nobjectActivationEffects.effectMapping[\"AresCommercialDistrict\"]=objectActivationEffects.drawObjectFunction(\"AresCommercialDistrict\",true)\nobjectActivationEffects.effectMapping[\"AresEcologicalZone\"]=objectActivationEffects.drawObjectFunction(\"AresEcologicalZone\",true)\nobjectActivationEffects.effectMapping[\"AresFertilizerFactory\"]=objectActivationEffects.drawObjectFunction(\"AresFertilizerFactory\",true)\nobjectActivationEffects.effectMapping[\"AresIndustrialCenter\"]=objectActivationEffects.drawObjectFunction(\"AresIndustrialCenter\",true)\nobjectActivationEffects.effectMapping[\"AresMeteorCrater\"]=objectActivationEffects.drawObjectFunction(\"AresMeteorCrater\",true)\nobjectActivationEffects.effectMapping[\"AresMiningAreaSteel\"]=objectActivationEffects.drawObjectFunction(\"AresMiningAreaSteel\",true)\nobjectActivationEffects.effectMapping[\"AresMiningAreaTitanium\"]=objectActivationEffects.drawObjectFunction(\"AresMiningAreaTitanium\",true)\nobjectActivationEffects.effectMapping[\"AresMiningRightsSteel\"]=objectActivationEffects.drawObjectFunction(\"AresMiningRightsSteel\",true)\nobjectActivationEffects.effectMapping[\"AresMiningRightsTitanium\"]=objectActivationEffects.drawObjectFunction(\"AresMiningRightsTitanium\",true)\nobjectActivationEffects.effectMapping[\"AresMoholeArea\"]=objectActivationEffects.drawObjectFunction(\"AresMoholeArea\",true)\nobjectActivationEffects.effectMapping[\"AresNaturalPreserve\"]=objectActivationEffects.drawObjectFunction(\"AresNaturalPreserve\",true)\nobjectActivationEffects.effectMapping[\"AresNuclearZone\"]=objectActivationEffects.drawObjectFunction(\"AresNuclearZone\",true)\nobjectActivationEffects.effectMapping[\"AresOceanFarm\"]=objectActivationEffects.drawObjectFunction(\"AresOceanFarm\",true)\nobjectActivationEffects.effectMapping[\"AresOceanicCity\"]=objectActivationEffects.drawObjectFunction(\"AresOceanicCity\",true)\nobjectActivationEffects.effectMapping[\"AresOceanSanctuary\"]=objectActivationEffects.drawObjectFunction(\"AresOceanSanctuary\",true)\nobjectActivationEffects.effectMapping[\"AresRestrictedArea\"]=objectActivationEffects.drawObjectFunction(\"AresRestrictedArea\",true)\nobjectActivationEffects.effectMapping[\"AresSolarFarm\"]=objectActivationEffects.drawObjectFunction(\"AresSolarFarm\",true)\nobjectActivationEffects.effectMapping[\"AresVolcano\"]=objectActivationEffects.drawObjectFunction(\"AresVolcano\",true)\nobjectActivationEffects.effectMapping[\"PlaceTwoErosions\"]=function(playerColor,sourceName) aresFunctions.spawnErosions(2) end\nobjectActivationEffects.effectMapping[\"FlipDuststorms\"]=function(playerColor,sourceName) aresFunctions.flipDuststorms() end\nobjectActivationEffects.effectMapping[\"FlipErosions\"]=function(playerColor,sourceName) aresFunctions.flipErosions() end\nobjectActivationEffects.effectMapping[\"RemoveAllDuststorms\"]=function(playerColor,sourceName) aresFunctions.removeAllDuststorms() end\n\nobjectActivationSystem={}\nfunction objectActivationSystem_getCurrentActivationRuleSet(params)\nlocal tmPlayer=getPlayerByColor(params.playerColor)\nreturn tmPlayer.objectActivationSystemConfig.rules\nend\nfunction objectActivationSystem_activateObject(params)\nlocal tmPlayer=getPlayerByColor(params.playerColor)\nlocal sourceName=params.sourceName or \"Unknown\"\nlocal object=params.object\nlocal description=params.description\nlocal activationEffects=params.activationEffects\nif description~=nil then\nupdateActivationEffectsFromDescription(activationEffects,description)\nend\nlocal isObjectActivationAllowed=true\ntmPlayer.objectActivationSystemConfig.ignoreRequirements=false\nlocal ignoreActivationChecks=activationEffects.isGlobalEvent or activationEffects.ignoreActivationChecks or tmPlayer.playerArea.activationTableau==nil\nif not ignoreActivationChecks then\nisObjectActivationAllowed=objectActivationSystem.evaluateRules(tmPlayer,object,activationEffects)\nif not tmPlayer.objectActivationSystemConfig.ignoreRequirements then\nisObjectActivationAllowed=isObjectActivationAllowed and objectActivationSystem.objectRequirementsFulfilled(tmPlayer,activationEffects)\nend\nisObjectActivationAllowed=isObjectActivationAllowed and objectActivationSystem.playerCanAffordObject(tmPlayer,object,sourceName,activationEffects)\nisObjectActivationAllowed=isObjectActivationAllowed and enoughCardsInHandForDiscarding(tmPlayer,sourceName,activationEffects)\nend\nif isObjectActivationAllowed or tmPlayer.neutral then\nif params.object.guid~=tmPlayer.objectActivationSystemConfig.lastActivationObjectGuid then\ntmPlayer.objectActivationSystemConfig.lastActivationObjectGuid=params.object.guid\nobjectActivationSystem.activateObject(tmPlayer,object,sourceName,activationEffects)\nend\nend\ntmPlayer.wasUpdated=true\nend\nfunction objectActivationSystem_doAction(params)\nlocal tmPlayer=getPlayerByColor(params.playerColor)\nlocal sourceName=params.sourceName or \"Unknown\"\nlocal object=params.object\nlocal activationEffects=params.activationEffects\nif activationEffects==nil then\nif object~=nil and object.getVar(\"activateObject\")~=nil then\nplayerActionFuncs.playerHasPlacedTile(tmPlayer.color,object.getGUID())\nend\nreturn true\nend\nif activationEffects.productionValues==nil then\nactivationEffects.productionValues={}\nend\nif activationEffects.effects==nil then\nactivationEffects.effects={}\nend\nif activationEffects.resourceValues==nil then\nactivationEffects.resourceValues={}\nend\nlocal canActivate=checkProductionAvailability(tmPlayer,sourceName,activationEffects)\ncanActivate=canActivate and checkResourceAvailability(tmPlayer,sourceName,activationEffects)\ncanActivate=canActivate and enoughCardsInHandForDiscarding(tmPlayer,sourceName,activationEffects)\nif not canActivate and not tmPlayer.neutral then\nreturn false\nend\nobjectActivationSystem.doAction(tmPlayer,object,sourceName,activationEffects)\ntmPlayer.wasUpdated=true\nreturn true\nend\nfunction objectActivationSystem_disableActivationRules(params)\nlocal tmPlayer=getPlayerByColor(params.playerColor)\ntmPlayer.objectActivationSystemConfig.rules=cardActivationRules.configurations.noRules\ntmPlayer.wasUpdated=true\nend\nfunction objectActivationSystem_enableAllActivationRules(params)\nlocal tmPlayer=getPlayerByColor(params.playerColor)\ntmPlayer.objectActivationSystemConfig.rules=cardActivationRules.configurations.allRules\ntmPlayer.wasUpdated=true\nend\nobjectActivationSystem.evaluateRules=function(tmPlayer,object,activationEffects)\nif object.tag~=\"Card\" then\nreturn true\nend\nif not evaluateRulesInternal(tmPlayer,object,cardActivationRules.configurations.permanentRules) then\nreturn false\nend\nif not activationEffects.isProjectCard then\nreturn true\nend\nif not evaluateRulesInternal(tmPlayer,object,tmPlayer.objectActivationSystemConfig.rules) then\nreturn false\nend\nreturn true\nend\nobjectActivationSystem.objectRequirementsFulfilled=function(tmPlayer,activationEffects)\nlocal rawRequirementInterpreter=Global.getVar(\"rawRequirementInterpreter\")\nlocal requirementsMet=true\nlocal tagsMissing=0\nrawRequirementInterpreter.resetExtrasForPlayer(tmPlayer)\nfor key,value in pairs(activationEffects.rawRequirements) do\nlocal result=rawRequirementInterpreter.evaluateRequirement(tmPlayer,key,value)\nif not result then\nlogging.printToColor(\"Cannot play card,requirement unfulfilled: \"..value..\" \"..key,tmPlayer.color,tmPlayer.color,loggingModes.essential)\nend\nrequirementsMet=requirementsMet and result\nend\nreturn requirementsMet\nend\nobjectActivationSystem.playerCanAffordObject=function(tmPlayer,object,sourceName,activationEffects)\nlocal paymentSystemConfig=tmPlayer.paymentSystemConfig\nlocal result=true\nif object.guid~=paymentSystemConfig.currentObjectGuid then\nreturn true\nend\nfor resourceType,amountNeeded in pairs(paymentSystemConfig.paymentDistribution) do\nlocal playersResourceAmount=Global.call(\"getPlayerResource\",{resourceType=resourceType,playerColor=tmPlayer.color})\nif playersResourceAmount < amountNeeded then\nlogging.printToAll(\"Player \"..tmPlayer.color..\" needs at least \"..amountNeeded..\" \"..resourceType..\" in order to play \"..sourceName,tmPlayer.color,loggingModes.essential)\nresult=false\nend\nend\nlocal tmpResult=checkProductionAvailability(tmPlayer,sourceName,activationEffects)\nresult=result and tmpResult\ntmpResult=checkResourceAvailability(tmPlayer,sourceName,activationEffects)\nresult=result and tmpResult\nreturn result\nend\nfunction checkProductionAvailability(tmPlayer,sourceName,activationEffects)\nlocal result=true\nfor resourceType,productionChange in pairs(activationEffects.productionValues) do\nif productionChange < 0 then\nlocal currentPlayerProduction=Global.call(\"getPlayerProduction\",{resourceType=resourceType,playerColor=tmPlayer.color})\nif string.lower(resourceType)==\"credits\" then\ncurrentPlayerProduction=currentPlayerProduction + 5\nend\nif (-1 * productionChange) > currentPlayerProduction then\nlocal loggedProductionRequired=-1*productionChange\nif string.lower(resourceType)==\"credits\" then\nloggedProductionRequired=loggedProductionRequired - 5\nend\nlogging.printToAll(\"Player \"..tmPlayer.color..\" needs at least \"..loggedProductionRequired..\" \"..resourceType..\" production in order to play/activate \"..sourceName,tmPlayer.color,loggingModes.essential)\nresult=false\nend\nend\nend\nreturn result\nend\nfunction checkResourceAvailability(tmPlayer,sourceName,activationEffects)\nlocal result=true\nfor resourceType,resourceChange in pairs(activationEffects.resourceValues) do\nif resourceChange < 0 then\nlocal currentPlayerResourceAmount=Global.call(\"getPlayerResource\",{resourceType=resourceType,playerColor=tmPlayer.color})\nif (-1 * resourceChange) > currentPlayerResourceAmount then\nlogging.printToAll(\"Player \"..tmPlayer.color..\" needs at least \"..(-1*resourceChange)..\" \"..resourceType..\" in storage in order to play/activate \"..sourceName,tmPlayer.color,loggingModes.essential)\nresult=false\nend\nend\nend\nreturn result\nend\nfunction enoughCardsInHandForDiscarding(tmPlayer,sourceName,activationEffects)\nlocal cardsInHandNeeded=0\nfor _,rawEffect in pairs(activationEffects.effects) do\nif rawEffect==\"DiscardCard\" then\ncardsInHandNeeded=cardsInHandNeeded + 1\nend\nend\nif cardsInHandNeeded==0 then\nreturn true\nend\nlocal cardsInHand=0\nfor _,object in pairs(Player[tmPlayer.color].getHandObjects(1)) do\nif object.tag==\"Card\" then\ncardsInHand=cardsInHand + 1\nend\nend\nif cardsInHand < cardsInHandNeeded then\nlogging.printToColor(\"Unable to play/trigger \"..sourceName..\". You need at least \"..cardsInHandNeeded..\" cards in your main hand (\"..(cardsInHandNeeded - cardsInHand)..\" more)\",tmPlayer.color,tmPlayer.color,loggingModes.essential)\nend\nreturn cardsInHand >= cardsInHandNeeded\nend\nobjectActivationSystem.activateObject=function(tmPlayer,object,sourceName,activationEffects)\nif object.getVar(\"onCardActivated\") then\nobject.call(\"onCardActivated\",tmPlayer.color)\nend\nif not activationEffects.isGlobalEvent then\nupdateEventHandlers(tmPlayer,activationEffects.eventHandlers)\nend\nWait.frames(\nfunction()\npayCard(tmPlayer,object,activationEffects)\napplyProductionChanges(tmPlayer,sourceName,activationEffects.productionValues)\napplyProductionChangesOthers(tmPlayer,sourceName,activationEffects.productionValuesOthers)\napplyResourceChanges(tmPlayer,sourceName,activationEffects.resourceValues)\napplyResourceChangesOthers(tmPlayer,sourceName,activationEffects.resourceValuesOthers)\napplyRawEffects(tmPlayer,sourceName,activationEffects.effects,activationEffects.metadata)\napplyRawEffectsOthers(tmPlayer,sourceName,activationEffects.effectsOthers)\napplyDiscountEffects(tmPlayer,sourceName,activationEffects.discountEffects)\nresetOneTimeDiscounts(tmPlayer,object)\napplyOneTimeDiscounts(tmPlayer,sourceName,activationEffects.oneTimeDiscountEffects)\napplyConversionRateEffects(tmPlayer,sourceName,activationEffects.conversionRateEffects)\napplyRequirementMods(tmPlayer,sourceName,activationEffects.requirementMods)\napplyVictoryPoints(tmPlayer,object,activationEffects.victoryPoints)\naddCardGuidToPlayer(tmPlayer,object,activationEffects.cardType)\nresetOneTimeRequirementMods(tmPlayer,object)\napplyOneTimeRequirementMods(tmPlayer,sourceName,activationEffects.oneTimeRequirementMods)\nif not activationEffects.isGlobalEvent then\napplyTags(tmPlayer,activationEffects.cardTags)\ntriggerEvents(tmPlayer,object,activationEffects)\nplayerActionFuncs.playerHasPerformedAction(tmPlayer.color)\nend\nend,2)\nend\nobjectActivationSystem.doAction=function(tmPlayer,object,sourceName,activationEffects)\napplyProductionChanges(tmPlayer,sourceName,activationEffects.productionValues)\napplyProductionChangesOthers(tmPlayer,sourceName,activationEffects.productionValuesOthers)\napplyResourceChanges(tmPlayer,sourceName,activationEffects.resourceValues)\napplyResourceChangesOthers(tmPlayer,sourceName,activationEffects.resourceValuesOthers)\napplyRawEffects(tmPlayer,sourceName,activationEffects.effects,activationEffects.metadata)\napplyRawEffectsOthers(tmPlayer,sourceName,activationEffects.effectsOthers)\napplyDiscountEffects(tmPlayer,sourceName,activationEffects.discountEffects)\napplyOneTimeDiscounts(tmPlayer,sourceName,activationEffects.oneTimeDiscountEffects)\napplyRequirementMods(tmPlayer,sourceName,activationEffects.requirementMods)\napplyOneTimeRequirementMods(tmPlayer,sourceName,activationEffects.oneTimeRequirementMods)\napplyTags(tmPlayer,activationEffects.tags)\nif object~=nil then\neventHandling_triggerEvent({triggeredByColor=tmPlayer.color,\ntriggerType=eventData.triggerType.actionPerformed,\neventSourceId=object.guid,\nmetadata={resourceValues=activationEffects.resourceValues}})\nif activationEffects.customEventTriggers~=nil then\nfor _,eventTrigger in pairs(activationEffects.customEventTriggers) do\neventHandling_triggerEvent({triggeredByColor=tmPlayer.color,triggerType=eventTrigger,eventSourceId=object.guid})\nend\nend\nend\nif object~=nil then\nif object.getVar(\"activateObject\")~=nil then\nplayerActionFuncs.playerHasPlacedTile(tmPlayer.color,object.getGUID())\nelseif not activationEffects.isRepeatable and not activationEffects.noAction then\nplayerActionFuncs.playerHasPerformedAction(tmPlayer.color)\nend\nend\nend\nfunction updateActivationEffectsFromDescription(activationEffects,description)\nactivationEffects.isProjectCard=descriptionInterpreter.isProjectCard(description)\nif not activationEffects.cardTags then\nactivationEffects.cardTags=descriptionInterpreter.getValuesFromInput(description,\"Tags?:\")\nend\nif not activationEffects.productionValues then\nactivationEffects.productionValues=descriptionInterpreter.getKeyValuePairsFromInput(description,\"Prod:\")\nend\nif not activationEffects.productionValuesOthers then\nactivationEffects.productionValuesOthers=descriptionInterpreter.getKeyValuePairsFromInput(description,\"ProdOthers:\")\nend\nif not activationEffects.resourceValues then\nactivationEffects.resourceValues=descriptionInterpreter.getKeyValuePairsFromInput(description,\"Resrc:\")\nend\nif not activationEffects.effects then\nactivationEffects.effects=descriptionInterpreter.getValuesFromInput(description,\"Effects:\")\nend\nif not activationEffects.discountEffects then\nactivationEffects.discountEffects=descriptionInterpreter.getKeyValuePairsFromInput(description,\"^Discount:\")\nend\nif not activationEffects.conversionRateEffects then\nactivationEffects.conversionRateEffects=descriptionInterpreter.getKeyValuePairsFromInput(description,\"ConversionRate:\")\nend\nif not activationEffects.rawRequirements then\nactivationEffects.rawRequirements=descriptionInterpreter.getKeyValuePairsFromInput(description,\"Reqs:\")\nend\nif not activationEffects.requirementMods then\nactivationEffects.requirementMods=descriptionInterpreter.getKeyValuePairsFromInput(description,\"^ReqMods:\")\nend\nif not activationEffects.oneTimeRequirementMods then\nactivationEffects.oneTimeRequirementMods=descriptionInterpreter.getKeyValuePairsFromInput(description,\"OneTimeReqMods:\")\nend\nif not activationEffects.oneTimeDiscountEffects then\nactivationEffects.oneTimeDiscountEffects=descriptionInterpreter.getKeyValuePairsFromInput(description,\"OneTimeDiscount:\")\nend\nif not activationEffects.baseCost then\nactivationEffects.baseCost=getBaseCost(description)\nend\nif not activationEffects.victoryPoints then\nactivationEffects.victoryPoints=descriptionInterpreter.getValuesFromInput(description,\"VP:\")[1]\nend\nif next(activationEffects.rawRequirements)~=nil then\nactivationEffects.hasRequirements=true\nend\nend\nfunction addCardGuidToPlayer(tmPlayer,object,cardType)\nif object.tag~=\"Card\" then\nreturn\nend\nif cardType==nil then\nreturn\nend\ntable.insert(tmPlayer.ownedCards[cardType],{guid=object.guid,name=object.getName()} )\ntmPlayer.wasUpdated=true\nend\nfunction evaluateRulesInternal(tmPlayer,card,ruleSet)\nlocal countOfReasons=0\nlocal isAllowedToActivate=true\nfor i,ruleName in ipairs(ruleSet) do\nlocal allActivationRules=cardActivationRules.rules\nfor activationRuleName,activationRule in pairs(allActivationRules) do\nif ruleName==activationRuleName then\nlocal activationRuleResult=activationRule(tmPlayer,card)\nif not activationRuleResult then\ncountOfReasons=countOfReasons + 1\nisAllowedToActivate=false\nend\nend\nend\nend\nif not isAllowedToActivate then\nlogging.printToColor(\"You are not allowed to activate \"..card.getName()..\" for the \"..countOfReasons..\" above reason(s).\",tmPlayer.color,tmPlayer.color,loggingModes.essential)\nend\nreturn isAllowedToActivate\nend\nfunction payCard(tmPlayer,object,activationEffects)\nif activationEffects.isProjectCard then\npaymentSystem_pay({playerColor=tmPlayer.color,activationEffects=activationEffects,cardGuid=object.guid})\nend\nend\nfunction applyProductionChanges(tmPlayer,sourceName,rawProductionValues)\nfor resourceType,amount in pairs(rawProductionValues) do\nlogging.printToAll(\"Player \"..tmPlayer.color..\" got \"..amount..\" \"..resourceType..\" production from \"..sourceName,tmPlayer.color,loggingModes.detail)\nGlobal.call(\"changePlayerProduction\",{resourceType=resourceType,resourceAmount=amount,playerColor=tmPlayer.color})\nend\nend\nfunction applyProductionChangesOthers(tmPlayer,sourceName,rawProductionValues)\nif rawProductionValues==nil then\nreturn\nend\nfor _,player in pairs(gameState.allPlayers) do\nif player.color~=tmPlayer.color then\nfor resourceType,amount in pairs(rawProductionValues) do\nlogging.printToAll(\"Player \"..player.color..\" got \"..amount..\" \"..resourceType..\" production from \"..sourceName,player.color,loggingModes.detail)\nGlobal.call(\"changePlayerProduction\",{resourceType=resourceType,resourceAmount=amount,playerColor=player.color})\nend\nend\nend\nend\nfunction applyResourceChanges(tmPlayer,sourceName,rawResourceValues)\nfor resourceType,amount in pairs(rawResourceValues) do\nlogging.printToAll(\"Player \"..tmPlayer.color..\" got \"..amount..\" \"..resourceType..\" from \"..sourceName,tmPlayer.color,loggingModes.detail)\nGlobal.call(\"changePlayerResource\",{resourceType=resourceType,resourceAmount=amount,playerColor=tmPlayer.color})\nend\nend\nfunction applyResourceChangesOthers(tmPlayer,sourceName,rawResourceValues)\nif rawResourceValues==nil then\nreturn\nend\nfor _,player in pairs(gameState.allPlayers) do\nif player.color~=tmPlayer.color then\nfor resourceType,amount in pairs(rawResourceValues) do\nlogging.printToAll(\"Player \"..player.color..\" got \"..amount..\" \"..resourceType..\" from \"..sourceName,player.color,loggingModes.detail)\nGlobal.call(\"changePlayerResource\",{resourceType=resourceType,resourceAmount=amount,playerColor=player.color})\nend\nend\nend\nend\nfunction applyRequirementMods(tmPlayer,sourceName,requirementMods)\nif requirementMods==nil then\nreturn\nend\nlocal reqModifiers=tmPlayer.reqModifiers.permanent\nfor requirementModType,value in pairs(requirementMods) do\nif reqModifiers[requirementModType]==nil then\nreqModifiers[requirementModType]=0\nend\nreqModifiers[requirementModType]=reqModifiers[requirementModType] + value\nend\ntmPlayer.wasUpdated=true\nend\nfunction resetOneTimeDiscounts(tmPlayer,object)\nif object.tag==\"Card\" then\ntmPlayer.paymentSystemConfig.discounts.transient={}\nend\ntmPlayer.wasUpdated=true\nend\nfunction applyOneTimeDiscounts(tmPlayer,sourceName,discountEffects)\nif discountEffects==nil then\nreturn\nend\nfor tag,discount in pairs(discountEffects) do\nlogging.printToAll(tmPlayer.color..\" increased their '\"..tag..\"' discount for the next card played by \"..tostring(-discount)..\" by activating \"..sourceName,tmPlayer.color,loggingModes.unimportant)\npaymentSystem.updateTransientTagDiscount(tmPlayer,tag,discount)\nend\ntmPlayer.wasUpdated=true\nend\nfunction resetOneTimeRequirementMods(tmPlayer,object)\nif object.tag==\"Card\" then\ntmPlayer.reqModifiers.transient={}\nend\ntmPlayer.wasUpdated=true\nend\nfunction applyOneTimeRequirementMods(tmPlayer,sourceName,requirementMods)\nif requirementMods==nil then\nreturn\nend\nlocal reqModifiers=tmPlayer.reqModifiers.transient\nfor requirementModType,value in pairs(requirementMods) do\nif reqModifiers[requirementModType]==nil then\nreqModifiers[requirementModType]=0\nend\nreqModifiers[requirementModType]=reqModifiers[requirementModType] + value\nend\ntmPlayer.wasUpdated=true\nend\nfunction applyTags(tmPlayer,tags)\nif tags==nil then\nreturn\nend\nfor _,tag in pairs(tags) do\nif tag==\"NIL\" then\nreturn\nend\nend\nGlobal.call(\"cardSupportFunctions_updatePlayerTags\",{tags=tags,playerColor=tmPlayer.color})\ntmPlayer.wasUpdated=true\nend\nfunction triggerEvents(tmPlayer,object,activationEffects)\nlocal vp=activationEffects.victoryPoints\nif vp~=nil and ((tonumber(vp)~=nil and tonumber(vp) > 0) or string.match(vp,\"Per\") or string.match(vp,\"Trigger\")) then\neventHandling_triggerEvent({triggeredByColor=tmPlayer.color,triggerType=eventData.triggerType.vpCardPlayed})\nend\nif activationEffects.cardTags~=nil then\nfor _,tag in pairs(activationEffects.cardTags) do\nfor _,entry in pairs(eventDataMappings.tagToTriggerTypeMap) do\nif entry.value==tag then\neventHandling_triggerEvent({triggeredByColor=tmPlayer.color,triggerType=entry.mappedValue,metadata={playedCard=object}})\nend\nend\nend\nend\nif activationEffects.baseCost.value~=nil and activationEffects.baseCost.type==\"Credits\" then\nif tonumber(activationEffects.baseCost.value) >= 20 then\neventHandling_triggerEvent({triggeredByColor=tmPlayer.color,triggerType=eventData.triggerType.payTwentyCostCard,eventSourceId=object.guid})\nend\nend\nif activationEffects.rawRequirements~=nil and next(activationEffects.rawRequirements)~=nil then\neventHandling_triggerEvent({triggeredByColor=tmPlayer.color,triggerType=eventData.triggerType.cardWithRequirmentPlayed,eventSourceId=object.guid})\nend\nif activationEffects.customEventTriggers~=nil then\nfor _,eventTrigger in pairs(activationEffects.customEventTriggers) do\neventHandling_triggerEvent({triggeredByColor=tmPlayer.color,triggerType=eventTrigger,eventSourceId=object.guid})\nend\nend\nif object~=nil and object.tag==\"Card\" then\neventHandling_triggerEvent({\ntriggeredByColor=tmPlayer.color,\ntriggerType=eventData.triggerType.cardPlayed,\neventSourceId=object.guid,\nmetadata={tagsPlayed=activationEffects.cardTags,card=object}\n}\n)\nend\nend\nfunction applyDiscountEffects(tmPlayer,sourceName,discountEffects)\nif discountEffects==nil then\nreturn\nend\nfor tag,discount in pairs(discountEffects) do\nlogging.printToAll(tmPlayer.color..\" increased their discount for \"..tag..\" cards by \"..tostring(-discount)..\" by activating \"..sourceName,tmPlayer.color,loggingModes.detail)\nGlobal.call(\"paymentSystem_updateTagDiscount\",{playerColor=tmPlayer.color,tag=tag,delta=discount})\nend\nend\nfunction applyConversionRateEffects(tmPlayer,sourceName,conversionRateEffects)\nfor resourceType,change in pairs(conversionRateEffects) do\nlogging.printToAll(resourceType..\" of player \"..tmPlayer.color..\" is now worth \"..change..\" more by activating \"..sourceName,tmPlayer.color,loggingModes.detail)\nGlobal.call(\"paymentSystem_updateConversionRate\",{playerColor=tmPlayer.color,resourceType=resourceType,delta=change})\nend\nend\nfunction applyRawEffects(tmPlayer,sourceName,rawEffects,metadata)\nfor _,rawEffect in pairs(rawEffects) do\nobjectActivationEffects.effectMapping[rawEffect](tmPlayer.color,sourceName,metadata)\nend\nend\nfunction applyRawEffectsOthers(tmPlayer,sourceName,rawEffects)\nif rawEffects==nil then\nreturn\nend\nfor _,player in pairs(gameState.allPlayers) do\nif player.color~=tmPlayer.color then\nfor _,rawEffect in pairs(rawEffects) do\nobjectActivationEffects.effectMapping[rawEffect](player.color,sourceName)\nend\nend\nend\nend\nfunction updateEventHandlers(tmPlayer,eventHandlers)\nif eventHandlers==nil then\nreturn\nend\nfor _,eventHandler in pairs(eventHandlers) do\neventHandling.subscribeHandler(eventHandler,tmPlayer.color)\nend\nend\nfunction applyVictoryPoints(tmPlayer,object,victoryPoints)\nif tonumber(victoryPoints)~=nil then\ntmPlayer.victoryPoints.simple=tmPlayer.victoryPoints.simple + victoryPoints\nelseif victoryPoints~=nil and #victoryPoints > 0 and string.match(victoryPoints,\"Per\") then\ntable.insert(tmPlayer.victoryPoints.complex,{victoryPointsFormula=victoryPoints,victoryPointsSourceGuid=object.guid,sourceFriendlyName=object.getName()})\nend\ntmPlayer.wasUpdated=true\nend","n90":"paymentSystem={}\nfunction getBaseCost(description)\nlocal rawCost=descriptionInterpreter.getValuesFromInput(description,\"Cost:\")\nlocal cost={}\nif #rawCost==1 then\ncost={type=\"Credits\",value=tonumber(rawCost[1])}\nelseif #rawCost==2 then\ncost={type=rawCost[2],value=tonumber(rawCost[1])}\nelseif #rawCost==0 or rawCost==nil then\ncost={type=\"Credits\",value=tonumber(0)}\nelse\nlogging.broadcastToAll(\"Unsupported 'Cost' entry in description. Payment setup has to be done manually.\",{1,1,1,1},loggingModes.exception)\ncost={type=\"Credits\",value=tonumber(0)}\nend\nreturn cost\nend\nfunction paymentSystem_getResourceExtensions(params)\nlocal tmPlayer=getPlayerByColor(params.playerColor)\nreturn tmPlayer.paymentSystemConfig.resourceExtensions\nend\nfunction paymentSystem_updateTagDiscount(params)\nlocal tmPlayer=getPlayerByColor(params.playerColor)\npaymentSystem.updateTagDiscount(tmPlayer,params.tag,params.delta)\ntmPlayer.wasUpdated=true\nend\nfunction paymentSystem_updatePaymentDistribution(params)\nlocal tmPlayer=getPlayerByColor(params.playerColor)\nif tmPlayer.paymentSystemConfig.paymentDistribution[params.resourceType]==nil then\nlogging.printToAll(\"PaymentSystem: Unknown resource \"..params.resourceType..\". Please report as a bug.\",{1,0,0},loggingModes.exception)\nreturn\nend\npaymentSystem.updatePaymentDistribution(tmPlayer,params.resourceType,params.delta)\ntmPlayer.wasUpdated=true\nend\nfunction paymentSystem_updateConversionRate(params)\nlocal tmPlayer=getPlayerByColor(params.playerColor)\nif tmPlayer.paymentSystemConfig.conversionRates[params.resourceType]==nil then\nlogging.printToAll(\"PaymentSystem: Unknown resource \"..params.resourceType..\". Please report as a bug.\",{1,0,0},loggingModes.exception)\nreturn\nend\npaymentSystem.updateConversionRate(tmPlayer,params.resourceType,params.delta)\ntmPlayer.wasUpdated=true\nend\nfunction paymentSystem_setupPayment(params)\nif params.cost==nil then\nreturn\nend\nlocal tmPlayer=getPlayerByColor(params.playerColor)\ntmPlayer.paymentSystemConfig.cardActivationInProgress=true\ntmPlayer.paymentSystemConfig.currentObjectGuid=params.objectInActivationZoneGuid\npaymentSystem.setupPayment(tmPlayer,params.cost,params.tagsInput,params.hasRequirements)\ntmPlayer.wasUpdated=true\nend\nfunction paymentSystem_getPaymentDistribution(params)\nlocal tmPlayer=getPlayerByColor(params.playerColor)\nreturn tmPlayer.paymentSystemConfig.paymentDistribution\nend\nfunction paymentSystem_resetPaymentSystem(params)\nlocal tmPlayer=getPlayerByColor(params.playerColor)\ntmPlayer.paymentSystemConfig.overpayedCredits=0\nfor key,value in pairs(tmPlayer.paymentSystemConfig.paymentDistribution) do\ntmPlayer.paymentSystemConfig.paymentDistribution[key]=0\nend\nfor key,value in pairs(tmPlayer.paymentSystemConfig.conversionsAllowed) do\ntmPlayer.paymentSystemConfig.conversionsAllowed[key]=true\nfor tag,resourceType in pairs(tagToResourceConversionAllowedMap) do\ntmPlayer.paymentSystemConfig.conversionsAllowed[resourceType]=false\nend\nend\ntmPlayer.paymentSystemConfig.cardActivationInProgress=false\ntmPlayer.paymentSystemConfig.currentObjectGuid=\"\"\nlocal activationTableau=getObjectFromGUID(tmPlayer.playerArea.activationTableau)\nif activationTableau~=nil then\nactivationTableau.call(\"updatePaymentDistributionDisplay\",tmPlayer.paymentSystemConfig.paymentDistribution)\nend\npaymentSystem.updateConversionRate(tmPlayer,\"Steel\",0)\ntmPlayer.wasUpdated=true\nend\nfunction paymentSystem_pay(params)\nlocal tmPlayer=getPlayerByColor(params.playerColor)\npaymentSystem.payUp(tmPlayer,params.cardGuid)\npaymentSystem_resetPaymentSystem(params)\ntmPlayer.wasUpdated=true\nend\npaymentSystem.payUp=function(tmPlayer,cardGuid)\nlocal paymentDistribution=tmPlayer.paymentSystemConfig.paymentDistribution\nfor key,value in pairs(paymentDistribution) do\nGlobal.call(\"changePlayerResource\",{resourceType=key,resourceAmount=-value,playerColor=tmPlayer.color})\nend\neventHandling_triggerEvent({\ntriggeredByColor=tmPlayer.color,\ntriggerType=eventData.triggerType.payedForCard,\neventSourceId=cardGuid,\nmetadata={\nresourceValues={\nCredits=-paymentDistribution[\"Credits\"],\nSteel=-paymentDistribution[\"Steel\"],\nTitanium=-paymentDistribution[\"Titanium\"]\n}\n}\n})\nend\npaymentSystem.setupPayment=function(tmPlayer,cost,tags,hasRequirements)\npaymentSystem.setupSpecialResourceConversions(tmPlayer,cost,tags)\nfor _,tagOuter in ipairs(tags) do\nfor tagInner,resourceType in pairs(tagToResourceConversionAllowedMap) do\nif tagInner==tagOuter then\ntmPlayer.paymentSystemConfig.conversionsAllowed[resourceType]=true\nend\nend\nend\nlocal resourcesToPay=paymentSystem.applyDiscounts(tmPlayer,cost,tags,hasRequirements)\nfor key,_ in pairs(tmPlayer.paymentSystemConfig.paymentDistribution) do\nif key==resourcesToPay.type then\ntmPlayer.paymentSystemConfig.paymentDistribution[resourcesToPay.type]=resourcesToPay.value\nend\nend\ntmPlayer.paymentSystemConfig.overpayedCredits=0\nlocal activationTableau=getObjectFromGUID(tmPlayer.playerArea.activationTableau)\nif activationTableau~=nil then\nactivationTableau.call(\"updatePaymentDistributionDisplay\",tmPlayer.paymentSystemConfig.paymentDistribution)\nend\nend\npaymentSystem.updatePaymentDistribution=function(tmPlayer,resourceType,delta)\nlocal newPaymentDistribution=tmPlayer.paymentSystemConfig.paymentDistribution\nlocal overpayedCredits=tmPlayer.paymentSystemConfig.overpayedCredits\nif resourceType~=\"Credits\" then\nif not  tmPlayer.paymentSystemConfig.conversionsAllowed[resourceType] then\nlogging.printToColor(\"Not allowed to pay with \"..resourceType..\" for this card\",tmPlayer.color,tmPlayer.color,loggingModes.important)\nreturn\nend\ntmPlayer.paymentSystemConfig.paymentDistribution[resourceType]=newPaymentDistribution[resourceType] + delta\nlocal creditsDelta=- delta * tmPlayer.paymentSystemConfig.conversionRates[resourceType]\nif delta >= 0 or overpayedCredits==0 then\nnewPaymentDistribution[\"Credits\"]=newPaymentDistribution[\"Credits\"] + creditsDelta\nif newPaymentDistribution[\"Credits\"] < 0 then\noverpayedCredits=overpayedCredits - newPaymentDistribution[\"Credits\"]\nnewPaymentDistribution[\"Credits\"]=0\nend\nelse\noverpayedCredits=overpayedCredits - creditsDelta\nif overpayedCredits < 0 then\nnewPaymentDistribution[\"Credits\"]=-overpayedCredits\noverpayedCredits=0\nend\nend\nelse\ntmPlayer.paymentSystemConfig.paymentDistribution[resourceType]=newPaymentDistribution[resourceType] + delta\nif newPaymentDistribution[\"Credits\"] < 0 then\noverpayedCredits=overpayedCredits - newPaymentDistribution[\"Credits\"]\nnewPaymentDistribution[\"Credits\"]=0\nend\nend\ntmPlayer.paymentSystemConfig.paymentDistribution=newPaymentDistribution\ntmPlayer.paymentSystemConfig.overpayedCredits=overpayedCredits\nlocal activationTableau= getObjectFromGUID(tmPlayer.playerArea.activationTableau)\nif activationTableau~=nil then\nactivationTableau.call(\"updatePaymentDistributionDisplay\",tmPlayer.paymentSystemConfig.paymentDistribution)\nend\nend\npaymentSystem.updateConversionRate=function(tmPlayer,resourceType,delta)\nlog(\"updating conversion rates\")\ntmPlayer.paymentSystemConfig.baseConversionRates[resourceType]=\ntmPlayer.paymentSystemConfig.baseConversionRates[resourceType] + delta\ntmPlayer.paymentSystemConfig.conversionRates=tableHelpers.deepClone(tmPlayer.paymentSystemConfig.baseConversionRates)\nlocal activationTableau= getObjectFromGUID(tmPlayer.playerArea.activationTableau)\nif activationTableau~=nil then\nactivationTableau.call(\"updateConversionRatesDisplay\",tmPlayer.paymentSystemConfig.baseConversionRates)\neventHandling_triggerEvent({\ntriggeredByColor=tmPlayer.color,\ntriggerType=eventData.triggerType.conversionRatesUpdated,\neventSourceId=activationTableau.guid,\nmetadata={conversionRates=tmPlayer.paymentSystemConfig.baseConversionRates}\n})\nend\nend\npaymentSystem.updateTagDiscount=function(tmPlayer,tag,delta)\nlocal discounts=tmPlayer.paymentSystemConfig.discounts.permanent\nif discounts[tag]==nil then\nlog(\"updating special discount for tag\")\nlog(tag)\ndiscounts[tag]=0\nend\nlocal oldValue=discounts[tag]\ndiscounts[tag]=discounts[tag] + delta\nif delta~=0 then\nlog(tmPlayer.color..\"'s discount for '\"..tag..\"' tag changed: \"..oldValue..\" -> \"..discounts[tag])\nend\nfor _,iconTableauGuid in pairs(tmPlayer.playerArea.iconTableaus) do\nlocal iconTableau= getObjectFromGUID(iconTableauGuid)\nif iconTableau~=nil then\niconTableau.call(\"updateTagDiscountsDisplay\",discounts)\nend\nend\nend\npaymentSystem.updateTransientTagDiscount=function(tmPlayer,tag,delta)\nlocal discounts=tmPlayer.paymentSystemConfig.discounts.transient\nif discounts[tag]==nil then\ndiscounts[tag]=0\nend\ndiscounts[tag]=discounts[tag] + delta\nif tmPlayer.paymentSystemConfig.cardActivationInProgress then\npaymentSystem.updatePaymentDistribution(tmPlayer,\"Credits\",delta)\nend\nend\npaymentSystem.extendByResource=function(tmPlayer,resourceTypeInput,conversionRateInput,conversionAllowedTagsInput,isConstantConversionRateInput)\nlocal paymentSystemConfig=tmPlayer.paymentSystemConfig\nif paymentSystemConfig.resourceExtensions[resourceTypeInput]~=nil then\nreturn\nend\npaymentSystemConfig.resourceExtensions[resourceTypeInput]={resourceType=resourceTypeInput,conversionRate=conversionRateInput,isConstantConversionRate=isConstantConversionRateInput}\npaymentSystemConfig.paymentDistribution[resourceTypeInput]=0\npaymentSystemConfig.baseConversionRates[resourceTypeInput]=conversionRateInput\nif conversionAllowedTagsInput~=nil then\nfor i,tag in ipairs(conversionAllowedTagsInput) do\nif tagToResourceConversionAllowedMap[tag]==nil then\ntagToResourceConversionAllowedMap[tag]=resourceTypeInput\nend\nend\nelse\npaymentSystemConfig.conversionsAllowed[resourceTypeInput]=true\nend\nlocal activationTableau= getObjectFromGUID(tmPlayer.playerArea.activationTableau)\nif activationTableau~=nil then\nactivationTableau.call(\"activationTableau_extendTableau\",{resourceType=resourceTypeInput,defaultConversionRate=conversionRateInput,isConstantConversionRate=isConstantConversionRateInput})\nend\ntmPlayer.wasUpdated=true\nend\npaymentSystem.applyDiscounts=function(tmPlayer,cost,tags,hasRequirements)\nlocal discounts=tmPlayer.paymentSystemConfig.discounts.permanent\nlocal transientDiscounts=tmPlayer.paymentSystemConfig.discounts.transient\nlocal resourcesToPay={}\nif cost.type==\"Credits\" then\nlocal creditsToPay=cost.value + discounts[icons.anyTagNames[1]]\nif transientDiscounts[icons.anyTagNames[1]]~=nil then\ncreditsToPay=creditsToPay + transientDiscounts[icons.anyTagNames[1]]\nend\nfor _,tag in ipairs(tags) do\nif transientDiscounts[tag]~=nil then\ncreditsToPay=creditsToPay + discounts[tag] + transientDiscounts[tag]\nelseif discounts[tag]~=nil then\ncreditsToPay=creditsToPay + discounts[tag]\nend\nend\nif hasRequirements and discounts[\"CardsWithRequirements\"]~=nil then\ncreditsToPay=creditsToPay + discounts[\"CardsWithRequirements\"]\nend\nif creditsToPay < 0 then\ncreditsToPay=0\nend\nresourcesToPay={type=cost.type,value=creditsToPay}\nelse\nresourcesToPay=cost\nend\nreturn resourcesToPay\nend\npaymentSystem.setupSpecialResourceConversions=function(tmPlayer,cost,tags)\nlocal activationTableau= getObjectFromGUID(tmPlayer.playerArea.activationTableau)\nfor _,tag in pairs(tags) do\nif tag==\"Infrastructure\" then\ntmPlayer.paymentSystemConfig.conversionRates[\"Titanium\"]=4\nif activationTableau~=nil then\nactivationTableau.call(\"updateConversionRatesDisplay\",tmPlayer.paymentSystemConfig.conversionRates)\nend\nreturn\nend\nend\ntmPlayer.paymentSystemConfig.conversionRates=tableHelpers.deepClone(tmPlayer.paymentSystemConfig.baseConversionRates)\nif activationTableau~=nil then\nactivationTableau.call(\"updateConversionRatesDisplay\",tmPlayer.paymentSystemConfig.conversionRates)\nend\nend","n91":"\nspecialMilestones={}\nspecialMilestones.evaluateMilestone=function(tmPlayer,milestoneName)\nif milestoneName==\"Planner\" then\nreturn specialMilestones.evaluatePlanner(tmPlayer)\nelseif milestoneName==\"Diversifier\" then\nreturn specialMilestones.evaluateDiversifier(tmPlayer)\nelseif milestoneName==\"Tactician\" then\nreturn specialMilestones.evaluateTactician(tmPlayer)\nelseif milestoneName==\"Polar Explorer\" then\nreturn specialMilestones.evaluatePolarExplorer(tmPlayer)\nelseif milestoneName==\"Specialist\" then\nreturn specialMilestones.evaluateSpecialist(tmPlayer)\nelseif milestoneName==\"Ecologist\" then\nreturn specialMilestones.evaluateEcologist(tmPlayer)\nelseif milestoneName==\"Tycoon\" then\nreturn specialMilestones.evaluateTycoon(tmPlayer)\nelse\nlogging.printToAll(\"Unsupported milestone: '\"..milestoneName..\"'. Please report this\",{1,0.25,0,1},loggingModes.exception)\nreturn true\nend\nend\nspecialMilestones.evaluatePlanner=function(tmPlayer)\nlocal ttsPlayer=Player[tmPlayer.color]\nlocal cardsInHand=0\nfor i=1,ttsPlayer.getHandCount() do\nfor _,object in pairs(ttsPlayer.getHandObjects(i)) do\nif object.tag==\"Card\" then\ncardsInHand=cardsInHand + 1\nend\nend\nend\nreturn cardsInHand >= 16\nend\nspecialMilestones.evaluateDiversifier=function(tmPlayer)\nlocal numberOfTags=0\nlocal wildCardTagCount=tmPlayer.tagSystem.tagCounts[\"WildCard\"]\nfor tag,amount in pairs(tmPlayer.tagSystem.tagCounts) do\nlocal isIgnoredTag=false\nfor _,ignoreTag in pairs(tableHelpers.combineSingleValueTables({icons.specialIconNames,icons.anyTagNames})) do\nif tag==ignoreTag then\nisIgnoredTag=true\nend\nend\nif not isIgnoredTag then\nif amount > 0 then\nnumberOfTags=numberOfTags + 1\nelseif wildCardTagCount > 0 then\nnumberOfTags=numberOfTags + 1\nwildCardTagCount=wildCardTagCount - 1\nend\nend\nend\nreturn numberOfTags >= 8\nend\nspecialMilestones.evaluateTactician=function(tmPlayer)\nlocal cardsWithRequirementsCount=0\nfor _,cardInfo in pairs(tableHelpers.combineSingleValueTables({tmPlayer.ownedCards.Infrastructure,tmPlayer.ownedCards.Blue,tmPlayer.ownedCards.Green})) do\nlocal card=getObjectFromGUID(cardInfo.guid)\nif card~=nil then\nif card.call(\"hasRequirements\") then\ncardsWithRequirementsCount=cardsWithRequirementsCount + 1\nend\nelse\nlogging.printToColor(\"Cannot evaluate card '\"..cardInfo.name..\"' for milestone 'Tactician'. It's probably hidden away in a card stack.\",tmPlayer.color,tmPlayer.color,loggingModes.exception)\nend\nend\nreturn cardsWithRequirementsCount >= 5\nend\nspecialMilestones.evaluatePolarExplorer=function(tmPlayer)\nlocal jStart=#gameMap.tiles[0]-2\nlocal tilesCoordsOfInterest={}\nfor j=1,2 do\ntable.insert(tilesCoordsOfInterest,normalizeIndices({0,jStart + j,0}))\nfor i=1,100,1 do\nif hexMapHelpers.getTileFromArbitraryHexCoords(gameMap,{i,jStart + j,0})~=nil then\ntable.insert(tilesCoordsOfInterest,normalizeIndices({i,jStart + j,0}))\nelse\nbreak\nend\nend\nfor i=-1,-100,-1 do\nif hexMapHelpers.getTileFromArbitraryHexCoords(gameMap,{i,jStart + j,0})~=nil then\ntable.insert(tilesCoordsOfInterest,normalizeIndices({i,jStart + j,0}))\nelse\nbreak\nend\nend\nend\nlocal ownedTiles=0\nfor _,tileCoordinates in pairs(tilesCoordsOfInterest) do\nlocal tile=gameMap.tiles[tileCoordinates[1]][tileCoordinates[2]][tileCoordinates[3]]\nif tile.tileObjects~=nil then\nfor _,obj in pairs(tile.tileObjects) do\nif obj.owner==tmPlayer.color then\nownedTiles=ownedTiles + 1\nbreak\nend\nend\nend\nend\nreturn ownedTiles >= 3\nend\nspecialMilestones.evaluateSpecialist=function(tmPlayer)\nfor _,resourceType in pairs({\"Credits\",\"Steel\",\"Titanium\",\"Plants\",\"Energy\",\"Heat\"}) do\nlocal value=Global.call(\"getPlayerProduction\",{resourceType=resourceType,playerColor=tmPlayer.color})\nif value >= 10 then\nreturn true\nend\nend\nreturn false\nend\nspecialMilestones.evaluateEcologist=function(tmPlayer)\nlocal numberOfTags=tmPlayer.tagSystem.tagCounts[\"WildCard\"]\nlocal tagsOfInterest={\"Microbe\",\"Plant\",\"Animal\"}\nfor tag,amount in pairs(tmPlayer.tagSystem.tagCounts) do\nfor _,tagOfInterest in pairs(tagsOfInterest) do\nif tagOfInterest==tag then\nnumberOfTags=numberOfTags + amount\nend\nend\nend\nreturn numberOfTags >= 4\nend\nspecialMilestones.evaluateTycoon=function(tmPlayer)\nreturn #tmPlayer.ownedCards.Blue + #tmPlayer.ownedCards.Green >= 15\nend\n-- log(specialMilestones.evaluateTactician(getPlayerByColor(\"White\")))\n-- log(specialMilestones.evaluateTycoon(getPlayerByColor(\"White\")))","n92":"milestoneData={}\nmilestoneData.infos={\nTerraformer={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436810303/D5133DE9481FB91F64BA28DFA98295E90D0D4E97/\",\ndescription=\"Requires a terraforming rating of 35 or higher.\\n:Milestone:\\nReqs: 35 OwnTR\",\ntooltip=\"Click to claim 'Terraformer' milestone.\\nRequires a terraforming rating of 35 or higher.\",\nname=\"Terraformer\",\nexpansions={\"NOTturmoil\"}},\nTurmoilTerraformer={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649970457130983774/BBAAC5E24EC5F1F085885F8047088ADCED927DB4/\",\ndescription=\"Requires a terraforming rating of 26 or higher.\\n:Milestone:\\nReqs: 26 OwnTR\",\ntooltip=\"Click to claim 'Terraformer' milestone.\\nRequires a terraforming rating of 26 or higher.\",\nname=\"Terraformer\",\nexpansions={\"turmoil\"}},\nMayor={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436815440/0A56B8083B5D749C6FEE82F7D67AB4D5174853BA/\",\ndescription=\"Requires at least 3 own cities (Space or Mars) in play.\\n:Milestone:\\nReqs: 3 OwnCityTile\",\ntooltip=\"Click to claim 'Mayor' milestone.\\nRequires at least 3 own cities (Space or Mars) in play.\",\nname=\"Mayor\"},\nGardener={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436819394/E58F3721F062B38BC375303E9BA59C674504952A/\",\ndescription=\"Requires at least 3 own greeneries in play.\\n:Milestone:\\nReqs: 3 OwnGreenery\",\ntooltip=\"Click to claim 'Gardener' milestone.\\nRequires at least 3 own greeneries in play.\",\nname=\"Gardener\"},\nBuilder={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436793211/A6D551D89CF538B069A7C43EAF83666E17E03792/\",\ndescription=\"Requires at least a building tag count of 8.\\n:Milestone:\\nReqs: 8 OwnBuilding\",\ntooltip=\"Click to claim 'Builder' milestone.\\nRequires at least a building tag count of 8.\",\nname=\"Builder\"},\nPlanner={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436814280/FD683203361B59ADEB81B0FBB2CE553D948F05AD/\",\ndescription=\"Requires 16 or more project cards in hand.\\n:Milestone:\\n\",\ntooltip=\"Click to claim 'Planner' milestone.\\nRequires 16 or more project cards in hand.\",\nname=\"Planner\"},\nDiversifier={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436808636/AAE8943518C6371AC9C5C049268A9CD46121FDC3/\",\ndescription=\"Requires at least 8 different tags in play (Wild tags may replace missing tags).\\n:Milestone:\\n\",\ntooltip=\"Click to claim 'Diversifier' milestone.\\nRequires at least 8 different tags in play (Wild tags may replace missing tags).\",\nname=\"Diversifier\"},\nTactician={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436811070/43C2D77FFCEB2DEAAA3FB85FEC61254C0ADC9563/\",\ndescription=\"Requires at least 5 own cards in play with requirements.\\n:Milestone:\\n\",\ntooltip=\"Click to claim 'Tactician' milestone.\\nRequires at least 5 own cards in play with requirements.\",\nname=\"Tactician\"},\nPolarExplorer={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436813593/BC6DF7411BC3BA998A33842B694869710D27B664/\",\ndescription=\"Requires at least 3 own tiles in the bottom two rows of the Mars map.\\n:Milestone:\\n\",\ntooltip=\"Click to claim 'Polar Explorer' milestone.\\nRequires at least 3 own tiles in the bottom two rows of the Mars map.\",\nname=\"Polar Explorer\"},\nEnergizer={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436819934/7E0C346FA7723A5461657AF965B111F51BE0ECBE/\",\ndescription=\"Requires an energy production of at least 6.\\n:Milestone:\\nReqs: 6 OwnEnergy\",\ntooltip=\"Click to claim 'Energizer' milestone.\\nRequires an energy production of at least 6.\",\nname=\"Energizer\"},\nRimSettler={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436812715/3B4976181274CB3566A9F0FA503F138650BD8D57/\",\ndescription=\"Requires at least 3 own Jovian tags in play.\\n:Milestone:\\nReqs: 3 OwnJovian\",\ntooltip=\"Click to claim 'Rim Settler' milestone.\\nRequires at least 3 own Jovian tags in play.\",\nname=\"Rim Settler\"},\nGeneralist={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436818656/C2ED9812FB095200A4F9666C789AA2D5874A8918/\",\ndescription=\"Requires a production of at least 1 in every base resource.\\n:Milestone:\\nReqs: 1 OwnSteel 1 OwnCredits 1 OwnTitanium 1 OwnPlants 1 OwnEnergy 1 OwnHeat\",\ntooltip=\"Click to claim 'Generalist' milestone.\\nRequires a production of at least 1 in every base resource.\",\nname=\"Generalist\"},\nSpecialist={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436811945/F57B98E3B04C5DF5F6493F96684D6A685D9067F4/\",\ndescription=\"Requires a production of at least 10 for any base resource.\\n:Milestone:\\n\",\ntooltip=\"Click to claim 'Specialist' milestone.\\nRequires a production of at least 10 for any base resource.\",\nname=\"Specialist\"},\nEcologist={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436822210/B8EFED9313C75F4043F92E90BA82EC171A2B15F1/\",\ndescription=\"Requires at least 4 own Microbe,Animal or Plant tags in play (any combination,wildcard tags count)\\n:Milestone:\\n\",\ntooltip=\"Click to claim 'Ecologist' milestone.\\nRequires at least 4 own Microbe,Animal or Plant tags in play (any combination,wildcard tags count)\",\nname=\"Ecologist\"},\nTycoon={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436809548/3DFA709F4F9CCB8C9662D5549B665234849D843A/\",\ndescription=\"Requires at least 15 own blue and green project cards in play.\\n:Milestone:\\n\",\ntooltip=\"Click to claim 'Tycoon' milestone.\\nRequires at least 15 own blue and green project cards in play.\",\nname=\"Tycoon\"},\nLegend={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436817050/17776E2E5A0ECABE62B6DA1CED9DB57120F18F23/\",\ndescription=\"Requires at least 5 own played event cards.\\n:Milestone:\\nReqs: 5 OwnEvent\",\ntooltip=\"Click to claim 'Legend' milestone.\\nRequires at least 5 own played event cards.\",\nname=\"Legend\"},\nEconomizer={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436821175/A666E81D5CCB66C72D9409A64548E2BA50382166/\",\ndescription=\"Requires a heat production of 5 or more.\\n:Milestone:\\nReqs: 5 OwnHeat\",\ntooltip=\"Click to claim 'Economizer' milestone.\\nRequires a heat production of 5 or more.\",\nname=\"Economizer\",\nexpansions={\"pathfinders\"}},\nPioneer={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436814808/3B60A3C1269DFA56FE912A7F20E6129F74B69A3A/\",\ndescription=\"Requires 3 own colonies.\\n:Milestone:\\nReqs: 3 OwnColony\",\ntooltip=\"Click to claim 'Pioneer' milestone.\\nRequires 3 own colonies.\",\nname=\"Pioneer\",\nexpansions={\"colonies\",\"pathfinders\"}},\nLandSpecialist={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436817663/E9DE57FE0FB25BFF872D9725805C883EED64E871/\",\ndescription=\"Requires 3 own special tiles in play.\\n:Milestone:\\nReqs: 3 OwnSpecialTile\",\ntooltip=\"Click to claim 'Land Specialist' milestone.\\nRequires 3 own special tiles in play.\",\nname=\"Land Specialist\",\nexpansions={\"pathfinders\"}},\nMartian={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436816054/3EF7460E9DCF55F6FCCA307BBE56E86C371805AA/\",\ndescription=\"Requires at least 4 own Mars tags in play.\\n:Milestone:\\nReqs: 4 OwnMars\",\ntooltip=\"Click to claim 'Martian' milestone.\\nRequires at least 4 own Mars tags in play.\",\nname=\"Martian\",\nexpansions={\"pathfinders\"}},\nBusinessman={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/1649969935436807962/8047A49D234CE70DF107528136AA68D7B0DBD4E9/\",\ndescription=\"Requires at least 6 own Earth tags in play.\\n:Milestone:\\nReqs: 6 OwnEarth\",\ntooltip=\"Click to claim 'Businessman' milestone.\\nRequires at least 6 own Earth tags in play.\",\nname=\"Businessman\",\nexpansions={\"pathfinders\"}},\nHoverlord={imageUrl=\"http://cloud-3.steamusercontent.com/ugc/797611191276163631/A06B69D04F5B3A9C6F38F82631DF45C58EE1C005/\",\ndescription=\"Requires at least 7 floaters on own cards\\n:Milestone:\\nReqs: 7 OwnFloater\",\ntooltip=\"Click to claim 'Hoverlord' milestone.\\nRequires at least 7 floaters on own cards.\",\nname=\"Hoverlord\",\nexpansions={\"venus\"}}\n}\nmilestoneData.sets={{\"Terraformer\",\"Mayor\",\"Gardener\",\"Builder\",\"Planner\"},\n{\"Diversifier\",\"Tactician\",\"PolarExplorer\",\"Energizer\",\"RimSettler\"},\n{\"Generalist\",\"Specialist\",\"Ecologist\",\"Tycoon\",\"Legend\"},\n{\"Economizer\",\"Pioneer\",\"LandSpecialist\",\"Martian\",\"Businessman\"}}\nmilestoneData.images={\n\"http://cloud-3.steamusercontent.com/ugc/1691647690039310389/3D36183648D464CBA3A7A92C0E7F097E8F2774A7/\",\n\"http://cloud-3.steamusercontent.com/ugc/1691647690039310879/80BF8BE87F80082863F5675C278DF43188B6531F/\",\n\"http://cloud-3.steamusercontent.com/ugc/1691647690039311289/ED5FEF20200E13B4BE085024AC5342E05F30500F/\"\n}\nmilestoneData.getMilestoneInfoByName=function(name)\nfor key,info in pairs(milestoneData.infos) do\nif key==name then\nreturn info\nend\nend\nend\n\nfunction milestoneSystem_unclaimMilestone(params)\r\nreturn milestoneSystem.unclaimMilestone(params.milestoneIndex)\r\nend\r\nfunction milestoneSystem_toggleMilestones(params)\r\nmilestoneSystem.changeMilestoneSet(params.nextSet)\r\nend\r\nmilestoneSystem={}\r\nmilestoneSystem.milestoneTilesInitialized=false\r\nmilestoneSystem.initialize=function()\r\nmilestoneSystem.setupMilestones()\r\nWait.time(function() milestoneSystem.changeMilestoneSet(1) end,5)\r\nend\r\nmilestoneSystem.tryClaimMilestone=function(playerColor,milestoneDescription,milestoneName,milestonePosition,tileGuid)\r\nlocal requirements=descriptionInterpreter.getKeyValuePairsFromInput(milestoneDescription,\"Reqs:\")\r\nlocal tmPlayer=getPlayerByColor(playerColor)\r\nif #gameState.claimedMilestones==gameState.milestones.maxClaims then\r\nlogging.printToColor(\"You cannot claim \"..milestoneName..\". \"..gameState.milestones.maxClaims..\" milestones have been already claimed.\",playerColor,playerColor,loggingModes.important)\r\nreturn false\r\nend\r\nlocal hasChimeraCorp=false\r\nfor _,card in pairs(tmPlayer.ownedCards.Corp) do\r\nif card.guid==\"e91b19\" then\r\ntmPlayer.tagSystem.tagCounts[\"WildCard\"]=tmPlayer.tagSystem.tagCounts[\"WildCard\"] - 1\r\nhasChimeraCorp=true\r\nend\r\nend\r\nif next(requirements)==nil then\r\nif not specialMilestones.evaluateMilestone(tmPlayer,milestoneName) then\r\nreturn false\r\nend\r\nend\r\nlocal isAllowed=milestoneSystem.checkPrerequisites(tmPlayer,requirements)\r\nif isAllowed then\r\nmilestoneSystem.claimMilestone(tmPlayer,milestoneName,milestonePosition,tileGuid)\r\nend\r\nif hasChimeraCorp then\r\ntmPlayer.tagSystem.tagCounts[\"WildCard\"]=tmPlayer.tagSystem.tagCounts[\"WildCard\"] + 1\r\nend\r\nreturn isAllowed\r\nend\r\nmilestoneSystem.checkPrerequisites=function(tmPlayer,requirements)\r\nlocal requirementsFulfilled=objectActivationSystem.objectRequirementsFulfilled(tmPlayer,{rawRequirements=requirements})\r\nif requirementsFulfilled then\r\nlocal activationEffects={resourceValues={Credits=-8}}\r\nlocal canAfford=objectActivationSystem_doAction({playerColor=tmPlayer.color,\r\nsourceName=\"claiming a milestone\",\r\nactivationEffects=activationEffects})\r\nif canAfford then\r\nreturn true\r\nend\r\nend\r\nreturn false\r\nend\r\nmilestoneSystem.setupMilestones=function(override)\r\nfunction setupMilestonesCoroutine()\r\nwhile transientState.setupMilestonesOngoing do\r\ncoroutine.yield(0)\r\nend\r\ntransientState.setupMilestonesOngoing=true\r\nif gameState.milestoneGuids~=nil then\r\nfor _,guid in pairs (gameState.milestoneGuids) do\r\nlocal obj=getObjectFromGUID(guid)\r\nif obj~=nil then\r\nobj.destruct()\r\nend\r\nend\r\nend\r\ngameState.milestoneGuids={}\r\nlocal milestonePlate=gameObjectHelpers.getObjectByName(\"milestonePlate\")\r\nmilestonePlate.call(\"resetSpawnPositions\")\r\nlocal toSpawn=gameConfig.milestones.randomizer.enabled and gameConfig.milestones.randomizer.numberOfMilestones or 5\r\nif override~=nil then toSpawn=override end\r\nfor i=1,toSpawn do\r\nmilestoneSystem.spawnMilestoneTile()\r\nend\r\nwhile #gameState.milestoneGuids < toSpawn do\r\ncoroutine.yield(0)\r\nend\r\nfor i=1,30 do\r\ncoroutine.yield(0)\r\nend\r\ntransientState.setupMilestonesOngoing=false\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"setupMilestonesCoroutine\")\r\nend\r\nmilestoneSystem.randomize=function()\r\nfunction randomizeCoroutine()\r\nwhile transientState.setupMilestonesOngoing or transientState.milestoneRandomizerWorking do\r\ncoroutine.yield(0)\r\nend\r\ntransientState.milestoneRandomizerWorking=true\r\ntransientState.latestMilestones=tableHelpers.deepClone(milestoneData.infos)\r\nlocal mustHaves={}\r\nif gameConfig.milestones.randomizer.guranteeHoverlord and gameConfig.setup.venus then\r\nmustHaves={\"Hoverlord\"}\r\nend\r\nfor _,guid in pairs(gameState.milestoneGuids) do\r\nlocal milestoneInfo=awardAndMilestoneFunctions.getNextRandomInfo(transientState.latestMilestones,mustHaves)\r\nmilestoneSystem.changeMilestone(guid,milestoneInfo)\r\nend\r\ntransientState.milestoneRandomizerWorking=false\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"randomizeCoroutine\")\r\nend\r\nmilestoneSystem.spawnMilestoneTile=function(milestoneInfo)\r\nlocal milestonePlate=gameObjectHelpers.getObjectByName(\"milestonePlate\")\r\nlocal milestoneDefaultTile=gameObjectHelpers.getObjectByName(\"milestoneDefaultTile\")\r\nlocal scale=milestoneDefaultTile.getScale()\r\nlocal cloneCallback=function(clonedGuid)\r\nlocal clonedTile=getObjectFromGUID(clonedGuid)\r\nclonedTile.setLock(false)\r\nclonedTile.interactable=false\r\nWait.time(function()\r\nclonedTile.setLock(true)\r\nclonedTile.setScale(scale)\r\ntable.insert(gameState.milestoneGuids,clonedGuid)\r\nif milestoneInfo~=nil then\r\nmilestoneSystem.changeMilestone(clonedGuid,milestoneInfo)\r\nend\r\nend,2)\r\nend\r\nlocal nextSpawnPositionLocal=milestonePlate.call(\"getNextSpawnPosition\")\r\nif nextSpawnPositionLocal==nil then\r\nlogging.broadcastToAll(\"Unable to spawn milestone tile: All milestone spaces are occupied. This shouldn't happen,please report as a bug in Discord. Please create a save and attach it to the bug message/report.\")\r\nreturn\r\nend\r\nlocal nextSpawnPositionWorld=vectorHelpers.fromLocalToWorld(milestonePlate,nextSpawnPositionLocal)\r\ncreateClonableObject(milestoneDefaultTile,nextSpawnPositionWorld,{0,180,0},cloneCallback,true)\r\nend\r\nmilestoneSystem.claimMilestone=function(tmPlayer,milestoneName,milestonePosition,tileGuid)\r\nfunction claimMilestoneCoroutine()\r\nlocal claimedMilestones=#gameState.claimedMilestones + 1\r\nlocal milestonePlate=gameObjectHelpers.getObjectByName(\"milestonePlate\")\r\nlocal localClaimPosition=vectorHelpers.addVectors(milestonePlate.call(\"getClaimLocalPositions\")[claimedMilestones],{0,0.15,0})\r\nlocal nextFreeClaimPosition=vectorHelpers.fromLocalToWorld(milestonePlate,localClaimPosition,true)\r\nlocal markers=getObjectFromGUID(getPlayerByColor(tmPlayer.color).playerArea.playerMat).call(\"getPlayerMarkerSource\")\r\nlocal claimMarker=markers.takeObject({position=nextFreeClaimPosition})\r\ncoroutine.yield(0)\r\ncoroutine.yield(0)\r\nlocal milestoneMarker=markers.takeObject({position=vectorHelpers.addVectors(milestonePosition,{0,0.4,0.3})})\r\nmilestoneMarker.interactable=false\r\nmilestoneMarker.setLock(true)\r\ncoroutine.yield(0)\r\ncoroutine.yield(0)\r\nlogging.printToAll(\"Player \"..tmPlayer.color..\" claimed \"..milestoneName,{1,1,1,1},loggingModes.important)\r\ntable.insert(gameState.claimedMilestones,\r\n{owner=tmPlayer.color,\r\nmilestoneName=milestoneName,\r\nindex=claimedMilestones,\r\ntileGuid=tileGuid,\r\ncubeGuids={milestoneMarker.getGUID(),claimMarker.getGUID()}} )\r\nmilestoneSystem.updateTokens()\r\ngameState.wasUpdated=true\r\ngameObjectHelpers.getObjectByName(\"milestonePlate\").call(\"addClaim\")\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"claimMilestoneCoroutine\")\r\nend\r\nmilestoneSystem.updateTokens=function()\r\nfor i,guid in pairs(gameState.milestoneGuids) do\r\nlocal obj=getObjectFromGUID(guid)\r\nif #gameState.claimedMilestones==gameState.milestones.maxClaims then\r\nobj.call(\"removeAllButtons\")\r\nelse\r\nobj.call(\"updateButtons\")\r\nend\r\nend\r\nend\r\nmilestoneSystem.unclaimMilestone=function(milestoneIndex)\r\nif milestoneIndex~=#gameState.claimedMilestones then\r\nlogging.printToAll(\"Only allowed to revoke the last claimed milestone.\",{1,1,1,1},loggingModes.important)\r\nreturn false\r\nend\r\nfor i,info in pairs(gameState.claimedMilestones) do\r\nif info.index==milestoneIndex then\r\nlocal  activationEffects={resourceValues={Credits=8}}\r\nobjectActivationSystem_doAction({playerColor=info.owner,\r\nsourceName=\"revoking the claim on a milestone\",\r\nactivationEffects=activationEffects})\r\nfor _,guid in pairs(info.cubeGuids) do\r\nlocal obj=getObjectFromGUID(guid)\r\nif obj~=nil then\r\nobj.destruct()\r\nend\r\nend\r\ngetObjectFromGUID(info.tileGuid).call(\"unclaim\")\r\ngameState.claimedMilestones[i]=nil\r\nlogging.printToAll(\"Player \"..info.owner..\" revoked claim on '\"..info.milestoneName..\"'\",{1,1,1,1},loggingModes.important)\r\nend\r\nend\r\nmilestoneSystem.updateTokens()\r\ngameState.wasUpdated=true\r\nreturn true\r\nend\r\nmilestoneSystem.changeMilestoneSet=function(setIndex)\r\nfunction changeMilestoneSetCoroutine()\r\nif #gameState.milestoneGuids~=5 then\r\nmilestoneSystem.setupMilestones(5)\r\nend\r\nlocal counter=5\r\nwhile counter > 0 do\r\ncounter=counter - 1\r\nif transientState.setupMilestonesOngoing then\r\ncounter=30\r\nend\r\ncoroutine.yield(0)\r\nend\r\nif gameConfig.milestones.randomizer.enabled then\r\ntransientState.latestMilestones=tableHelpers.deepClone(milestoneData.infos)\r\nelse\r\nif gameState.setupIsDone and gameConfig.setup.venus then\r\nmilestoneSystem.spawnMilestoneTile(milestoneData.infos.Hoverlord)\r\nend\r\nend\r\nfor i=1,5 do\r\nlocal guid=gameState.milestoneGuids[i]\r\nlocal milestoneInfo=milestoneData.getMilestoneInfoByName(milestoneData.sets[setIndex][i])\r\nmilestoneSystem.changeMilestone(guid,milestoneInfo)\r\nif gameConfig.milestones.randomizer.enabled then\r\ntransientState.latestMilestones[milestoneData.sets[setIndex][i]].dealt=true\r\nend\r\nend\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"changeMilestoneSetCoroutine\")\r\nend\r\nmilestoneSystem.changeMilestone=function(guid,milestoneInfo)\r\nlocal obj=getObjectFromGUID(guid)\r\nobj.setDescription(milestoneInfo.description)\r\nobj.setName(milestoneInfo.name)\r\nlocal customization={}\r\ncustomization.image=milestoneInfo.imageUrl\r\nobj.setCustomObject(customization)\r\nlocal reloadedObj=obj.reload()\r\nif gameConfig.milestones.randomizer.enabled then\r\nWait.frames(|| reloadedObj.call(\"enableChangeButton\"),2)\r\nend\r\nWait.frames(|| reloadedObj.call(\"setClaimButtonTooltip\",milestoneInfo.tooltip),2)\r\nend\r\nmilestoneSystem.turmoilSpecialHandling=function()\r\nfor i,guid in pairs(gameState.milestoneGuids) do\r\nif milestoneData.infos.Terraformer.name==getObjectFromGUID(guid).getName() then\r\nmilestoneSystem.changeMilestone(guid,milestoneData.infos.TurmoilTerraformer)\r\nreturn\r\nend\r\nend\r\nend\r","n93":"function milestonesAndAwards_claim(params)\r\nlocal position=params.position\r\nif params.positionOffset~=nil then\r\nposition=vectorHelpers.addVectors(params.position,params.positionOffset)\r\nend\r\nif descriptionInterpreter.contains(params.description,\":Award:\") then\r\nreturn awardSystem.tryclaimAward(params.playerColor,params.description,params.name,position,params.tileGuid)\r\nelseif descriptionInterpreter.contains(params.description,\":Milestone:\") then\r\nreturn milestoneSystem.tryClaimMilestone(params.playerColor,params.description,params.name,position,params.tileGuid)\r\nend\r\nend\r\nfunction awardSystem_unclaimAward(params)\r\nreturn awardSystem.unclaimAward(params.awardIndex)\r\nend\r\nfunction awardSystem_toggleAwards(params)\r\nawardSystem.changeAwardSet(params.nextSet)\r\nend\r\nawardSystem={}\r\nawardSystem.initialize=function()\r\nawardSystem.setupAwards()\r\nWait.time(function() awardSystem.changeAwardSet(1) end,5)\r\nend\r\nawardSystem.setupAwards=function(override)\r\nfunction setupAwardsCoroutine()\r\nwhile transientState.setupAwardsOngoing do\r\ncoroutine.yield(0)\r\nend\r\ntransientState.setupAwardsOngoing=true\r\nif gameState.awardGuids~=nil then\r\nfor _,guid in pairs (gameState.awardGuids) do\r\nlocal obj=getObjectFromGUID(guid)\r\nif obj~=nil then\r\nobj.destruct()\r\nend\r\nend\r\nend\r\ngameState.awardGuids={}\r\nlocal awardPlate=gameObjectHelpers.getObjectByName(\"awardPlate\")\r\nawardPlate.call(\"resetSpawnPositions\")\r\nlocal toSpawn=gameConfig.awards.randomizer.enabled and gameConfig.awards.randomizer.numberOfAwards or 5\r\nif override~=nil then toSpawn=override end\r\nfor i=1,toSpawn do\r\nawardSystem.spawnAwardTile()\r\nend\r\nwhile #gameState.awardGuids < toSpawn do\r\ncoroutine.yield(0)\r\nend\r\nfor i=1,30 do\r\ncoroutine.yield(0)\r\nend\r\ntransientState.setupAwardsOngoing=false\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"setupAwardsCoroutine\")\r\nend\r\nawardSystem.randomize=function()\r\nfunction randomizeCoroutine()\r\nwhile transientState.setupAwardsOngoing or transientState.awardRandomizerWorking do\r\ncoroutine.yield(0)\r\nend\r\ntransientState.awardRandomizerWorking=true\r\ntransientState.latestAwards=tableHelpers.deepClone(awardData.infos)\r\nlocal mustHaves={}\r\nif gameConfig.awards.randomizer.guranteeVenuphile and gameConfig.setup.venus then\r\nmustHaves={\"Venuphile\"}\r\nend\r\nfor _,guid in pairs(gameState.awardGuids) do\r\nlocal awardInfo=awardAndMilestoneFunctions.getNextRandomInfo(transientState.latestAwards,mustHaves)\r\nawardSystem.changeAward(guid,awardInfo)\r\nend\r\ntransientState.awardRandomizerWorking=false\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"randomizeCoroutine\")\r\nend\r\nawardSystem.spawnAwardTile=function(awardInfo)\r\nlocal awardPlate=gameObjectHelpers.getObjectByName(\"awardPlate\")\r\nlocal awardDefaultTile=gameObjectHelpers.getObjectByName(\"milestoneAndAwardDefaultTile\")\r\nlocal scale=awardDefaultTile.getScale()\r\nlocal cloneCallback=function(clonedGuid)\r\nlocal clonedTile=getObjectFromGUID(clonedGuid)\r\nclonedTile.setLock(false)\r\nclonedTile.interactable=false\r\nWait.time(function()\r\nclonedTile.setLock(true)\r\nclonedTile.setScale(scale)\r\ntable.insert(gameState.awardGuids,clonedGuid)\r\nif awardInfo~=nil then\r\nawardSystem.changeAward(clonedGuid,awardInfo)\r\nend\r\nend,2)\r\nend\r\nlocal nextSpawnPositionLocal=awardPlate.call(\"getNextSpawnPosition\")\r\nif nextSpawnPositionLocal==nil then\r\nlogging.broadcastToAll(\"Unable to spawn award tile: All award spaces are occupied. This shouldn't happen,please report as a bug in Discord. Please create a save and attach it to the bug message/report.\")\r\nreturn\r\nend\r\nlocal nextSpawnPositionWorld=vectorHelpers.fromLocalToWorld(awardPlate,nextSpawnPositionLocal)\r\ncreateClonableObject(awardDefaultTile,nextSpawnPositionWorld,{0,180,0},cloneCallback,true)\r\nend\r\nawardSystem.tryclaimAward=function(playerColor,awardDescription,awardName,awardPosition,tileGuid)\r\nlocal tmPlayer=getPlayerByColor(playerColor)\r\nlocal numberOfClaimedAwards=#gameState.claimedAwards\r\nif numberOfClaimedAwards==gameState.awards.maxFunders then\r\nlogging.printToColor(\"You cannot claim \"..awardName..\". \"..gameState.awards.maxFunders..\" awards have been already claimed.\",playerColor,playerColor,loggingModes.important)\r\nreturn false\r\nend\r\nlocal costTableIndex=gameState.awards.maxFunders - 2\r\nlocal funded=numberOfClaimedAwards + 1\r\nlocal activationEffects={resourceValues={Credits=awardData.costTable[costTableIndex][funded]}}\r\nlocal canAfford=objectActivationSystem_doAction({playerColor=tmPlayer.color,\r\nsourceName=\"claiming an award\",\r\nactivationEffects=activationEffects})\r\nif canAfford then\r\nawardSystem.claimAward(tmPlayer,awardName,awardPosition,tileGuid)\r\nend\r\nreturn canAfford\r\nend\r\nawardSystem.claimAward=function(tmPlayer,awardName,awardPosition,tileGuid)\r\nfunction claimAwardCoroutine()\r\nlocal numberOfClaimedAwards=#gameState.claimedAwards + 1\r\nlocal awardPlate=gameObjectHelpers.getObjectByName(\"awardPlate\")\r\nlocal offset=5 - gameState.awards.maxFunders\r\nlocal localClaimPosition=vectorHelpers.addVectors(awardPlate.call(\"getClaimLocalPositions\")[numberOfClaimedAwards + offset],{0,0.15,0})\r\nlocal nextFreeClaimPosition=vectorHelpers.fromLocalToWorld(awardPlate,localClaimPosition,true)\r\nlocal markers=getObjectFromGUID(getPlayerByColor(tmPlayer.color).playerArea.playerMat).call(\"getPlayerMarkerSource\")\r\nlocal claimMarker=markers.takeObject({position=nextFreeClaimPosition})\r\ncoroutine.yield(0)\r\ncoroutine.yield(0)\r\nlocal awardMarker=markers.takeObject({position=vectorHelpers.addVectors(awardPosition,{0,0.4,0.3})})\r\nawardMarker.interactable=false\r\nawardMarker.setLock(true)\r\ncoroutine.yield(0)\r\ncoroutine.yield(0)\r\nlogging.printToAll(\"Player \"..tmPlayer.color..\" claimed \"..awardName,{1,1,1,1},loggingModes.important)\r\ntable.insert(gameState.claimedAwards,\r\n{owner=tmPlayer.color,\r\nawardName=awardName,\r\nindex=numberOfClaimedAwards,\r\ntileGuid=tileGuid,\r\ncubeGuids={awardMarker.getGUID(),claimMarker.getGUID()}} )\r\nawardSystem.updateTokens()\r\ngameState.wasUpdated=true\r\ngameObjectHelpers.getObjectByName(\"awardPlate\").call(\"addClaim\",offset)\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"claimAwardCoroutine\")\r\nend\r\nawardSystem.unclaimAward=function(awardIndex)\r\nif awardIndex~=#gameState.claimedAwards then\r\nlogging.printToAll(\"Only allowed to revoke the last claimed award.\",{1,1,1,1},loggingModes.important)\r\nreturn false\r\nend\r\nfor i,info in pairs(gameState.claimedAwards) do\r\nif info.index==awardIndex then\r\nlocal costTableIndex=gameState.awards.maxFunders - 2\r\nlocal activationEffects={resourceValues={Credits=-awardData.costTable[costTableIndex][awardIndex]}}\r\nobjectActivationSystem_doAction({playerColor=info.owner,\r\nsourceName=\"revoking the claim on an award\",\r\nactivationEffects=activationEffects})\r\nfor _,guid in pairs(info.cubeGuids) do\r\nlocal obj=getObjectFromGUID(guid)\r\nif obj~=nil then\r\nobj.destruct()\r\nend\r\nend\r\ngetObjectFromGUID(info.tileGuid).call(\"unclaim\")\r\ngameState.claimedAwards[i]=nil\r\nlogging.printToAll(\"Player \"..info.owner..\" revoked claim on '\"..info.awardName..\"'\",{1,1,1,1},loggingModes.important)\r\nend\r\nend\r\nawardSystem.updateTokens()\r\ngameState.wasUpdated=true\r\nreturn true\r\nend\r\nawardSystem.changeAwardSet=function(setIndex)\r\nfunction changeAwardSetCoroutine()\r\nif #gameState.awardGuids~=5 then\r\nawardSystem.setupAwards(5)\r\nend\r\nlocal counter=5\r\nwhile counter > 0 do\r\ncounter=counter - 1\r\nif transientState.setupAwardsOngoing then\r\ncounter=30\r\nend\r\ncoroutine.yield(0)\r\nend\r\nif gameConfig.awards.randomizer.enabled then\r\ntransientState.latestAwards=tableHelpers.deepClone(awardData.infos)\r\nelse\r\nif gameState.setupIsDone and gameConfig.setup.venus then\r\nawardSystem.spawnAwardTile(awardData.infos.Venuphile)\r\nend\r\nend\r\nfor i=1,5 do\r\nlocal guid=gameState.awardGuids[i]\r\nlocal awardInfo=awardData.getAwardInfoByName(awardData.sets[setIndex][i])\r\nawardSystem.changeAward(guid,awardInfo)\r\nif gameConfig.awards.randomizer.enabled then\r\ntransientState.latestAwards[awardData.sets[setIndex][i]].dealt=true\r\nend\r\nend\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"changeAwardSetCoroutine\")\r\nend\r\nawardSystem.changeAward=function(guid,info)\r\nlocal obj=getObjectFromGUID(guid)\r\nobj.setDescription(info.description)\r\nobj.setName(info.name)\r\nlocal customization={}\r\ncustomization.image=info.imageUrl\r\nobj.setCustomObject(customization)\r\nlocal reloadedObj=obj.reload()\r\nif gameConfig.awards.randomizer.enabled then\r\nWait.frames(|| reloadedObj.call(\"enableChangeButton\"),2)\r\nend\r\nWait.frames(|| reloadedObj.call(\"setClaimButtonTooltip\",info.tooltip),2)\r\nend\r\nawardSystem.updateTokens=function()\r\nfor i,guid in pairs(gameState.awardGuids) do\r\nlocal obj=getObjectFromGUID(guid)\r\nif #gameState.claimedAwards==gameState.awards.maxFunders then\r\nobj.call(\"removeAllButtons\")\r\nelse\r\nobj.call(\"updateButtons\")\r\nend\r\nend\r\nend\r","n94":"awardAndMilestoneFunctions={}\nawardAndMilestoneFunctions.getNextRandomInfo=function(inputTable,mustHaves)\nif mustHaves~=nil then\nfor _,mustHave in pairs(mustHaves) do\nif inputTable[mustHave]~=nil and not inputTable[mustHave].dealt then\ninputTable[mustHave].dealt=true\nreturn inputTable[mustHave]\nend\nend\nend\nlocal count=0\nfor key,info in pairs(inputTable) do\nif not info.dealt and awardAndMilestoneFunctions.expansionsAreSupported(info) then\ncount=count + 1\nend\nend\nlocal r=math.random(1,count)\ncount=1\nfor key,info in pairs(inputTable) do\nif not info.dealt and awardAndMilestoneFunctions.expansionsAreSupported(info) then\nif count==r then\ninfo.dealt=true\nreturn info\nend\ncount=count + 1\nend\nend\nend\nawardAndMilestoneFunctions.expansionsAreSupported=function(info)\nif info.expansions==nil then\nreturn true\nend\nfor _,expansionName in pairs(info.expansions) do\nif string.match(expansionName,\"NOT\") then\nlocal trimmedExpansionName=expansionName:gsub(\"NOT\",\"\")\nif gameConfig.setup[trimmedExpansionName]~=nil and gameConfig.setup[trimmedExpansionName]==true then\nreturn false\nend\nelse\nif gameConfig.setup[expansionName]~=nil and gameConfig.setup[expansionName]==false then\nreturn false\nend\nend\nend\nreturn true\nend\nawardAndMilestoneFunctions.finalizeRandomizer=function()\nif gameConfig.milestones.randomizer.enabled then\ngameState.milestones.maxClaims=gameConfig.milestones.randomizer.maxClaims\nfor i,guid in pairs(gameState.milestoneGuids) do\nlocal obj=getObjectFromGUID(guid)\nif obj~=nil then\nobj.call(\"disableChangeButtton\")\nend\nend\nend\nif gameConfig.awards.randomizer.enabled then\ngameState.awards.maxFunders=gameConfig.awards.randomizer.maxFunders\nfor i,guid in pairs(gameState.awardGuids) do\nlocal obj=getObjectFromGUID(guid)\nif obj~=nil then\nobj.call(\"disableChangeButtton\")\nend\nend\nend\nend\nfunction awardAndMilestoneFunctions_changeMilestoneOrAward(params)\nlocal lastName=params.currentName\nlocal isMilestone=descriptionInterpreter.contains(params.description,\":Milestone:\")\nlocal isAward=descriptionInterpreter.contains(params.description,\":Award:\")\nif isMilestone then\nlocal milestoneInfo=awardAndMilestoneFunctions.getNextRandomInfo(transientState.latestMilestones)\nmilestoneSystem.changeMilestone(params.guid,milestoneInfo)\nfor key,info in pairs(transientState.latestMilestones) do\nif info.name==lastName then\ninfo.dealt=false\nend\nend\nelseif isAward then\nlocal awardInfo=awardAndMilestoneFunctions.getNextRandomInfo(transientState.latestAwards)\nawardSystem.changeAward(params.guid,awardInfo)\nfor key,info in pairs(transientState.latestAwards) do\nif info.name==lastName then\ninfo.dealt=false\nend\nend\nend\nend","n95":"awardScoring={}\nawardScoring.calculateAllPlayerAwardScores=function()\nlocal vps={}\nfor _,awardInfo in pairs(gameState.claimedAwards) do\nlocal awardResults=awardScoring.evaluateAward(awardInfo.awardName)\nfor _,result in pairs(awardResults.firstPlaces) do\nif vps[result.color]==nil then\nvps[result.color]=5\nelse\nvps[result.color]=vps[result.color] + 5\nend\nend\nfor _,result in pairs(awardResults.secondPlaces) do\nif vps[result.color]==nil then\nvps[result.color]=2\nelse\nvps[result.color]=vps[result.color] + 2\nend\nend\nend\nreturn vps\nend\nawardScoring.evaluateAward=function(awardName)\nlocal scoringFunction=nil\nif awardName==\"Landlord\" then\nscoringFunction=awardScoring.scoreLandlord(awardName)\nelseif awardName==\"Banker\" then\nscoringFunction=awardScoring.scoreBanker(awardName)\nelseif awardName==\"Scientist\" then\nscoringFunction=awardScoring.scoreScientist(awardName)\nelseif awardName==\"Thermalist\" then\nscoringFunction=awardScoring.scoreThermalist(awardName)\nelseif awardName==\"Miner\" then\nscoringFunction=awardScoring.scoreMiner(awardName)\nelseif awardName==\"Cultivator\" then\nscoringFunction=awardScoring.scoreCultivator(awardName)\nelseif awardName==\"Magnate\" then\nscoringFunction=awardScoring.scoreMagnate(awardName)\nelseif awardName==\"Space Baron\" then\nscoringFunction=awardScoring.scoreSpaceBaron(awardName)\nelseif awardName==\"Excentric\" then\nscoringFunction=awardScoring.scoreExcentric(awardName)\nelseif awardName==\"Contractor\" then\nscoringFunction=awardScoring.scoreContractor(awardName)\nelseif awardName==\"Celebrity\" then\nscoringFunction=awardScoring.scoreCelebrity(awardName)\nelseif awardName==\"Industrialist\" then\nscoringFunction=awardScoring.scoreIndustrialist(awardName)\nelseif awardName==\"Desert Settler\" then\nscoringFunction=awardScoring.scoreDesertSettler(awardName)\nelseif awardName==\"Estate Dealer\" then\nscoringFunction=awardScoring.scoreEstateDealer(awardName)\nelseif awardName==\"Benefactor\" then\nscoringFunction=awardScoring.scoreBenefactor(awardName)\nelseif awardName==\"Cosmic Settler\" then\nscoringFunction=awardScoring.scoreCosmicSettler(awardName)\nelseif awardName==\"Botanist\" then\nscoringFunction=awardScoring.scoreBotanist(awardName)\nelseif awardName==\"Coordinator\" then\nscoringFunction=awardScoring.scoreCoordinator(awardName)\nelseif awardName==\"Zoologist\" then\nscoringFunction=awardScoring.scoreZoologist(awardName)\nelseif awardName==\"Manufacturer\" then\nscoringFunction=awardScoring.scoreManufacturer(awardName)\nelseif awardName==\"Venuphile\" then\nscoringFunction=awardScoring.scoreVenuphile(awardName)\nend\nlocal comparsionTable={}\nif scoringFunction~=nil then\nfor _,player in pairs(gameState.allPlayers) do\ncomparsionTable[player.color]=scoringFunction(player)\nend\nelse\nlogging.broadcastToAll(\"Unknown award \"..awardName..\". Please report as a bug and calculate award VPs manually.\",{1,0.5,0,1},loggingModes.exception)\nend\nreturn awardScoring.determineFirstAndSecondPlaces(comparsionTable,awardName)\nend\nawardScoring.scoreLandlord=function(awardName)\nreturn function(player)\nlocal amount=0\nfor _,guid in pairs(gameState.citiesInSpaceGuids) do\nlocal obj=getObjectFromGUID(guid)\nif obj~=nil then\nif obj.getVar(\"objectState\").ownedByPlayer==player.color then\namount=amount + 1\nend\nend\nend\nfor i,jkMatrix in pairs(gameMap.tiles) do\nfor j,kMatrix in pairs(jkMatrix) do\nfor k,tile in pairs(kMatrix) do\nif tile.tileObjects~=nil then\nfor _,tileObject in pairs(tile.tileObjects) do\nif tileObject.owner==player.color then\namount=amount + 1\nbreak\nend\nend\nend\nend\nend\nend\nreturn amount\nend\nend\nawardScoring.scoreBanker=function(awardName)\nreturn function(player)\nreturn getPlayerProduction({resourceType=\"credits\",playerColor=player.color})\nend\nend\nawardScoring.scoreScientist=function(awardName)\nreturn function(player)\nreturn player.tagSystem.tagCounts.Science\nend\nend\nawardScoring.scoreThermalist=function(awardName)\nreturn function(player)\nreturn getPlayerResource({resourceType=\"heat\",playerColor=player.color})\nend\nend\nawardScoring.scoreMiner=function(awardName)\nreturn function(player)\nlocal amount=getPlayerResource({resourceType=\"steel\",playerColor=player.color})\namount=amount + getPlayerResource({resourceType=\"titanium\",playerColor=player.color})\nreturn amount\nend\nend\nawardScoring.scoreCultivator=function(awardName)\nreturn function(player)\nreturn player.ownedObjects.greenery\nend\nend\nawardScoring.scoreMagnate=function(awardName)\nreturn function(player)\nreturn #player.ownedCards.Green\nend\nend\nawardScoring.scoreSpaceBaron=function(awardName)\nreturn function(player)\nreturn player.tagSystem.tagCounts.Space\nend\nend\nawardScoring.scoreExcentric=function(awardName)\nreturn function(player)\nlocal amount=0\nlocal cardsToConsider=tableHelpers.combineSingleValueTables({player.ownedCards[\"Blue\"],player.ownedCards[\"Corp\"]})\nfor _,card in pairs(cardsToConsider) do\nlocal cardObject=getObjectFromGUID(card.guid)\nif cardObject==nil then\nprintToColor(\"Card \"..card.name..\" didn't get considered for the \"..awardName..\" award - card is probably in a stack.\",player.color,player.color)\nelse\nlocal tokensAccepted=cardObject.call(\"getAcceptedTokenList\")\nif next(tokensAccepted)~=nil then\namount=amount + cardObject.getVar(\"cardState\").counters[1]\nif cardObject.getGUID()==\"5052f7\" then\namount=amount + cardObject.getVar(\"cardState\").counters[2]\nend\nend\nend\nend\nreturn amount\nend\nend\nawardScoring.scoreContractor=function(awardName)\nreturn function(player)\nreturn player.tagSystem.tagCounts.Building\nend\nend\nawardScoring.scoreCelebrity=function(awardName)\nreturn function(player)\nreturn findCostyCards(player,20)\nend\nend\nawardScoring.scoreIndustrialist=function(awardName)\nreturn function(player)\nlocal amount=getPlayerResource({resourceType=\"steel\",playerColor=player.color})\namount=amount + getPlayerResource({resourceType=\"energy\",playerColor=player.color})\nreturn amount\nend\nend\nawardScoring.scoreDesertSettler=function(awardName)\nreturn function(player)\nlocal jStart=math.floor((#gameMap.tiles[0]+1)/2)\nlocal tilesCoordsOfInterest={}\nfor j=1,math.floor((#gameMap.tiles[0]+1)/2) do\ntable.insert(tilesCoordsOfInterest,normalizeIndices({0,jStart + j,0}))\nfor i=1,100,1 do\nif hexMapHelpers.getTileFromArbitraryHexCoords(gameMap,{i,jStart + j,0})~=nil then\ntable.insert(tilesCoordsOfInterest,normalizeIndices({i,jStart + j,0}))\nelse\nbreak\nend\nend\nfor i=-1,-100,-1 do\nif hexMapHelpers.getTileFromArbitraryHexCoords(gameMap,{i,jStart + j,0})~=nil then\ntable.insert(tilesCoordsOfInterest,normalizeIndices({i,jStart + j,0}))\nelse\nbreak\nend\nend\nend\nlocal ownedTiles=0\nfor _,tileCoordinates in pairs(tilesCoordsOfInterest) do\nlocal tile=gameMap.tiles[tileCoordinates[1]][tileCoordinates[2]][tileCoordinates[3]]\nif tile.tileObjects~=nil then\nfor _,obj in pairs(tile.tileObjects) do\nif obj.owner==player.color then\nownedTiles=ownedTiles + 1\nbreak\nend\nend\nend\nend\nreturn ownedTiles\nend\nend\nawardScoring.scoreEstateDealer=function(awardName)\nreturn function(player)\nlocal amount=0\nfor i,jkMatrix in pairs(gameMap.tiles) do\nfor j,kMatrix in pairs(jkMatrix) do\nfor k,tile in pairs(kMatrix) do\nif tile.tileObjects~=nil then\nlocal adjacencyFulfilled=false\nfor _,tileObject in pairs(tile.tileObjects) do\nif tileObject.owner==player.color then\nfor _,neighbourTile in pairs(Global.call(\"hexMap_getNeighbours\",{indices={i,j,k}})) do\nif neighbourTile.tileObjects~=nil then\nfor _,neighbourTileObject in pairs(neighbourTile.tileObjects) do\nif neighbourTileObject.objectName==\"ocean\" and not adjacencyFulfilled then\namount=amount + 1\nadjacencyFulfilled=true\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nreturn amount\nend\nend\nawardScoring.scoreBenefactor=function(awardName)\nreturn function(player)\nreturn player.terraformingRating\nend\nend\nawardScoring.scoreCosmicSettler=function(awardName)\nreturn function(player)\nlocal amount=0\nfor _,guid in pairs(gameState.citiesInSpaceGuids) do\nlocal obj=getObjectFromGUID(guid)\nif obj~=nil then\nif obj.getVar(\"objectState\").ownedByPlayer==player.color then\namount=amount + 1\nend\nend\nend\nreturn amount\nend\nend\nawardScoring.scoreBotanist=function(awardName)\nreturn function(player)\nreturn getPlayerProduction({resourceType=\"plants\",playerColor=player.color})\nend\nend\nawardScoring.scoreCoordinator=function(awardName)\nreturn function(player)\nreturn player.tagSystem.tagCounts.Event\nend\nend\nawardScoring.scoreZoologist=function(awardName)\nreturn function(player)\nreturn player.ownedObjects.animal\nend\nend\nawardScoring.scoreManufacturer=function(awardName)\nreturn function(player)\nreturn #player.ownedCards.Blue\nend\nend\nawardScoring.scoreVenuphile=function(awardName)\nreturn function(player)\nreturn player.tagSystem.tagCounts.Venus\nend\nend\nawardScoring.determineFirstAndSecondPlaces=function(comparsionTable,awardName)\nlocal firstPlaces={}\nlocal secondPlaces={}\nlocal playerCount=0\nfor color,amount in pairs(comparsionTable) do\nplayerCount=playerCount + 1\nif amount <= 0 then\nprintToColor(\"You do not compete for the '\"..awardName..\"' award. (Your contribution is 0)\",color,color)\nelseif #firstPlaces==0 then\ntable.insert(firstPlaces,{color=color,amount=amount})\nelseif amount < firstPlaces[1].amount and #firstPlaces==1 then\nif #secondPlaces==0 then\ntable.insert(secondPlaces,{color=color,amount=amount})\nelseif amount==secondPlaces[1].amount then\ntable.insert(secondPlaces,{color=color,amount=amount})\nelseif amount > secondPlaces[1].amount then\nsecondPlaces={}\ntable.insert(secondPlaces,{color=color,amount=amount})\nend\nelseif amount==firstPlaces[1].amount then\ntable.insert(firstPlaces,{color=color,amount=amount})\nsecondPlaces={}\nelseif amount > firstPlaces[1].amount then\nsecondPlaces={}\nfor _,colorAndAmount in pairs(firstPlaces) do\ntable.insert(secondPlaces,{color=colorAndAmount.color,amount=colorAndAmount.amount})\nend\nfirstPlaces={}\ntable.insert(firstPlaces,{color=color,amount=amount})\nend\nend\nif playerCount==2 then\nreturn {firstPlaces=firstPlaces,secondPlaces={}}\nelseif playerCount > 2 then\nreturn {firstPlaces=firstPlaces,secondPlaces=secondPlaces}\nelse\nreturn {firstPlaces={},secondPlaces={}}\nend\nend","n96":"globalParameterSystem={}\r\nglobalParameterSystem.values={\r\ntemperature={\r\nvalue=-30,\r\nstepIndex=1,\r\nselection=1,\r\nextra=0,\r\nisDone=false,\r\nfriendlyName=\"Temperature\",\r\ntokenName=\"temperatureToken\",\r\nbonusSelection=1,\r\naresSelection=1,\r\n},\r\noxygen={\r\nvalue=0,\r\nstepIndex=1,\r\nselection=1,\r\nextra=0,\r\nisDone=false,\r\nfriendlyName=\"Oxygen\",\r\ntokenName=\"oxygenToken\",\r\nbonusSelection=1,\r\naresSelection=1,\r\n},\r\nvenus={\r\nvalue=0,\r\nstepIndex=1,\r\nselection=1,\r\nextra=0,\r\nisDone=false,\r\nfriendlyName=\"Venus\",\r\ntokenName=\"scrappingToken\",\r\nbonusSelection=1,\r\naresSelection=1,\r\n},\r\nocean={\r\nvalue=0,\r\nstepIndex=1,\r\nselection=1,\r\nextra=0,\r\nisDone=false,\r\nfriendlyName=\"Oceans\",\r\ntokenName=\"oceanToken\",\r\nbonusSelection=1,\r\naresSelection=1,\r\n},\r\n}\r\nglobalParameterSystem.increaseParameterMax=function(globalParameter)\r\nlocal steps=globalParameter.mappings[values.selection].steps\r\nsteps[#steps+1]=2*steps[#steps] - steps[#steps-1]\r\nend\r\nglobalParameterSystem.changeParameter=function(globalParameter,values,delta,playerColor,triggerEventType)\r\nlocal steps=globalParameter.mappings[values.selection].steps\r\nlocal currentStep=values.stepIndex\r\nlocal maxSteps=#steps\r\nlocal isAllowed=false\r\nif currentStep + delta > maxSteps then\r\nlogging.printToAll(values.friendlyName..\" is at maximum!\",{1,0,0},loggingModes.essential)\r\nelseif currentStep + delta > 0 and currentStep + delta <= maxSteps then\r\nvalues.stepIndex=currentStep + delta\r\nvalues.value=steps[values.stepIndex]\r\nglobalParameterSystem.updateMarker(globalParameter,steps,steps[currentStep + delta],values.tokenName)\r\nif delta > 0 then\r\nif gameState.currentPhase==phases.generationPhase or gameState.currentPhase==phases.draftingPhase then\r\nfor _,entry in pairs(globalParameter.bonus[values.bonusSelection]) do\r\nif entry.value==values.value then\r\nobjectActivationSystem_doAction({activationEffects=entry.activationEffects,playerColor=playerColor,sourceName=values.friendlyName..\" change\"})\r\nbreak\r\nend\r\nend\r\nend\r\nif gameState.ares and globalParameter.ares~=nil and globalParameter.ares[values.aresSelection]~=nil then\r\nfor _,entry in pairs(globalParameter.ares[values.aresSelection]) do\r\nif entry.value==values.value then\r\nlocal adjustedActivationEffects={}\r\nif gameState.currentPhase~=phases.generationPhase then\r\nadjustedActivationEffects={effects={}}\r\nfor _,effect in pairs(entry.activationEffects.effects) do\r\nif effect~=\"TR\" then\r\ntable.insert(adjustedActivationEffects.effects,effect)\r\nend\r\nend\r\nelse\r\nadjustedActivationEffects=entry.activationEffects\r\nend\r\nobjectActivationSystem_doAction({activationEffects=adjustedActivationEffects,playerColor=playerColor,sourceName=values.friendlyName..\" change\"})\r\nbreak\r\nend\r\nend\r\nend\r\nend\r\nisAllowed=true\r\nelseif currentStep + delta <= 0 then\r\nlogging.printToAll(values.friendlyName..\" is at minimum!\",{1,0,0},loggingModes.essential)\r\nend\r\nif not values.isDone and ( currentStep==maxSteps or currentStep + delta >= maxSteps ) then\r\nlogging.broadcastToAll(values.friendlyName..\" is now at maximum!\",{1,0,0},loggingModes.essential)\r\nvalues.isDone=true\r\nelseif values.isDone and ( currentStep~=maxSteps or currentStep + delta < maxSteps ) then\r\nvalues.isDone=false\r\nend\r\nif isAllowed and delta > 0 then\r\nlogging.printToAll(getPlayerByColor(playerColor).name..\" has increased \"..values.friendlyName..\" by \"..delta,playerColor,loggingModes.essential)\r\nif gameState.currentPlayer~=-1 then\r\nincreasePlayerTRByColor(playerColor,values.friendlyName..\" has been increased.\")\r\nend\r\nelseif isAllowed and delta < 0 then\r\nlogging.printToAll(getPlayerByColor(playerColor).name..\" has decreased \"..values.friendlyName..\" by \"..delta,playerColor,loggingModes.essential)\r\nif gameState.currentPlayer~=-1 then\r\ndecreasePlayerTRByColor(playerColor,values.friendlyName..\" has been decreased.\")\r\nend\r\nend\r\nif isAllowed and triggerEventType~=nil then\r\nGlobal.call(\"eventHandling_triggerEvent\",{triggeredByColor=playerColor,triggerType=triggerEventType})\r\nend\r\nend\r\nglobalParameterSystem.setupButtons=function()\r\nfor name,globalParameterData in pairs(globalParameters) do\r\nif name~=venus or gameState.activeExpansions.venus then\r\nif globalParameterData.buttons~=nil then\r\nlocal trackObj=getObjectFromGUID(globalParameterData.objectGuid)\r\nfor _,buttonInfo in pairs(globalParameterData.buttons) do\r\ntrackObj.createButton(buttonInfo)\r\nend\r\nend\r\nend\r\nend\r\nend\r\nglobalParameterSystem.bonusSetup=function()\r\nglobalParameterSystem.spawnBonusMarkers(globalParameters.oxygen,\r\nglobalParameters.oxygen.mappings[globalParameterSystem.values.oxygen.selection].steps,\r\nglobalParameters.oxygen.bonus[globalParameterSystem.values.oxygen.bonusSelection])\r\nglobalParameterSystem.spawnBonusMarkers(globalParameters.temperature,\r\nglobalParameters.temperature.mappings[globalParameterSystem.values.temperature.selection].steps,\r\nglobalParameters.temperature.bonus[globalParameterSystem.values.temperature.bonusSelection])\r\nglobalParameterSystem.spawnBonusMarkers(globalParameters.ocean,\r\nglobalParameters.ocean.mappings[globalParameterSystem.values.ocean.selection].steps,\r\nglobalParameters.ocean.bonus[globalParameterSystem.values.ocean.bonusSelection])\r\nif gameState.venus then\r\nglobalParameterSystem.spawnBonusMarkers(globalParameters.venus,\r\nglobalParameters.venus.mappings[globalParameterSystem.values.venus.selection].steps,\r\nglobalParameters.venus.bonus[globalParameterSystem.values.venus.bonusSelection])\r\nend\r\nif gameState.ares then\r\nglobalParameterSystem.spawnHazardMarkers(\"oxygen\",\r\nglobalParameters.oxygen.mappings[globalParameterSystem.values.oxygen.selection].steps,\r\nglobalParameters.oxygen.ares[globalParameterSystem.values.oxygen.aresSelection])\r\nglobalParameterSystem.spawnHazardMarkers(\"temperature\",\r\nglobalParameters.temperature.mappings[globalParameterSystem.values.temperature.selection].steps,\r\nglobalParameters.temperature.ares[globalParameterSystem.values.temperature.aresSelection])\r\nglobalParameterSystem.spawnHazardMarkers(\"ocean\",\r\nglobalParameters.ocean.mappings[globalParameterSystem.values.ocean.selection].steps,\r\nglobalParameters.ocean.ares[globalParameterSystem.values.ocean.aresSelection])\r\nend\r\nend\r\nglobalParameterSystem.updateMarker=function(globalParameter,steps,currentStep,markerObjectName)\r\nlocal trackObject=getObjectFromGUID(globalParameter.objectGuid)\r\nlocal localTransform=computeTransformOnCircle(globalParameter.startTransform,globalParameter.finalTransform,\r\nsteps,currentStep)\r\nlocal rotatedTransform=rotateTransformAroundY(localTransform,trackObject.getRotation()[1] - 180,globalParameter.trackRotation[2])\r\nlocal targetPosition=vectorHelpers.addVectors(vectorHelpers.scaleVectorByVector(rotatedTransform.pos,trackObject.getScale()),trackObject.getPosition())\r\ntargetPosition=vectorHelpers.addVectors({0,0.25,0},targetPosition)\r\nlocal marker=gameObjectHelpers.getObjectByName(markerObjectName)\r\nmarker.setPositionSmooth(targetPosition,false,true)\r\nend\r\nglobalParameterSystem.spawnHazardMarkers=function(globalParameterName,globalParameterSteps,bonusMap)\r\nlocal gpm=globalParameters[globalParameterName]\r\nlocal baseBonusMarker=gameObjectHelpers.getObjectByName(\"baseBonusTokenGuid\")\r\nlocal trackObj=getObjectFromGUID(gpm.objectGuid)\r\nfor _,entry in pairs(bonusMap) do\r\nif gpm.startTransform.rot[2]==gpm.finalTransform.rot[2] then\r\nlocal localTargetPosition=computeInterpolatedPosition(globalParameterSteps,entry.value,\r\ngpm.startTransform.pos,gpm.startTransform.rot,\r\ngpm.endTransform.pos,gpm.endTransform.rot,\r\ngpm.bonusMarkerOffset,trackObj.getScale())\r\nlocal targetPosition=vectorHelpers.addVectors(localTargetPosition,trackObj.getPosition())\r\nspawnHazardToken(targetPosition,gpm.startTransform.rot,entry.imageUrl,globalParameterName,entry.value,entry.type)\r\nelse\r\nlocal localTargetTransform=computeTransformOnCircle(gpm.startTransform,gpm.finalTransform,\r\nglobalParameterSteps,entry.value,gpm.bonusMarkerOffset)\r\nlocal rotatedTransform=rotateTransformAroundY(localTargetTransform,trackObj.getRotation()[1] - 180,gpm.trackRotation[2])\r\nlocal targetPosition=vectorHelpers.addVectors(vectorHelpers.scaleVectorByVector(rotatedTransform.pos,trackObj.getScale()),trackObj.getPosition())\r\nlocal targetRotation=rotatedTransform.rot\r\nspawnHazardToken(targetPosition,targetRotation,entry.imageUrl,globalParameterName,entry.value,entry.type)\r\nend\r\nend\r\nend\r\nglobalParameterSystem.spawnBonusMarkers=function(globalParameterMetadata,globalParameterSteps,bonusMap)\r\nlocal baseBonusMarker=gameObjectHelpers.getObjectByName(\"baseBonusTokenGuid\")\r\nlocal trackObj=getObjectFromGUID(globalParameterMetadata.objectGuid)\r\nlocal gpm=globalParameterMetadata\r\nfor _,entry in pairs(bonusMap) do\r\nif globalParameterMetadata.startTransform.rot[2]==globalParameterMetadata.finalTransform.rot[2] then\r\nlocal localTargetPosition=computeInterpolatedPosition(globalParameterSteps,entry.value,\r\ngpm.startTransform.pos,gpm.startTransform.rot,\r\ngpm.endTransform.pos,gpm.endTransform.rot,\r\nglobalParameterMetadata.bonusMarkerOffset,trackObj.getScale())\r\nlocal targetPosition=vectorHelpers.addVectors(localTargetPosition,trackObj.getPosition())\r\nspawnGlobalParameterToken(targetPosition,gpm.startTransform.rot,entry.imageUrl,entry.type)\r\nelse\r\nlocal localTargetTransform=computeTransformOnCircle(gpm.startTransform,gpm.finalTransform,\r\nglobalParameterSteps,entry.value,globalParameterMetadata.bonusMarkerOffset)\r\nlocal rotatedTransform=rotateTransformAroundY(localTargetTransform,trackObj.getRotation()[1] - 180,gpm.trackRotation[2])\r\nlocal targetPosition=vectorHelpers.addVectors(vectorHelpers.scaleVectorByVector(rotatedTransform.pos,trackObj.getScale()),trackObj.getPosition())\r\nlocal targetRotation=rotatedTransform.rot\r\nspawnGlobalParameterToken(targetPosition,targetRotation,entry.imageUrl,entry.type)\r\nend\r\nend\r\nend\r\nfunction global_getGlobalParameterCurrentValue(params)\r\nreturn globalParameterSystem.values[params.parameter].value\r\nend\r\nfunction rotateTransformAroundY(inputTransform,rotation1Angle,rotation2Angle)\r\nlocal totalRotationAngle=rotation1Angle\r\nif rotation2Angle~=nil then\r\ntotalRotationAngle=totalRotationAngle + rotation2Angle\r\nend\r\nlocal rotation=vectorHelpers.addVectors(inputTransform.rot,{0,totalRotationAngle,0})\r\nlocal rotatedPositon=vectorHelpers.rotateVectorY(inputTransform.pos,totalRotationAngle)\r\nreturn {pos=rotatedPositon,rot=rotation}\r\nend\r\nfunction spawnGlobalParameterToken(targetPositionIn,targetRotationIn,imageUrl)\r\nlocal targetPosition=targetPositionIn\r\nlocal targetRotation=vectorHelpers.truncateVectorEntries(targetRotationIn,0)\r\nlocal targetScale=gameObjectHelpers.getObjectByName(\"baseBonusTokenGuid\").getScale()\r\nlocal cloneCallback=function(clonedGuid)\r\nlocal clonedTile=getObjectFromGUID(clonedGuid)\r\nclonedTile.setLock(false)\r\nclonedTile.interactable=false\r\nclonedTile.setCustomObject({image=imageUrl})\r\nlocal reloadedTile=clonedTile.reload()\r\nWait.time(function()\r\nlocal twiceReloadedTile=reloadedTile.reload()\r\nWait.time(function()\r\ntwiceReloadedTile.setLock(true)\r\ntwiceReloadedTile.setScale(targetScale)\r\nend,2)\r\nend,1)\r\nend\r\nfastCreateClonableObject(gameObjectHelpers.getGuidByName(\"baseBonusTokenGuid\"),targetPosition,targetRotation,cloneCallback)\r\nend\r\nfunction spawnHazardToken(targetPositionIn,targetRotationIn,imageUrl,globalParameterName,value,type)\r\nlocal targetPosition=targetPositionIn\r\nlocal targetRotation=vectorHelpers.truncateVectorEntries(targetRotationIn,0)\r\nlocal targetScale=gameObjectHelpers.getObjectByName(\"baseBonusTokenGuid\").getScale()\r\nlocal cloneCallback=function(clonedGuid)\r\nlocal clonedTile=getObjectFromGUID(clonedGuid)\r\nclonedTile.setLock(false)\r\nclonedTile.interactable=false\r\nclonedTile.setCustomObject({image=imageUrl})\r\nWait.time(function()\r\nlocal reloadedTile=clonedTile.reload()\r\nWait.time(function()\r\nreloadedTile.setLock(true)\r\nreloadedTile.setScale(targetScale)\r\nif type~=nil then\r\nreloadedTile.call(\"setType\",{bonusType=type})\r\nend\r\ntable.insert(gameState.aresData.markers,{globalParameterName=globalParameterName,value=value,markerGuid=reloadedTile.getGUID()})\r\nend,1)\r\nend,2)\r\nend\r\nfastCreateClonableObject(gameObjectHelpers.getGuidByName(\"baseBonusTokenGuid\"),targetPosition,targetRotation,cloneCallback)\r\nend\r\nfunction computeTransformOnCircle(startTransform,endTransform,steps,value,offset)\r\nif offset==nil then\r\noffset={0,0,0}\r\nend\r\nfor i,stepValue in pairs(steps) do\r\nif stepValue==value then\r\nlocal r=computeRadius(startTransform,endTransform)\r\nlocal mPoint=computeMiddlePoint(startTransform,endTransform,r)\r\nlocal angleStepInDegrees=(endTransform.rot[2] - startTransform.rot[2])/(#steps-1)\r\nlocal targetRot={0,startTransform.rot[2] + (i - 1) * angleStepInDegrees,0}\r\nlocal sinAngle=math.sin(targetRot[2]*math.pi/180)\r\nlocal cosAngle=math.cos(targetRot[2]*math.pi/180)\r\nlocal a=vectorHelpers.vectorMagnitude(offset)\r\nlocal b=vectorHelpers.scaleVector({sinAngle,0,cosAngle},a)\r\nlocal rPlusOffset=r + vectorHelpers.vectorMagnitude(b)\r\nlocal targetPos=vectorHelpers.addVectors(mPoint,vectorHelpers.scaleVector({-sinAngle,0,-cosAngle},rPlusOffset))\r\nreturn {pos=targetPos,rot=targetRot}\r\nend\r\nend\r\nend\r\nfunction computeMiddlePoint(startTransform,endTransform,radius)\r\nlocal p2=endTransform.pos\r\nlocal sinBeta=math.sin(endTransform.rot[2]*math.pi/180)\r\nlocal cosBeta=math.cos(endTransform.rot[2]*math.pi/180)\r\nlocal vec=vectorHelpers.scaleVector({sinBeta,0,cosBeta},radius)\r\nreturn vectorHelpers.addVectors(vec,p2)\r\nend\r\nfunction computeRadius(startTransform,endTransform)\r\nlocal p1=startTransform.pos\r\nlocal p2=endTransform.pos\r\nlocal sinAlpha=math.sin(startTransform.rot[2]*math.pi/180)\r\nlocal cosAlpha=math.cos(startTransform.rot[2]*math.pi/180)\r\nlocal sinBeta=math.sin(endTransform.rot[2]*math.pi/180)\r\nlocal cosBeta=math.cos(endTransform.rot[2]*math.pi/180)\r\nlocal termA=(sinBeta/sinAlpha) + (p2[1] - p1[1])/sinAlpha\r\nreturn (p2[3]-p1[3])/(termA*cosAlpha - cosBeta)\r\nend\r","n97":"aresFunctions={}\naresFunctions.finishSetup=function()\nfunction finishSetupCoroutine()\nif randomizer.isDone~=nil then\nwhile not randomizer.isDone or randomizer.mapGenerationInProgress do\ncoroutine.yield(0)\nend\nend\nif #gameState.allPlayers < 4 then\naresFunctions.spawnDuststorms(1)\naresFunctions.spawnDuststorms(2)\nelseif #gameState.allPlayers==4 then\naresFunctions.spawnDuststorms(2)\nelse\naresFunctions.spawnDuststorms(1)\nend\nreturn 1\nend\nstartLuaCoroutine(self,\"finishSetupCoroutine\")\nend\naresFunctions.spawnErosions=function(numberOfErosions)\ntransientState.aresData.oppositeCorner=false\ntransientState.aresData.stepsToWalk=0\nif numberOfErosions==1 then\nsearchForCard({amountToSearchFor=2,callbackInfo={callbackFuncName=\"spawnErosionsCallback\"}})\nelse\nfor i=1,numberOfErosions do\nsearchForCard({amountToSearchFor=1,callbackInfo={callbackFuncName=\"spawnErosionsCallback\"}})\nend\nend\nend\naresFunctions.spawnDuststorms=function(numberOfDuststorms)\ntransientState.aresData.oppositeCorner=false\ntransientState.aresData.stepsToWalk=0\nif numberOfDuststorms==1 then\nsearchForCard({amountToSearchFor=2,callbackInfo={callbackFuncName=\"spawnDuststormsCallback\"}})\nelse\nfor i=1,numberOfDuststorms do\nsearchForCard({amountToSearchFor=1,callbackInfo={callbackFuncName=\"spawnDuststormsCallback\"}})\nend\nend\nend\nfunction spawnErosionsCallback(params)\nlocal card=getObjectFromGUID(params.cardGuid)\nlocal searchIsDone=params.searchIsDone\nlocal steps=tonumber(descriptionInterpreter.getValuesFromInput(card.getDescription(),\"Cost:\")[1])\nspawnAresTiles(steps,\"erosionBag\",searchIsDone)\nend\nfunction spawnDuststormsCallback(params)\nlocal card=getObjectFromGUID(params.cardGuid)\nlocal searchIsDone=params.searchIsDone\nlocal steps=tonumber(descriptionInterpreter.getValuesFromInput(card.getDescription(),\"Cost:\")[1])\nspawnAresTiles(steps,\"duststormBag\",searchIsDone)\nend\nfunction spawnAresTiles(steps,sourceBagName,searchIsDone)\nfunction spawnTileCoroutine()\nwhile transientState.spawningTile do\ncoroutine.yield(0)\nend\ntransientState.spawningTile=true\ntransientState.aresData.stepsToWalk=transientState.aresData.stepsToWalk + steps\nif searchIsDone then\nlocal startingIndices={0,0,0}\nlocal direction=1\nif transientState.aresData.oppositeCorner==true then\nlocal i=0\nlocal j=#gameMap.tiles[0]\nlocal k=0\nstartingIndices={i,j,k}\ndirection=-1\nend\nlocal targetIndices=hexMapHelpers.walkMapHorizontally(\ngameMap,\ntransientState.aresData.stepsToWalk - 1,\ndirection,\nstartingIndices,\n{mapFeatures.tileType.ocean,mapFeatures.tileType.nocticsCity},\n{}\n)\nlocal duststormSource=gameObjectHelpers.getObjectByName(sourceBagName)\nlocal duststorm=duststormSource.takeObject({\nposition=hexMapHelpers.indicesToWorldCoordinates(gameMap,targetIndices,marsMapTile),\nrotation={0,270,0}\n})\nlocal waitFrames=0\nwhile waitFrames < 30 do\nif duststorm.resting then\nwaitFrames=waitFrames + 1\nelse\nwaitFrames=0\nend\ncoroutine.yield(0)\nend\nduststorm.call(\"activateObjectRemotely\",{playerColor=nil})\nfor i=1,20 do\ncoroutine.yield(0)\nend\ntransientState.aresData.stepsToWalk=0\ntransientState.aresData.oppositeCorner=not transientState.aresData.oppositeCorner\nend\ntransientState.spawningTile=false\nreturn 1\nend\nstartLuaCoroutine(self,\"spawnTileCoroutine\")\nend\naresFunctions.removeAllDuststorms=function()\nlocal waitCounter=0\nfor i,jkMatrix in pairs(gameMap.tiles) do\nfor j,kMatrix in pairs(jkMatrix) do\nfor k,tile in pairs(kMatrix) do\nif tile.tileObjects~=nil then\nfor _,tileObject in pairs(tile.tileObjects) do\nif tileObject.objectName==\"Duststorm\" then\nlocal obj=getObjectFromGUID(tileObject.guid)\nif not obj.getVar(\"objectState\").indestructible then\nWait.frames(|| obj.call(\"deactivateObjectRemotely\",{playerColor=nil}),15 + 30 * waitCounter)\nwaitCounter=waitCounter + 1\nend\nend\nend\nend\nend\nend\nend\nend\naresFunctions.flipErosions=function()\ngameState.aresData.erosionTilesFlipped=not gameState.aresData.erosionTilesFlipped\nflipAresTiles(\"Erosion\")\nend\naresFunctions.flipDuststorms=function()\ngameState.aresData.duststormTilesFlipped=not gameState.aresData.duststormTilesFlipped\nflipAresTiles(\"Duststorm\")\nend\naresFunctions.generateProductionMalusMetadata=function(playerColor,effectStrength)\nlocal tmPlayer=getPlayerByColor(playerColor)\nif effectStrength > 0 then\neffectStrength=-effectStrength\nend\nlocal metadata={}\nmetadata.tokenTitle=\"Production malus (\"..effectStrength..\"). Has to be dropped on a production counter you own.\"\nmetadata.owner=playerColor\nmetadata.tokenContext={tokenType=programableActionTokenData.types.aresProductionMalus,malus=effectStrength}\nreturn metadata\nend\nfunction flipAresTiles(tileName)\nfor i,jkMatrix in pairs(gameMap.tiles) do\nfor j,kMatrix in pairs(jkMatrix) do\nfor k,tile in pairs(kMatrix) do\nif tile.tileObjects~=nil then\nfor _,tileObject in pairs(tile.tileObjects) do\nif tileObject.objectName==tileName then\nlocal obj=getObjectFromGUID(tileObject.guid)\nobj.setPosition(vectorHelpers.addVectors(obj.getPosition(),{0,0.2,0}))\nobj.setLock(false)\nobj.flip()\nWait.frames(function() Wait.condition(function() obj.setLock(true) end,function() return obj.resting end) end,15)\ntileObject.adjacenyEffects={effects={\"BigProductionMalus\"}}\nend\nend\nend\nend\nend\nend\nend\nfunction moveAresHazardMarker(params)\nlocal direction=params.direction\nlocal hazardMarkerGuid=params.hazardMarkerGuid\nlocal markerObj=getObjectFromGUID(hazardMarkerGuid)\nfor _,info in pairs(gameState.aresData.markers) do\nif info.markerGuid==hazardMarkerGuid then\nlocal metadata=globalParameters[info.globalParameterName]\nlocal globalParameterSteps=metadata.mappings[globalParameterSystem.values[info.globalParameterName].selection].steps\nlocal value=0\nfor index,entry in pairs(metadata.ares.Default) do\nif entry.value==info.value then\nlocal delta=0\nfor i,stepValue in pairs(globalParameterSteps) do\nif stepValue==entry.value then\ndelta=globalParameterSteps[i+direction] - globalParameterSteps[i]\nend\nend\nmetadata.ares.Default[index].value=metadata.ares.Default[index].value + delta\nlocal trackObj=getObjectFromGUID(metadata.objectGuid)\nlocal localTargetTransform=computeTransformOnCircle(metadata.startTransform,metadata.finalTransform,\nglobalParameterSteps,entry.value,metadata.bonusMarkerOffset)\nlocal rotatedTransform=rotateTransformAroundY(localTargetTransform,trackObj.getRotation()[1] - 180,metadata.trackRotation[2])\nlocal targetPosition=vectorHelpers.addVectors(vectorHelpers.scaleVectorByVector(rotatedTransform.pos,trackObj.getScale()),trackObj.getPosition())\nlocal targetRotation=rotatedTransform.rot\nmarkerObj.setLock(false)\nmarkerObj.setPosition(targetPosition)\nmarkerObj.setRotation(targetRotation)\nWait.time(|| markerObj.setLock(true),3)\nreturn\nend\nend\nend\nend\nend","n98":"terraformingParametersMap={}\r\nterraformingParametersMap[\"Ocean\"]=\"Ocean\"\r\nterraformingParametersMap[\"Oceans\"]=\"Ocean\"\r\nterraformingParametersMap[\"Temp\"]=\"Temp\"\r\nterraformingParametersMap[\"Temperature\"]=\"Temp\"\r\nterraformingParametersMap[\"O2\"]=\"O2\"\r\nterraformingParametersMap[\"Oxygen\"]=\"O2\"\r\nterraformingParametersMap[\"TFVenus\"]=\"TFVenus\"\r\nrequirementType={\r\nglobalParameter=\"globalParameter\",\r\ntags=\"tags\",\r\ndelegate=\"delegate\",\r\npartyLeader=\"partyLeader\",\r\nchairman=\"chairman\",\r\ninfrastructure=\"infrastructure\",\r\nparty=\"party\",\r\nterraformingRating=\"terraformingRating\",\r\nproduction=\"production\",\r\nownedObjectsInPlay=\"ownedObjectsInPlay\",\r\n}\r\nrequirementTarget={\r\nany=\"any\",\r\nown=\"own\",\r\nother=\"other\",\r\notherSingle=\"otherSingle\",\r\nneutral=\"neutral\",\r\n}\r\nrequirementTargetMap={}\r\nrequirementTargetMap[\"Any\"]=requirementTarget.any\r\nrequirementTargetMap[\"any\"]=requirementTarget.any\r\nrequirementTargetMap[\"Own\"]=requirementTarget.own\r\nrequirementTargetMap[\"own\"]=requirementTarget.own\r\nrequirementTargetMap[\"Other\"]=requirementTarget.other\r\nrequirementTargetMap[\"other\"]=requirementTarget.other\r\nrequirementTargetMap[\"OtherSingle\"]=requirementTarget.otherSingle\r\nrequirementTargetMap[\"otherSingle\"]=requirementTarget.otherSingle\r\nrequirementTargetMap[\"Neutral\"]=requirementTarget.neutral\r\nrequirementTargetMap[\"neutral\"]=requirementTarget.neutral\r\nrawRequirementInterpreter={}\r\nrawRequirementInterpreter.extras={wildCardTagsAvailable=0}\r\nrawRequirementInterpreter.resetExtrasForPlayer=function(tmPlayer)\r\nrawRequirementInterpreter.extras={wildCardTagsAvailable=getPlayerTags({tagName=\"WildCard\",playerColor=tmPlayer.color})}\r\nend\r\nrawRequirementInterpreter.evaluateRequirement=function(tmPlayer,key,value)\r\nlocal requirement=translateRawRequirement(key,value)\r\nif requirement==nil then\r\nlogging.printToAll(\"Unknown requirement found - ignoring\",{1,0.25,0},{1,0,0},loggingModes.exception)\r\nreturn true\r\nend\r\nlocal checkValue=getRequirementCheckAgainstValue(tmPlayer,requirement)\r\nlocal result=isRequirementFulfilled(tmPlayer,requirement,checkValue)\r\nreturn result\r\nend\r\nfunction getSpecificPlayerPropertiesRemotely(params)\r\nlocal requirement=translateRawRequirement(params.formula,0)\r\nlocal tmPlayer=getPlayerByColor(params.playerColor)\r\nreturn getRequirementCheckAgainstValue(tmPlayer,requirement)\r\nend\r\nfunction translateRawRequirement(rawKey,rawValue)\r\nlocal target=nil\r\nlocal isMax=false\r\nlocal cleanedUpKey=rawKey\r\nif string.find(cleanedUpKey,\"Max\") then\r\nisMax=true\r\ncleanedUpKey=cleanedUpKey:gsub(\"Max\",\"\")\r\nend\r\nfor reqTargetString,translatedTarget in pairs(requirementTargetMap) do\r\nif string.find(cleanedUpKey,reqTargetString) then\r\ntarget=translatedTarget\r\ncleanedUpKey=cleanedUpKey:gsub(reqTargetString,\"\")\r\nend\r\nend\r\nif target==nil then\r\ntarget=requirementTarget.any\r\nend\r\nfor _,func in pairs(requirementTranslationFunctions) do\r\nlocal requirement=func(cleanedUpKey,rawValue)\r\nif requirement~=nil then\r\nrequirement.isMax=isMax\r\nrequirement.target=target\r\nreturn requirement\r\nend\r\nend\r\nreturn nil\r\nend\r\nfunction getRequirementCheckAgainstValue(tmPlayer,requirement)\r\nfor _,func in pairs(getCheckAgainstValueFunctions) do\r\nlocal checkValue=func(tmPlayer,requirement)\r\nif checkValue~=nil then\r\nreturn checkValue\r\nend\r\nend\r\nend\r\nfunction isRequirementFulfilled(tmPlayer,requirement,relevantValue)\r\nlocal reqModifiers=tmPlayer.reqModifiers\r\nlocal permanentModifier=reqModifiers.permanent[requirement.key]\r\nlocal transientModifier=reqModifiers.transient[requirement.key]\r\nlocal totalModifier=0\r\nif permanentModifier~=nil then\r\ntotalModifier=totalModifier + permanentModifier\r\nend\r\nif transientModifier~=nil then\r\ntotalModifier=totalModifier + transientModifier\r\nend\r\nif requirement.type~=requirementType.tags then\r\nif requirement.isMax then\r\nreturn relevantValue <= requirement.value + totalModifier\r\nelse\r\nreturn relevantValue >= requirement.value - totalModifier\r\nend\r\nelse\r\nif requirement.isMax then\r\nreturn relevantValue <= requirement.value + totalModifier\r\nelse\r\nlocal targetValue=requirement.value - totalModifier\r\nif relevantValue >= targetValue then\r\nreturn true\r\nelseif relevantValue + rawRequirementInterpreter.extras.wildCardTagsAvailable >= targetValue then\r\nrawRequirementInterpreter.extras.wildCardTagsAvailable=rawRequirementInterpreter.extras.wildCardTagsAvailable - (targetValue - relevantValue)\r\nreturn true\r\nelse\r\nreturn false\r\nend\r\nend\r\nend\r\nend\r\nrequirementTranslationFunctions={}\r\nrequirementTranslationFunctions.tryTranslateGlobalParametersRequirement=function(inputKey,rawValue)\r\nfor key,translatedKey in pairs(terraformingParametersMap) do\r\nif key==inputKey then\r\nlocal requirement={}\r\nrequirement.key=translatedKey\r\nrequirement.type=requirementType.globalParameter\r\nlocal steps=nil\r\nif inputKey==\"O2\" then\r\nsteps=globalParameters.oxygen.mappings[globalParameterSystem.values.oxygen.selection].steps\r\nelseif inputKey==\"Temp\" then\r\nsteps=globalParameters.temperature.mappings[globalParameterSystem.values.temperature.selection].steps\r\nelseif inputKey==\"TFVenus\" then\r\nsteps=globalParameters.venus.mappings[globalParameterSystem.values.venus.selection].steps\r\nelseif string.lower(inputKey)==\"oceans\" or string.lower(inputKey)==\"ocean\" then\r\nsteps=globalParameters.ocean.mappings[globalParameterSystem.values.ocean.selection].steps\r\nend\r\nfor stepIndex,entry in pairs(steps) do\r\nif rawValue==entry then\r\nrequirement.value=stepIndex\r\nend\r\nend\r\nif requirement.value==nil then\r\nrequirement.value=tableHelpers.findNearestMatch(steps,rawValue).index\r\nend\r\nreturn requirement\r\nend\r\nend\r\nend\r\nrequirementTranslationFunctions.tryTranslateTagsRequirement=function(inputKey,rawValue)\r\nfor _,tagCollection in pairs(icons) do\r\nfor _,tag in ipairs(tagCollection) do\r\nif inputKey==tag then\r\nlocal requirement={}\r\nrequirement.value=rawValue\r\nrequirement.type=requirementType.tags\r\nrequirement.key=tag\r\nreturn requirement\r\nend\r\nend\r\nend\r\nend\r\nrequirementTranslationFunctions.tryTranslateDelegateRequirement=function(inputKey,rawValue)\r\nif inputKey==\"delegate\" or inputKey==\"Delegate\" then\r\nlocal requirement={}\r\nrequirement.value=rawValue\r\nrequirement.type=requirementType.delegate\r\nrequirement.key=\"delegate\"\r\nreturn requirement\r\nend\r\nend\r\nrequirementTranslationFunctions.tryTranslatePartyLeaderRequirement=function(inputKey,rawValue)\r\nif inputKey==\"partyLeader\" or inputKey==\"PartyLeader\" then\r\nlocal requirement={}\r\nrequirement.value=rawValue\r\nrequirement.type=requirementType.partyLeader\r\nrequirement.key=\"partyLeader\"\r\nreturn requirement\r\nend\r\nend\r\nrequirementTranslationFunctions.tryTranslateChairmanRequirement=function(inputKey,rawValue)\r\nif inputKey==\"chairman\" or inputKey==\"Chairman\" then\r\nlocal requirement={}\r\nrequirement.value=rawValue\r\nrequirement.type=requirementType.chairman\r\nrequirement.key=\"chairman\"\r\nreturn requirement\r\nend\r\nend\r\nrequirementTranslationFunctions.tryTranslateInfrastructureRequirement=function(inputKey,rawValue)\r\nif inputKey==\"infrastructure\" or inputKey==\"Infrastructure\" or inputKey==\"SpaceBiggerThanInfrastructure\" then\r\nlocal requirement={}\r\nrequirement.value=1\r\nrequirement.type=requirementType.infrastructure\r\nrequirement.key=\"infrastructure\"\r\nreturn requirement\r\nend\r\nend\r\nrequirementTranslationFunctions.tryTranslatePartyRequirement=function(inputKey,rawValue)\r\nfor partyId,partyName in pairs(marsSenate.parties) do\r\nlocal requirement={}\r\nif partyName==inputKey then\r\nif rawValue~=nil then\r\nrequirement.value=rawValue\r\nelse\r\nrequirement.value=2\r\nend\r\nrequirement.type=requirementType.party\r\nrequirement.key=partyName\r\nreturn requirement\r\nend\r\nend\r\nend\r\nrequirementTranslationFunctions.tryTranslateTagComparsionRequirement=function(inputKey,rawValue)\r\nfor _,tagCollection in pairs(icons) do\r\nfor _,tag in ipairs(tagCollection) do\r\nif inputKey==tag then\r\nlocal requirement={}\r\nrequirement.value=rawValue\r\nrequirement.type=requirementType.tags\r\nrequirement.key=tag\r\nreturn requirement\r\nend\r\nend\r\nend\r\nend\r\nrequirementTranslationFunctions.tryTranslateTerraformingRatingRequirement=function(inputKey,rawValue)\r\nif inputKey==\"TR\" or inputKey==\"tr\" then\r\nlocal requirement={}\r\nrequirement.value=rawValue\r\nrequirement.type=requirementType.terraformingRating\r\nrequirement.key=\"tr\"\r\nreturn requirement\r\nend\r\nend\r\nrequirementTranslationFunctions.tryTranslateProductionRequirement=function(inputKey,rawValue)\r\nfor _,productionType in ipairs(resources.baseGame) do\r\nif string.lower(inputKey)==productionType then\r\nlocal requirement={}\r\nrequirement.value=rawValue\r\nrequirement.type=requirementType.production\r\nrequirement.key=productionType\r\nreturn requirement\r\nend\r\nend\r\nend\r\nrequirementTranslationFunctions.tryTranslateOwnedObjectsRequirement=function(inputKey,rawValue)\r\nfor _,expansion in pairs(ownableObjects) do\r\nif expansion.friendlyNameMapping~=nil then\r\nfor objectId,objectFriendlyNames in pairs(expansion.friendlyNameMapping) do\r\nfor _,name in ipairs(objectFriendlyNames) do\r\nif name==inputKey then\r\nlocal requirement={}\r\nrequirement.value=rawValue\r\nrequirement.type=requirementType.ownedObjectsInPlay\r\nrequirement.key=objectId\r\nreturn requirement\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\ngetCheckAgainstValueFunctions={}\r\ngetCheckAgainstValueFunctions.getGlobalParameterValue=function(tmPlayer,requirement)\r\nif requirement.type==requirementType.globalParameter then\r\nif requirement.key==\"TFVenus\" then\r\nreturn globalParameterSystem.values.venus.stepIndex\r\nelseif requirement.key==\"O2\" then\r\nreturn globalParameterSystem.values.oxygen.stepIndex\r\nelseif requirement.key==\"Temp\" then\r\nreturn globalParameterSystem.values.temperature.stepIndex\r\nelseif requirement.key==\"Ocean\" then\r\nreturn globalParameterSystem.values.ocean.stepIndex + globalParameterSystem.values.ocean.extra\r\nend\r\nend\r\nend\r\ngetCheckAgainstValueFunctions.getTagCounts=function(tmPlayer,requirement)\r\nif requirement.type==requirementType.tags then\r\nif requirement.target==requirementTarget.own then\r\nreturn getPlayerTags({tagName=requirement.key,playerColor=tmPlayer.color})\r\nelseif requirement.target==requirementTarget.other then\r\nreturn getAllOtherPlayersTags({tagName=requirement.key,playerColor=tmPlayer.color})\r\nelse\r\nlocal tagCount=getPlayerTags({tagName=requirement.key,playerColor=tmPlayer.color})\r\nreturn tagCount + getAllOtherPlayersTags({tagName=requirement.key,playerColor=tmPlayer.color})\r\nend\r\nend\r\nend\r\ngetCheckAgainstValueFunctions.getTerraformingCount=function(tmPlayer,requirement)\r\nif requirement.type==requirementType.terraformingRating then\r\nlocal result=0\r\nfor i,player in ipairs(gameState.allPlayers) do\r\nif requirement.target==requirementTarget.own then\r\nresult=tmPlayer.terraformingRating\r\nelseif requirement.target==requirementTarget.other then\r\nif player~=tmPlayer then\r\nresult=result + player.terraformingRating\r\nend\r\nelseif requirement.target==requirementTarget.otherSingle then\r\nif player~=tmPlayer and player.terraformingRating > result then\r\nresult=player.terraformingRating\r\nend\r\nelseif requirement.target==requirementTarget.any then\r\nresult=result + player.terraformingRating\r\nend\r\nend\r\nreturn result\r\nend\r\nend\r\ngetCheckAgainstValueFunctions.getActiveDelegates=function(tmPlayer,requirement)\r\nif requirement.type==requirementType.delegate then\r\nreturn 999\r\nelseif requirement.type==requirementType.partyLeader then\r\nlocal partyLeaderCount=0\r\nfor _,info in pairs(gameState.turmoilData.parties) do\r\nif requirement.target==\"own\" and getPartyLeadColor(info)==tmPlayer.color then\r\npartyLeaderCount=partyLeaderCount + 1\r\nend\r\nend\r\nreturn partyLeaderCount\r\nelseif requirement.type==requirementType.chairman then\r\nlocal chairmanColor=getChairman().getDescription()\r\nif requirement.target==\"neutral\" and chairmanColor==\"Neutral\" then\r\nreturn 1\r\nelseif requirement.target==\"own\" and tmPlayer.color==chairmanColor then\r\nreturn 1\r\nend\r\nreturn 0\r\nend\r\nend\r\ngetCheckAgainstValueFunctions.getSpaceAgainstInfrastructureValue=function(tmPlayer,requirement)\r\nif requirement.type==requirementType.infrastructure then\r\nlocal spaceTags=getPlayerTags({tagName=\"Space\",playerColor=tmPlayer.color})\r\nspaceTags=spaceTags + getPlayerTags({tagName=\"WildCard\",playerColor=tmPlayer.color})\r\nlocal infrastructureTags=getPlayerTags({tagName=\"Infrastructure\",playerColor=tmPlayer.color})\r\nif spaceTags > infrastructureTags then\r\nreturn 1\r\nelse\r\nreturn 0\r\nend\r\nend\r\nend\r\ngetCheckAgainstValueFunctions.getPoliticalPartyInfluence=function(tmPlayer,requirement)\r\nif requirement.type==requirementType.party then\r\nif requirement.key==getRulingParty().partyId then\r\nreturn 999\r\nelse\r\nreturn playersPartyDelegateCount(tmPlayer.color,requirement.key)\r\nend\r\nend\r\nend\r\ngetCheckAgainstValueFunctions.getProductionValue=function(tmPlayer,requirement)\r\nif requirement.type==requirementType.production then\r\nlocal productionValue=0\r\nfor i,player in ipairs(gameState.allPlayers) do\r\nif requirement.target==requirementTarget.own then\r\nproductionValue=Global.call(\"getPlayerProduction\",{resourceType=requirement.key,playerColor=tmPlayer.color})\r\nelseif requirement.target==requirementTarget.other then\r\nif player~=tmPlayer then\r\nproductionValue=productionValue + Global.call(\"getPlayerProduction\",{resourceType=requirement.key,playerColor=player.color})\r\nend\r\nelseif requirement.target==requirementTarget.otherSingle then\r\nif player~=tmPlayer and player.ownedObjects[requirement.key] > productionValue then\r\nproductionValue=productionValue + Global.call(\"getPlayerProduction\",{resourceType=requirement.key,playerColor=player.color})\r\nend\r\nelseif requirement.target==requirementTarget.any then\r\nproductionValue=productionValue + Global.call(\"getPlayerProduction\",{resourceType=requirement.key,playerColor=player.color})\r\nend\r\nend\r\nreturn productionValue\r\nend\r\nend\r\ngetCheckAgainstValueFunctions.getPlayerOwnedObjectsInPlay=function(tmPlayer,requirement)\r\nif requirement.type==requirementType.ownedObjectsInPlay then\r\nlocal objectsCount=0\r\nfor i,player in ipairs(gameState.allPlayers) do\r\nif requirement.target==requirementTarget.own then\r\nobjectsCount=tmPlayer.ownedObjects[requirement.key]\r\nelseif requirement.target==requirementTarget.other then\r\nif player~=tmPlayer then\r\nobjectsCount=objectsCount + player.ownedObjects[requirement.key]\r\nend\r\nelseif requirement.target==requirementTarget.otherSingle then\r\nif player~=tmPlayer and player.ownedObjects[requirement.key] > objectsCount then\r\nobjectsCount=player.ownedObjects[requirement.key]\r\nend\r\nelseif requirement.target==requirementTarget.any then\r\nobjectsCount=objectsCount + player.ownedObjects[requirement.key]\r\nend\r\nend\r\nreturn objectsCount\r\nend\r\nend\r","n99":"gameEventHandling={\neventHandlers={},\nlatestEventSourceGuid=\"\",\nlatestEventMetadata=nil,\nwasUpdated=true,\neventInProgress=false,\n}\nfunction eventHandling_triggerEvent(params)\nlocal triggeredByColor=params.triggeredByColor\nlocal triggerType=params.triggerType\nlocal eventSourceId=params.eventSourceId\nlocal metadata=params.metadata\nif metadata==nil then\nmetadata={}\nend\nif metadata.triggeredByColor==nil and triggeredByColor~=nil then\nmetadata.triggeredByColor=triggeredByColor\nend\nif metadata.eventSourceId==nil then\nmetadata.eventSourceId=eventSourceId\nend\neventHandling.handleEvent(triggeredByColor,triggerType,eventSourceId,metadata)\nend\nfunction eventHandling_subscribeHandler(params)\neventHandling.subscribeHandler(params.eventHandler,params.owner)\neventHandling.wasUpdated=true\nend\nfunction eventHandling_unsubscribeHandler(params)\neventHandling.unsubscribeHandler(params.eventHandler)\neventHandling.wasUpdated=true\nend\neventHandling={}\neventHandling.handleEvent=function(triggeredByColor,triggerType,eventSourceId,metadata)\ngameEventHandling.eventInProgress=true\nif gameEventHandling.eventHandlers[triggerType]==nil then\ngameEventHandling.eventHandlers[triggerType]={}\nend\nfor id,eventHandler in pairs(gameEventHandling.eventHandlers[triggerType]) do\neventHandling.processEventForHandler(eventHandler,triggeredByColor,triggerType,metadata)\nend\ngameEventHandling.eventInProgress=false\nend\neventHandling.subscribeHandler=function(eventHandler,owner)\nlocal triggerType=eventHandler.triggerType\nif gameEventHandling.eventHandlers[triggerType]==nil then\ngameEventHandling.eventHandlers[triggerType]={}\nend\neventHandler.owner=owner\ntable.insert(gameEventHandling.eventHandlers[triggerType],eventHandler)\ngameEventHandling.wasUpdated=true\nend\neventHandling.unsubscribeHandler=function(unsubscriber)\nWait.condition(function()\nlocal triggerType=unsubscriber.triggerType\nlocal indicesToRemove={}\nfor index,eventHandler in pairs(gameEventHandling.eventHandlers[triggerType]) do\nif eventHandler.eventHandlerId==unsubscriber.eventHandlerId then\ntable.insert(indicesToRemove,index)\nend\nend\nfor i=#indicesToRemove,1,-1 do\ntable.remove(gameEventHandling.eventHandlers[triggerType],indicesToRemove[i])\nend\ngameEventHandling.wasUpdated=true\nend,\nfunction()\nreturn not gameEventHandling.eventInProgress\nend)\nend\neventHandling.processEventForHandler=function(eventHandler,triggeredByColor,triggerType,metadata)\nif eventHandler.triggerType~=triggerType then\nreturn\nelseif eventHandler.triggerScope==eventData.triggerScope.noPlayer and triggeredByColor~=nil then\nreturn\nelseif eventHandler.triggerScope==eventData.triggerScope.playerThemself and triggeredByColor~=eventHandler.owner then\nreturn\nelseif eventHandler.triggerScope==eventData.triggerScope.otherPlayers and triggeredByColor==eventHandler.owner then\nreturn\nend\nif not isSupportedPhase(gameState.currentPhase,eventHandler.allowedPhases) then\nreturn\nend\nif string.find(eventHandler.eventHandlerId,\"globalEventHandler\") then\nGlobal.call(eventHandler.callbackName,metadata.triggeredByColor)\nelseif eventHandler.eventHandlerId~=nil then\nlocal eventListener=getObjectFromGUID(eventHandler.eventHandlerId)\nif eventListener~=nil then\neventListener.call(eventHandler.callbackName,\n{actionIndex=eventHandler.actionIndex,\nplayerColor=eventHandler.owner,\nmetadata=metadata} )\nelseif eventHandler.owner~=nil then\nlogging.broadcastToColor(\"Warning: Object '\"..eventHandler.objectPrettyName..\"' (GUID \"..eventHandler.eventHandlerId..\") which listens for events is not available and cannot be triggered. Event system does not work with cards that are in a stack.\",eventHandler.owner,eventHandler.owner,loggingModes.essential)\nend\nend\nend\nfunction isSupportedPhase(currentPhase,allowedPhases)\nlocal isSupported=false\nfor _,allowedPhase in pairs(allowedPhases) do\nif allowedPhase==currentPhase then\nisSupported=true\nend\nend\nreturn isSupported\nend","n100":"function onLoad(saved_data)\r\nlocal loaded_data\r\nif saved_data~=\"\" and saved_data~=nil then\r\nloaded_data=JSON.decode(saved_data)\r\nif loaded_data.scriptVersion~=scriptVersion then\r\nsaved_data=nil\r\nend\r\nend\r\nif saved_data~=\"\" and saved_data~=nil then\r\nprint(\"Loading data!\")\r\nloaded_data=JSON.decode(saved_data)\r\ngameState=loaded_data.gameState\r\ngameMap=hexMapHelpers.makeMapComputeFriendly(loaded_data.map)\r\nif loaded_data.venusMap~=nil then\r\nvenusMap=hexMapHelpers.makeMapComputeFriendly(loaded_data.venusMap)\r\nend\r\ngameEventHandling=loaded_data.gameEventHandling\r\nglobalParameterSystem.values=loaded_data.globalParameters\r\nlogging.currentMode=loaded_data.loggingMode\r\ngameConfig=loaded_data.gameConfig\r\nbagProtectorAllowedList=loaded_data.bagProtectorAllowedList\r\nbagProtectorGuidStores.generalStore=loaded_data.bagProtectorGeneralStore\r\nif not loaded_data.gameState.started then\r\nbroadcastToAll(\"You have loaded a non started game. This is not officially supported. Get the save game from discord and launch from that. It might still work.\")\r\nend\r\nend\r\ntablePositions.update()\r\nboard.update()\r\nWait.time(function()\r\ncreateOrUpdatePlayerColors()\r\nupdatePlayerUI()\r\nend,1)\r\nmath.randomseed( os.time() )\r\nif gameState.started~=true then\r\ncreateAllSetupButtons()\r\nmilestoneSystem.initialize()\r\nawardSystem.initialize()\r\nelse\r\nsetupMapButtons()\r\nsetupStandardProjectMat()\r\nglobalParameterSystem.setupButtons()\r\nsetupBoard()\r\nend\r\nif gameState.activeExpansions.timer then\r\ntimerFunctions.initializeTimer()\r\nend\r\nreadGameConfigOnGameLoad()\r\nmakeObjectsUninteractable()\r\nend\r\nfunction onSave()\r\nlocal serializableMap=hexMapHelpers.makeMapSerializable(gameMap)\r\nlocal data_to_save=nil\r\nif venusMap~=nil then\r\nlocal serializableVenusMap=hexMapHelpers.makeMapSerializable(venusMap)\r\ndata_to_save={scriptVersion=scriptVersion,gameEventHandling=gameEventHandling,gameState=gameState,bagProtectorAllowedList=bagProtectorAllowedList,bagProtectorGeneralStore=bagProtectorGuidStores.generalStore,map=serializableMap,loggingMode=logging.currentMode,globalParameters=globalParameterSystem.values,venusMap=serializableVenusMap,gameConfig=gameConfig}\r\nelse\r\ndata_to_save={scriptVersion=scriptVersion,gameEventHandling=gameEventHandling,gameState=gameState,bagProtectorAllowedList=bagProtectorAllowedList,bagProtectorGeneralStore=bagProtectorGuidStores.generalStore,map=serializableMap,loggingMode=logging.currentMode,globalParameters=globalParameterSystem.values,gameConfig=gameConfig}\r\nend\r\nreturn JSON.encode(data_to_save)\r\nend\r\n--   function discardLoopCoroutine()\r\n--       end\r\n--\r\n--           playerColor=\"White\",\r\n--     return 1\r\nfunction filterObjectEnterContainer(container,enter_object)\r\nlocal containerGuid=container.getGUID()\r\nlocal enterObjectGuid=enter_object.getGUID()\r\nlocal isOcean=gameObjectHelpers.isOcean(enterObjectGuid)\r\nlocal bagProtectorResult= bagProtector.filterObjectEnter(container,enter_object)\r\nif bagProtectorResult~=nil then\r\nreturn bagProtectorResult\r\nend\r\nlocal isCity=gameObjectHelpers.isCity(enterObjectGuid)\r\nif containerGuid==gameObjectHelpers.getGuidByName(\"specialsBag\") and (enterObjectGuid==gameObjectHelpers.getGuidByName(\"capitalCityToken\") or enterObjectGuid==gameObjectHelpers.getGuidByName(\"oceanCityToken\") or enterObjectGuid==gameObjectHelpers.getGuidByName(\"redCity\")) then\r\nreturn true\r\nend\r\nif containerGuid~=gameObjectHelpers.getGuidByName(\"genericCityBag\") and isCity then\r\nlogging.printToAll(\"Cities only belong on the board or in the city bag\",{1,1,1},loggingModes.essential)\r\nreturn false\r\nend\r\nlocal isGreenery=gameObjectHelpers.isGreenery(enter_object)\r\nif containerGuid~=gameObjectHelpers.getGuidByName(\"genericGreeneryBag\") and isGreenery then\r\nlogging.printToAll(\"Greenerys only belong on the board or in the city bag\",{1,1,1},loggingModes.essential)\r\nreturn false\r\nend\r\nlog(\"Enter container allowed!\")\r\nreturn true\r\nend\r\nobjectsOfInterest={}\r\nobjectsEnteredContainer={}\r\nfunction onObjectEnterContainer(container,enter_object)\r\nlocal enterGuid=enter_object.getGUID()\r\nif objectsOfInterest[enterGuid]~=nil then\r\nobjectsOfInterest[enterGuid]=nil\r\nonContainerDeath(container,enter_object)\r\nelse\r\nobjectsEnteredContainer[enterGuid]=container\r\nend\r\nend\r\nfunction onObjectDestroy(dying_object)\r\nif dying_object==nil then\r\nreturn\r\nend\r\nlocal dyingGuid=dying_object.getGUID()\r\nif objectsEnteredContainer[dyingGuid]~=nil then\r\nobjectsEnteredContainer[dyingGuid]=nil\r\nonContainerDeath(container,dying_object)\r\nelse\r\nlocal objectOfInterestStructure={\r\ntimeOfDeath=Time.time\r\n}\r\nWait.frames(function()\r\nif objectsOfInterest~=nil then\r\nobjectsOfInterest[dyingGuid]=objectOfInterestStructure\r\nWait.time(checkObjectRealDeath,0.1)\r\nend\r\nend,1)\r\nend\r\nend\r\nfunction checkObjectRealDeath()\r\nfor guid,objectStructure in pairs(objectsOfInterest) do\r\nif (Time.time - objectStructure.timeOfDeath) > 0.05 then\r\nobjectsOfInterest[guid]=nil\r\nonRealDeath(guid)\r\nend\r\nend\r\nend\r\nfunction onContainerDeath(container,dying_object)\r\nlocal dyingGuid=dying_object.getGUID()\r\nif gameObjectHelpers.isOcean(dyingGuid) then\r\ngameObjectHelpers.oceanStashed()\r\nelseif gameObjectHelpers.isCity(dyingGuid) then\r\ngameObjectHelpers.cityDestroyed(dyingGuid)\r\nelseif gameObjectHelpers.isGreenery(dyingGuid) then\r\ngameObjectHelpers.greeneryDestroyed(dyingGuid)\r\nend\r\nend\r\nfunction onRealDeath(dyingGuid)\r\nif gameObjectHelpers.isOcean(dyingGuid) then\r\ngameObjectHelpers.oceanDestroyed(dyingGuid)\r\nlogging.printToAll(\"Making sure no oceans are lost!\",{1,1,1},loggingModes.unimportant)\r\nensureBagOceans()\r\nend\r\nend\r\nfunction onObjectLeaveContainer(container,leave_object)\r\nfunction handleObjectDelayed()\r\nfor i=1,10 do\r\ncoroutine.yield(0)\r\nend\r\nlocal containerId=container.getGUID()\r\nlocal objectId=leave_object.getGUID()\r\nif leave_object==nil then\r\nreturn 1\r\nelseif containerId==gameObjectHelpers.getGuidByName(\"specialsBag\") then\r\nupdateCityCounters()\r\nelseif gameObjectHelpers.isOcean(objectId) then\r\ngameObjectHelpers.oceanRetrieved()\r\nelseif leave_object.name=='Card' then\r\nhandleCardLeavingContainer(containerId,leave_object)\r\nend\r\nbagProtector.objectLeaveContainer(container,leave_object)\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"handleObjectDelayed\")\r\nend\r\nfunction handleCardLeavingContainer(containerId,leave_object)\r\nif gameObjectHelpers.getGuidByName(\"turmoilDeck\")==containerId then\nreturn\r\nend\r\nif gameObjectHelpers.getGuidByName(\"corpDeck\")==containerId then\r\nleave_object.setDescription(\":Corporation:\\n\"..leave_object.getDescription())\r\nelseif gameObjectHelpers.getGuidByName(\"preludeDeck\")==containerId then\r\nleave_object.setDescription(\":Prelude:\\n\"..leave_object.getDescription())\r\nend\r\nif leave_object.getLuaScript()==nil or leave_object.getLuaScript()=='' then\r\nlocal baseCardScript=getCardSpecificLuaScript(leave_object)\r\nleave_object.setLuaScript(baseCardScript)\r\nend\r\nend\r\nfunction getCardSpecificLuaScript(card)\r\nlocal cardName=card.getName()\r\nif string.match(cardName,\"%(B%)\") then\r\nreturn getObjectFromGUID(gameObjectHelpers.getGuidByName(\"baseBlueCard\")).getLuaScript()\r\nelseif string.match(cardName,\"%(E%)\") then\r\nreturn getObjectFromGUID(gameObjectHelpers.getGuidByName(\"baseEventCard\")).getLuaScript()\r\nelseif string.match(cardName,\"%(G%)\") then\r\nreturn getObjectFromGUID(gameObjectHelpers.getGuidByName(\"baseGreenCard\")).getLuaScript()\r\nelseif string.match(cardName,\"%(HO%)\") then\r\nreturn getObjectFromGUID(gameObjectHelpers.getGuidByName(\"baseInfrastructureCard\")).getLuaScript()\r\nelseif string.match(cardName,\"%(C%)\") then\r\nreturn getObjectFromGUID(gameObjectHelpers.getGuidByName(\"baseCorporationCard\")).getLuaScript()\r\nelse\r\nreturn getObjectFromGUID(gameObjectHelpers.getGuidByName(\"baseCard\")).getLuaScript()\r\nend\r\nend\r\nfunction onPlayerChangeColor(player_color)\r\nWait.frames(function()\r\nif gameState==nil then\r\nreturn\r\nend\r\nif gameState.started~=true then\r\ncreateOrUpdatePlayerColors()\r\nend\r\nupdatePlayerUI()\r\nend,1)\r\nend\r","n101":"doubleClickTable={}\r\nfunction isDoubleClick(identifier)\r\nidentifier=identifier or \"generic\"\r\nfunction catchDoubleClicksCoroutine()\r\nfor i=1,60 do\r\ncoroutine.yield(0)\r\nend\r\ndoubleClickTable[identifier]=false\r\nreturn 1\r\nend\r\nif doubleClickTable[identifier]==true then\r\nlog(\"Catched a double click for \"..identifier)\r\nreturn true\r\nend\r\nstartLuaCoroutine(self,\"catchDoubleClicksCoroutine\")\r\ndoubleClickTable[identifier]=true\r\nreturn false\r\nend\r\n\ngigaMap=false\r\nvolatileData={operations={}}\r","n102":"randomizer={\nlatestMilestones={},\nlatestAwards={},\n}\n--     milestoneSystem.setupMilestones\n--   local lastName=params.currentName\n--\n--\n--       end\n--     milestoneSystem.changeMilestone(params.guid,milestoneInfo)\n--\n--       end\n-- function randomizeAwardsAndMilestones(_,playerColor,altClick)\n--\n--   end\n--\n--   end\nfunction initializeRandomizerAwardsAndMilestones()\nfor i,guid in pairs(gameState.milestoneGuids) do\ngetObjectFromGUID(guid).call(\"enableChangeButton\")\nend\nfor i,guid in pairs(gameState.awardGuids) do\ngetObjectFromGUID(guid).call(\"enableChangeButton\")\nend\nend\n\n--\n--\n--   button.setPositionSmooth({-48.85,1.5,0.00})\n--\n--     function_owner=self,\n--     height=250,\n--\n--     function_owner=self,\n--     height=250,\n--\n--     function_owner=self,\n--     height=250,\n--\n--     tooltip='Number of randomizer expansion tiles that shall spawn.',\n--     height=250,\n-- end\n--\n--       table.remove(t,i)\n-- function changeRandomizerExpansionTilesAmount(object,playerColor,altClick)\n--     if randomizer.randomizerExpansionTileCount <= 0 then\n--     end\n--\n--  })\n--\n--\n-- end\n--\n--   end\n--\n--   for _,randomizerTemplate in pairs(randomizerTemplates) do\n--     end\n--\n--  \n--\n--       index=index + 1\n--\n--\n--       waitAtLeastFrames=waitAtLeastFrames - 1\n--\n--   end\n--\n--   if getObjectFromGUID(RANDOMIZER_CONTAINER_GUID)==nil then\n--\n--   if getObjectFromGUID(RANDOMIZER_CONTAINER_GUID)==nil then\n--\n--   local r=math.random(1,#randomizerTiles.mapOceansPositions)\n--\n--\n--     table.insert(finalIndices,possibleIndices[index])\n--\n--       return\n--\n-- function placeSpecialTiles(map)\n--\n--\n--         if next(tile.features)~=nil and tile.features[1]==\"empty\" then\n--     end\n--\n--     table.insert(specialTilesIndices,validIndices[r])\n--\n-- end\n--\n--\n--       for k,tile in pairs(kMatrix) do\n--       end\n--\n--     table.insert(tilesIndices,validIndices[r])\n--\n--       expansionTiles=tableHelpers.deepClone(randomizerTiles.randomizerTileExpansion)\n--\n-- function placeRegularTiles(map)\n--\n--         if next(tile.features)~=nil and tile.features[1]==\"empty\" then\n--             poppedTile=popRandomTile(regularTiles)\n--\n--     end\n\nWait.time(function() broadcastToAll( \"This is a preview verison of the TTS MMGA Terraforming Mars mod.\",{1,0,0}) end,2)\r\nWait.time(function() broadcastToAll( \"This version will definitely contain bugs. Feedback welcome and have fun.\",{0,1,1}) end,10)\r\nWait.time(function() broadcastToAll( \"Report bugs either in the MMGA bug-reports channel or send a Discord DM to Krymnopht#9952.\",{0,1,1}) end,10)\r\nfunction noOperation(_,_,_)\r\nreturn\r\nend\r\n--\r\n--\r\n--\r\n-- for _,obj in pairs(getAllObjects()) do\r\n"}